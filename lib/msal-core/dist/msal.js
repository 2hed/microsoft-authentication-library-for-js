/*! msal v0.2.4 2019-02-13 */

'use strict';
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Msal",[],t):"object"==typeof exports?exports.Msal=t():e.Msal=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(){}return e.compareObjects=function(e,t){return!(!e||!t)&&!(!e.userIdentifier||!t.userIdentifier||e.userIdentifier!==t.userIdentifier)},e.expiresIn=function(e){return e||(e="3599"),this.now()+parseInt(e,10)},e.now=function(){return Math.round((new Date).getTime()/1e3)},e.isEmpty=function(e){return void 0===e||!e||0===e.length},e.extractIdToken=function(e){var t=this.decodeJwt(e);if(!t)return null;try{var n=t.JWSPayload,r=this.base64DecodeStringUrlSafe(n);return r?JSON.parse(r):null}catch(e){}return null},e.base64EncodeStringUrlSafe=function(e){return window.btoa?window.btoa(e):this.encode(e)},e.base64DecodeStringUrlSafe=function(e){return e=e.replace(/-/g,"+").replace(/_/g,"/"),window.atob?decodeURIComponent(encodeURIComponent(window.atob(e))):decodeURIComponent(encodeURIComponent(this.decode(e)))},e.encode=function(e){var t,n,r,o,i,s,a,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",u="",l=0;for(e=this.utf8Encode(e);l<e.length;)o=(t=e.charCodeAt(l++))>>2,i=(3&t)<<4|(n=e.charCodeAt(l++))>>4,s=(15&n)<<2|(r=e.charCodeAt(l++))>>6,a=63&r,isNaN(n)?s=a=64:isNaN(r)&&(a=64),u=u+c.charAt(o)+c.charAt(i)+c.charAt(s)+c.charAt(a);return u.replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")},e.utf8Encode=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t},e.decode=function(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n=(e=String(e).replace(/=+$/,"")).length;if(n%4==1)throw new Error("The token to be decoded is not correctly encoded.");for(var r,o,i,s,a,c,u,l,d="",h=0;h<n;h+=4){if(r=t.indexOf(e.charAt(h)),o=t.indexOf(e.charAt(h+1)),i=t.indexOf(e.charAt(h+2)),s=t.indexOf(e.charAt(h+3)),h+2===n-1){c=(a=r<<18|o<<12|i<<6)>>16&255,u=a>>8&255,d+=String.fromCharCode(c,u);break}if(h+1===n-1){c=(a=r<<18|o<<12)>>16&255,d+=String.fromCharCode(c);break}c=(a=r<<18|o<<12|i<<6|s)>>16&255,u=a>>8&255,l=255&a,d+=String.fromCharCode(c,u,l)}return d},e.decodeJwt=function(e){if(this.isEmpty(e))return null;var t=/^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/.exec(e);return!t||t.length<4?null:{header:t[1],JWSPayload:t[2],JWSSig:t[3]}},e.deserialize=function(e){var t,n=/\+/g,r=/([^&=]+)=([^&]*)/g,o=function(e){return decodeURIComponent(e.replace(n," "))},i={};for(t=r.exec(e);t;)i[o(t[1])]=o(t[2]),t=r.exec(e);return i},e.isIntersectingScopes=function(e,t){e=this.convertToLowerCase(e);for(var n=0;n<t.length;n++)if(e.indexOf(t[n].toLowerCase())>-1)return!0;return!1},e.containsScope=function(e,t){return e=this.convertToLowerCase(e),t.every(function(t){return e.indexOf(t.toString().toLowerCase())>=0})},e.convertToLowerCase=function(e){return e.map(function(e){return e.toLowerCase()})},e.removeElement=function(e,t){return e.filter(function(e){return e!==t})},e.decimalToHex=function(e){for(var t=e.toString(16);t.length<2;)t="0"+t;return t},e.getLibraryVersion=function(){return"0.2.4"},e.replaceFirstPath=function(e,t){if(!t)return e;var n=this.GetUrlComponents(e),o=n.PathSegments;return 0===o.length||o[0]!==r.Constants.common&&o[0]!==r.Constants.organizations||(o[0]=t,e=n.Protocol+"//"+n.HostNameAndPort+"/"+o.join("/")),e},e.createNewGuid=function(){var t=window.crypto;if(t&&t.getRandomValues){var n=new Uint8Array(16);return t.getRandomValues(n),n[6]|=64,n[6]&=79,n[8]|=128,n[8]&=191,e.decimalToHex(n[0])+e.decimalToHex(n[1])+e.decimalToHex(n[2])+e.decimalToHex(n[3])+"-"+e.decimalToHex(n[4])+e.decimalToHex(n[5])+"-"+e.decimalToHex(n[6])+e.decimalToHex(n[7])+"-"+e.decimalToHex(n[8])+e.decimalToHex(n[9])+"-"+e.decimalToHex(n[10])+e.decimalToHex(n[11])+e.decimalToHex(n[12])+e.decimalToHex(n[13])+e.decimalToHex(n[14])+e.decimalToHex(n[15])}for(var r="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",o="0123456789abcdef",i=0,s="",a=0;a<36;a++)"-"!==r[a]&&"4"!==r[a]&&(i=16*Math.random()|0),"x"===r[a]?s+=o[i]:"y"===r[a]?(i&=3,s+=o[i|=8]):s+=r[a];return s},e.GetUrlComponents=function(e){if(!e)throw"Url required";var t=RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"),n=e.match(t);if(!n||n.length<6)throw"Valid url required";var r={Protocol:n[1],HostNameAndPort:n[4],AbsolutePath:n[5]},o=r.AbsolutePath.split("/");return o=o.filter(function(e){return e&&e.length>0}),r.PathSegments=o,r},e.CanonicalizeUri=function(t){return t&&(t=t.toLowerCase()),t&&!e.endsWith(t,"/")&&(t+="/"),t},e.endsWith=function(e,t){return!(!e||!t)&&-1!==e.indexOf(t,e.length-t.length)},e.checkSSO=function(e){return!(e&&(-1!==e.indexOf(r.Constants.login_hint)||-1!==e.indexOf(r.Constants.sid)))},e.constructUnifiedCacheExtraQueryParameter=function(e,t){return e?e.hasOwnProperty(r.Constants.upn)?(t=this.urlRemoveQueryStringParameter(t,r.Constants.login_hint),(t=this.urlRemoveQueryStringParameter(t,r.Constants.domain_hint))?t+"&"+r.Constants.login_hint+"="+e.upn+"&"+r.Constants.domain_hint+"="+r.Constants.organizations:"&"+r.Constants.login_hint+"="+e.upn+"&"+r.Constants.domain_hint+"="+r.Constants.organizations):(t=this.urlRemoveQueryStringParameter(t,r.Constants.domain_hint))?t+"&"+r.Constants.domain_hint+"="+r.Constants.organizations:"&"+r.Constants.domain_hint+"="+r.Constants.organizations:t},e.urlRemoveQueryStringParameter=function(e,t){if(this.isEmpty(e))return e;var n=new RegExp("(\\&"+t+"=)[^&]+");return e=e.replace(n,""),n=new RegExp("("+t+"=)[^&]+&"),e=e.replace(n,""),n=new RegExp("("+t+"=)[^&]+"),e=e.replace(n,"")},e}();t.Utils=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return Object.defineProperty(e,"errorDescription",{get:function(){return"error_description"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"error",{get:function(){return"error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"scope",{get:function(){return"scope"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"acquireTokenUser",{get:function(){return"msal.acquireTokenUser"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"clientInfo",{get:function(){return"client_info"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"clientId",{get:function(){return"clientId"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"authority",{get:function(){return"msal.authority"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"idToken",{get:function(){return"id_token"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"accessToken",{get:function(){return"access_token"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"expiresIn",{get:function(){return"expires_in"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"sessionState",{get:function(){return"session_state"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalClientInfo",{get:function(){return"msal.client.info"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalError",{get:function(){return"msal.error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalErrorDescription",{get:function(){return"msal.error.description"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalSessionState",{get:function(){return"msal.session.state"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenKeys",{get:function(){return"msal.token.keys"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"accessTokenKey",{get:function(){return"msal.access.token.key"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"expirationKey",{get:function(){return"msal.expiration.key"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateLogin",{get:function(){return"msal.state.login"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateAcquireToken",{get:function(){return"msal.state.acquireToken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateRenew",{get:function(){return"msal.state.renew"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"nonceIdToken",{get:function(){return"msal.nonce.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userName",{get:function(){return"msal.username"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"idTokenKey",{get:function(){return"msal.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"loginRequest",{get:function(){return"msal.login.request"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"loginError",{get:function(){return"msal.login.error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"renewStatus",{get:function(){return"msal.token.renew.status"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msal",{get:function(){return"msal"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"no_user",{get:function(){return"NO_USER"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"login_hint",{get:function(){return"login_hint"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"domain_hint",{get:function(){return"domain_hint"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"organizations",{get:function(){return"organizations"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"consumers",{get:function(){return"consumers"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"consumersUtid",{get:function(){return"9188040d-6c67-4c5b-b112-36a304b66dad"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"sid",{get:function(){return"sid"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"upn",{get:function(){return"upn"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"adalIdToken",{get:function(){return"adal.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt_select_account",{get:function(){return"&prompt=select_account"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt_none",{get:function(){return"&prompt=none"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt",{get:function(){return"prompt"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"response_mode_fragment",{get:function(){return"&response_mode=fragment"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"resourceDelimeter",{get:function(){return"|"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusCancelled",{get:function(){return"Canceled"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusCompleted",{get:function(){return"Completed"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusInProgress",{get:function(){return"In Progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWidth",{get:function(){return this._popUpWidth},set:function(e){this._popUpWidth=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpHeight",{get:function(){return this._popUpHeight},set:function(e){this._popUpHeight=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"login",{get:function(){return"LOGIN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"renewToken",{get:function(){return"RENEW_TOKEN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"unknown",{get:function(){return"UNKNOWN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"urlHash",{get:function(){return"msal.urlHash"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"angularLoginRequest",{get:function(){return"msal.angular.login.request"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userIdentifier",{get:function(){return"userIdentifier"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"common",{get:function(){return"common"},enumerable:!0,configurable:!0}),e._popUpWidth=483,e._popUpHeight=600,e}();t.Constants=r;var o=function(){function e(){}return Object.defineProperty(e,"loginProgressError",{get:function(){return"login_progress_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"acquireTokenProgressError",{get:function(){return"acquiretoken_progress_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"inputScopesError",{get:function(){return"input_scopes_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"endpointResolutionError",{get:function(){return"endpoints_resolution_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWindowError",{get:function(){return"popup_window_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userLoginError",{get:function(){return"user_login_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userCancelledError",{get:function(){return"user_cancelled"},enumerable:!0,configurable:!0}),e}();t.ErrorCodes=o;var i=function(){function e(){}return Object.defineProperty(e,"loginProgressError",{get:function(){return"Login is in progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"acquireTokenProgressError",{get:function(){return"Acquire token is in progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"inputScopesError",{get:function(){return"Invalid value of input scopes provided"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"endpointResolutionError",{get:function(){return"Endpoints cannot be resolved"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWindowError",{get:function(){return"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userLoginError",{get:function(){return"User login is required"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userCancelledError",{get:function(){return"User closed the popup window and cancelled the flow"},enumerable:!0,configurable:!0}),e}();t.ErrorDescription=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(5),i=n(10);!function(e){e[e.Aad=0]="Aad",e[e.Adfs=1]="Adfs",e[e.B2C=2]="B2C"}(t.AuthorityType||(t.AuthorityType={}));var s=function(){function e(e,t){this.IsValidationEnabled=t,this.CanonicalAuthority=e,this.validateAsUri()}return Object.defineProperty(e.prototype,"Tenant",{get:function(){return this.CanonicalAuthorityUrlComponents.PathSegments[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"AuthorizationEndpoint",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.AuthorizationEndpoint.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"EndSessionEndpoint",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.EndSessionEndpoint.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"SelfSignedJwtAudience",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.Issuer.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),e.prototype.validateResolved=function(){if(!this.tenantDiscoveryResponse)throw"Please call ResolveEndpointsAsync first"},Object.defineProperty(e.prototype,"CanonicalAuthority",{get:function(){return this.canonicalAuthority},set:function(e){this.canonicalAuthority=r.Utils.CanonicalizeUri(e),this.canonicalAuthorityUrlComponents=null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CanonicalAuthorityUrlComponents",{get:function(){return this.canonicalAuthorityUrlComponents||(this.canonicalAuthorityUrlComponents=r.Utils.GetUrlComponents(this.CanonicalAuthority)),this.canonicalAuthorityUrlComponents},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"DefaultOpenIdConfigurationEndpoint",{get:function(){return this.CanonicalAuthority+"v2.0/.well-known/openid-configuration"},enumerable:!0,configurable:!0}),e.prototype.validateAsUri=function(){var e;try{e=this.CanonicalAuthorityUrlComponents}catch(e){throw o.ErrorMessage.invalidAuthorityType}if(!e.Protocol||"https:"!==e.Protocol.toLowerCase())throw o.ErrorMessage.authorityUriInsecure;if(!e.PathSegments||e.PathSegments.length<1)throw o.ErrorMessage.authorityUriInvalidPath},e.prototype.DiscoverEndpoints=function(e){return(new i.XhrClient).sendRequestAsync(e,"GET",!0).then(function(e){return{AuthorizationEndpoint:e.authorization_endpoint,EndSessionEndpoint:e.end_session_endpoint,Issuer:e.issuer}})},e.prototype.ResolveEndpointsAsync=function(){var e=this,t="";return this.GetOpenIdConfigurationEndpointAsync().then(function(n){return t=n,e.DiscoverEndpoints(t)}).then(function(t){return e.tenantDiscoveryResponse=t,e})},e}();t.Authority=s},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */Object.defineProperty(t,"__esModule",{value:!0});var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function o(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function s(e){return this instanceof s?(this.v=e,this):new s(e)}t.__extends=function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},t.__assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},t.__rest=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},t.__decorate=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},t.__param=function(e,t){return function(n,r){t(n,r,e)}},t.__metadata=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},t.__awaiter=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(s,a)}c((r=r.apply(e,t||[])).next())})},t.__generator=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},t.__exportStar=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},t.__values=o,t.__read=i,t.__spread=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e},t.__await=s,t.__asyncGenerator=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||c(e,t)})})}function c(e,t){try{(n=o[e](t)).value instanceof s?Promise.resolve(n.value.v).then(u,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function u(e){c("next",e)}function l(e){c("throw",e)}function d(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}},t.__asyncDelegator=function(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){e[r]&&(t[r]=function(t){return(n=!n)?{value:s(e[r](t)),done:"return"===r}:o?o(t):t})}},t.__asyncValues=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):o(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0);!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Info=2]="Info",e[e.Verbose=3]="Verbose"}(r=t.LogLevel||(t.LogLevel={}));var i=function(){function e(e,t){void 0===t&&(t={}),this._level=r.Info;var n=t.correlationId,o=void 0===n?"":n,i=t.level,s=void 0===i?r.Info:i,a=t.piiLoggingEnabled,c=void 0!==a&&a;this._localCallback=e,this._correlationId=o,this._level=s,this._piiLoggingEnabled=c}return e.prototype.logMessage=function(e,t,n){if(!(e>this._level||!this._piiLoggingEnabled&&n)){var i,s=(new Date).toUTCString();i=o.Utils.isEmpty(this._correlationId)?s+":"+o.Utils.getLibraryVersion()+"-"+r[e]+" "+t:s+":"+this._correlationId+"-"+o.Utils.getLibraryVersion()+"-"+r[e]+" "+t,this.executeCallback(e,i,n)}},e.prototype.executeCallback=function(e,t,n){this._localCallback&&this._localCallback(e,t,n)},e.prototype.error=function(e){this.logMessage(r.Error,e,!1)},e.prototype.errorPii=function(e){this.logMessage(r.Error,e,!0)},e.prototype.warning=function(e){this.logMessage(r.Warning,e,!1)},e.prototype.warningPii=function(e){this.logMessage(r.Warning,e,!0)},e.prototype.info=function(e){this.logMessage(r.Info,e,!1)},e.prototype.infoPii=function(e){this.logMessage(r.Info,e,!0)},e.prototype.verbose=function(e){this.logMessage(r.Verbose,e,!1)},e.prototype.verbosePii=function(e){this.logMessage(r.Verbose,e,!0)},e}();t.Logger=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return Object.defineProperty(e,"authorityUriInvalidPath",{get:function(){return"AuthorityUriInvalidPath"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"authorityUriInsecure",{get:function(){return"AuthorityUriInsecure"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"invalidAuthorityType",{get:function(){return"InvalidAuthorityType"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"unsupportedAuthorityValidation",{get:function(){return"UnsupportedAuthorityValidation"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"b2cAuthorityUriInvalidPath",{get:function(){return"B2cAuthorityUriInvalidPath"},enumerable:!0,configurable:!0}),e}();t.ErrorMessage=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(13),i=n(14),s=n(15),a=n(16),c=n(1),u=n(17),l=n(4),d=n(18),h=n(7),p=n(8),f=n(0),g=n(20),m="id_token",y="token",C="id_token token",w=function(e,t,n){var r=n.value;return n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.isInIframe()?new Promise(function(){}):r.apply(this,e)},n},_=function(){function e(e,t,n,r){void 0===r&&(r={}),this._cacheLocations={localStorage:"localStorage",sessionStorage:"sessionStorage"},this._clockSkew=300,this._tokenReceivedCallback=null,this._isAngular=!1;var o=r.validateAuthority,i=void 0===o||o,s=r.cacheLocation,a=void 0===s?"sessionStorage":s,u=r.redirectUri,h=void 0===u?function(){return window.location.href.split("?")[0].split("#")[0]}:u,p=r.postLogoutRedirectUri,f=void 0===p?function(){return window.location.href.split("?")[0].split("#")[0]}:p,g=r.logger,m=void 0===g?new l.Logger(null):g,y=r.loadFrameTimeout,C=void 0===y?6e3:y,w=r.navigateToLoginRequestUrl,_=void 0===w||w,v=r.state,b=void 0===v?"":v,I=r.isAngular,k=void 0!==I&&I,S=r.unprotectedResources,T=void 0===S?new Array:S,P=r.protectedResourceMap,U=void 0===P?new Map:P,A=r.storeAuthStateInCookie,E=void 0!==A&&A;if(this.loadFrameTimeout=C,this.clientId=e,this.validateAuthority=i,this.authority=t||"https://login.microsoftonline.com/common",this._tokenReceivedCallback=n,this._redirectUri=h,this._postLogoutredirectUri=f,this._loginInProgress=!1,this._acquireTokenInProgress=!1,this._cacheLocation=a,this._navigateToLoginRequestUrl=_,this._state=b,this._isAngular=k,this._unprotectedResources=T,this._protectedResourceMap=U,!this._cacheLocations[a])throw new Error("Cache Location is not valid. Provided value:"+this._cacheLocation+".Possible values are: "+this._cacheLocations.localStorage+", "+this._cacheLocations.sessionStorage);this._cacheStorage=new d.Storage(this._cacheLocation),this._logger=m,this.storeAuthStateInCookie=E,window.openedWindows=[],window.activeRenewals={},window.renewStates=[],window.callBackMappedToRenewStates={},window.callBacksMappedToRenewStates={},window.msal=this;var O=window.location.hash,R=this.isCallback(O);if(!this._isAngular)if(R)this.handleAuthenticationResponse.call(this,O);else{var x=this._cacheStorage.getItem(c.Constants.urlHash);x&&this.processCallBack(x)}}return Object.defineProperty(e.prototype,"cacheLocation",{get:function(){return this._cacheLocation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"authority",{get:function(){return this.authorityInstance.CanonicalAuthority},set:function(e){this.authorityInstance=g.AuthorityFactory.CreateInstance(e,this.validateAuthority)},enumerable:!0,configurable:!0}),e.prototype.processCallBack=function(e){this._logger.info("Processing the callback from redirect response");var t=this.getRequestInfo(e);this.saveTokenFromHash(t);var n,r=t.parameters[c.Constants.accessToken]||t.parameters[c.Constants.idToken],o=t.parameters[c.Constants.errorDescription],i=t.parameters[c.Constants.error];n=t.parameters[c.Constants.accessToken]?c.Constants.accessToken:c.Constants.idToken,this._cacheStorage.removeItem(c.Constants.urlHash);try{this._tokenReceivedCallback&&(this._cacheStorage.clearCookie(),this._tokenReceivedCallback.call(this,o,r,i,n,this.getUserState(this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie))))}catch(e){this._logger.error("Error occurred in token received callback function: "+e)}},e.prototype.getRedirectUri=function(){return"function"==typeof this._redirectUri?this._redirectUri():this._redirectUri},e.prototype.getPostLogoutRedirectUri=function(){return"function"==typeof this._postLogoutredirectUri?this._postLogoutredirectUri():this._postLogoutredirectUri},e.prototype.loginRedirect=function(e,t){var n=this;if(this._loginInProgress&&this._tokenReceivedCallback)this._tokenReceivedCallback(c.ErrorDescription.loginProgressError,null,c.ErrorCodes.loginProgressError,c.Constants.idToken,this.getUserState(this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie)));else{if(e){var r=this.validateInputScope(e);if(r&&!f.Utils.isEmpty(r)&&this._tokenReceivedCallback)return void this._tokenReceivedCallback(c.ErrorDescription.inputScopesError,null,c.ErrorCodes.inputScopesError,c.Constants.idToken,this.getUserState(this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie)));e=this.filterScopes(e)}var o;(o=this.extractADALIdToken())&&!e?(this._logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken "),t=f.Utils.constructUnifiedCacheExtraQueryParameter(o,t),this._silentLogin=!0,this.acquireTokenSilent([this.clientId],this.authority,this.getUser(),t).then(function(e){n._silentLogin=!1,n._logger.info("Unified cache call is successful"),n._tokenReceivedCallback&&n._tokenReceivedCallback.call(n,null,e,null,c.Constants.idToken,n.getUserState(n._silentAuthenticationState))},function(r){n._silentLogin=!1,n._logger.error("Error occurred during unified cache ATS"),n.loginRedirectHelper(e,t)})):this.loginRedirectHelper(e,t)}},e.prototype.loginRedirectHelper=function(e,t){var n=this;this._loginInProgress=!0,this.authorityInstance.ResolveEndpointsAsync().then(function(){var r=new s.AuthenticationRequestParameters(n.authorityInstance,n.clientId,e,m,n.getRedirectUri(),n._state);t&&(r.extraQueryParameters=t);var o=n._cacheStorage.getItem(c.Constants.angularLoginRequest);o&&""!==o?n._cacheStorage.setItem(c.Constants.angularLoginRequest,""):o=window.location.href,n._cacheStorage.setItem(c.Constants.loginRequest,o,n.storeAuthStateInCookie),n._cacheStorage.setItem(c.Constants.loginError,""),n._cacheStorage.setItem(c.Constants.stateLogin,r.state,n.storeAuthStateInCookie),n._cacheStorage.setItem(c.Constants.nonceIdToken,r.nonce,n.storeAuthStateInCookie),n._cacheStorage.setItem(c.Constants.msalError,""),n._cacheStorage.setItem(c.Constants.msalErrorDescription,"");var i=c.Constants.authority+c.Constants.resourceDelimeter+r.state;n._cacheStorage.setItem(i,n.authority,n.storeAuthStateInCookie);var a=r.createNavigateUrl(e)+c.Constants.response_mode_fragment;n.promptUser(a)})},e.prototype.loginPopup=function(e,t){var n=this;return new Promise(function(r,o){if(n._loginInProgress)o(c.ErrorCodes.loginProgressError+c.Constants.resourceDelimeter+c.ErrorDescription.loginProgressError);else{if(e){var i=n.validateInputScope(e);if(i&&!f.Utils.isEmpty(i))return void o(c.ErrorCodes.inputScopesError+c.Constants.resourceDelimeter+c.ErrorDescription.inputScopesError);e=n.filterScopes(e)}var s;(s=n.extractADALIdToken())&&!e?(n._logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken "),t=f.Utils.constructUnifiedCacheExtraQueryParameter(s,t),n._silentLogin=!0,n.acquireTokenSilent([n.clientId],n.authority,n.getUser(),t).then(function(e){n._silentLogin=!1,n._logger.info("Unified cache call is successful"),r(e)},function(i){n._silentLogin=!1,n._logger.error("Error occurred during unified cache ATS"),n.loginPopupHelper(r,o,e,t)})):n.loginPopupHelper(r,o,e,t)}})},e.prototype.loginPopupHelper=function(e,t,n,r){var o=this;n||(n=[this.clientId]);var i=n.join(" ").toLowerCase(),a=this.openWindow("about:blank","_blank",1,this,e,t);a&&(this._loginInProgress=!0,this.authorityInstance.ResolveEndpointsAsync().then(function(){var u=new s.AuthenticationRequestParameters(o.authorityInstance,o.clientId,n,m,o.getRedirectUri(),o._state);r&&(u.extraQueryParameters=r),o._cacheStorage.setItem(c.Constants.loginRequest,window.location.href,o.storeAuthStateInCookie),o._cacheStorage.setItem(c.Constants.loginError,""),o._cacheStorage.setItem(c.Constants.nonceIdToken,u.nonce,o.storeAuthStateInCookie),o._cacheStorage.setItem(c.Constants.msalError,""),o._cacheStorage.setItem(c.Constants.msalErrorDescription,"");var l=c.Constants.authority+c.Constants.resourceDelimeter+u.state;o._cacheStorage.setItem(l,o.authority,o.storeAuthStateInCookie);var d=u.createNavigateUrl(n)+c.Constants.response_mode_fragment;window.renewStates.push(u.state),window.requestType=c.Constants.login,o.registerCallback(u.state,i,e,t),a&&(o._logger.infoPii("Navigated Popup window to:"+d),a.location.href=d)},function(){o._logger.info(c.ErrorCodes.endpointResolutionError+":"+c.ErrorDescription.endpointResolutionError),o._cacheStorage.setItem(c.Constants.msalError,c.ErrorCodes.endpointResolutionError),o._cacheStorage.setItem(c.Constants.msalErrorDescription,c.ErrorDescription.endpointResolutionError),t&&t(c.ErrorCodes.endpointResolutionError+":"+c.ErrorDescription.endpointResolutionError),a&&a.close()}).catch(function(e){o._logger.warning("could not resolve endpoints"),t(e)}))},e.prototype.promptUser=function(e){e&&!f.Utils.isEmpty(e)?(this._logger.infoPii("Navigate to:"+e),window.location.replace(e)):this._logger.info("Navigate url is empty")},e.prototype.openWindow=function(e,t,n,r,o,i){var s=this,a=this.openPopup(e,t,c.Constants.popUpWidth,c.Constants.popUpHeight);if(null==a)return r._loginInProgress=!1,r._acquireTokenInProgress=!1,this._logger.info(c.ErrorCodes.popUpWindowError+":"+c.ErrorDescription.popUpWindowError),this._cacheStorage.setItem(c.Constants.msalError,c.ErrorCodes.popUpWindowError),this._cacheStorage.setItem(c.Constants.msalErrorDescription,c.ErrorDescription.popUpWindowError),i&&i(c.ErrorCodes.popUpWindowError+c.Constants.resourceDelimeter+c.ErrorDescription.popUpWindowError),null;window.openedWindows.push(a);var u=window.setInterval(function(){if(a&&a.closed&&r._loginInProgress){if(i&&i(c.ErrorCodes.userCancelledError+c.Constants.resourceDelimeter+c.ErrorDescription.userCancelledError),window.clearInterval(u),s._isAngular)return void s.broadcast("msal:popUpClosed",c.ErrorCodes.userCancelledError+c.Constants.resourceDelimeter+c.ErrorDescription.userCancelledError);r._loginInProgress=!1,r._acquireTokenInProgress=!1}try{var e=a.location;if(-1!==e.href.indexOf(s.getRedirectUri())&&(window.clearInterval(u),r._loginInProgress=!1,r._acquireTokenInProgress=!1,s._logger.info("Closing popup window"),s._isAngular)){s.broadcast("msal:popUpHashChanged",e.hash);for(var t=0;t<window.openedWindows.length;t++)window.openedWindows[t].close()}}catch(e){}},n);return a},e.prototype.broadcast=function(e,t){var n=new CustomEvent(e,{detail:t});window.dispatchEvent(n)},e.prototype.logout=function(){this.clearCache(),this._user=null;var e="";this.getPostLogoutRedirectUri()&&(e="post_logout_redirect_uri="+encodeURIComponent(this.getPostLogoutRedirectUri()));var t=this.authority+"/oauth2/v2.0/logout?"+e;this.promptUser(t)},e.prototype.clearCache=function(){window.renewStates=[];for(var e=this._cacheStorage.getAllAccessTokens(c.Constants.clientId,c.Constants.userIdentifier),t=0;t<e.length;t++)this._cacheStorage.removeItem(JSON.stringify(e[t].key));this._cacheStorage.resetCacheItems(),this._cacheStorage.clearCookie()},e.prototype.clearCacheForScope=function(e){for(var t=this._cacheStorage.getAllAccessTokens(c.Constants.clientId,c.Constants.userIdentifier),n=0;n<t.length;n++){var r=t[n];r.value.accessToken===e&&this._cacheStorage.removeItem(JSON.stringify(r.key))}},e.prototype.openPopup=function(e,t,n,r){try{var o=window.screenLeft?window.screenLeft:window.screenX,i=window.screenTop?window.screenTop:window.screenY,s=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,c=s/2-n/2+o,u=a/2-r/2+i,l=window.open(e,t,"width="+n+", height="+r+", top="+u+", left="+c);return l.focus&&l.focus(),l}catch(e){return this._logger.error("error opening popup "+e.message),this._loginInProgress=!1,this._acquireTokenInProgress=!1,null}},e.prototype.validateInputScope=function(e){if(!e||e.length<1)return"Scopes cannot be passed as an empty array";if(!Array.isArray(e))throw new Error("API does not accept non-array scopes");return e.indexOf(this.clientId)>-1&&e.length>1?"ClientId can only be provided as a single scope":""},e.prototype.filterScopes=function(e){return e=(e=e.filter(function(e){return"openid"!==e})).filter(function(e){return"profile"!==e})},e.prototype.registerCallback=function(e,t,n,r){var o=this;window.activeRenewals[t]=e,window.callBacksMappedToRenewStates[e]||(window.callBacksMappedToRenewStates[e]=[]),window.callBacksMappedToRenewStates[e].push({resolve:n,reject:r}),window.callBackMappedToRenewStates[e]||(window.callBackMappedToRenewStates[e]=function(n,r,i,s){window.activeRenewals[t]=null;for(var a=0;a<window.callBacksMappedToRenewStates[e].length;++a)try{n||i?window.callBacksMappedToRenewStates[e][a].reject(n+c.Constants.resourceDelimeter+i):r&&window.callBacksMappedToRenewStates[e][a].resolve(r)}catch(e){o._logger.warning(e)}window.callBacksMappedToRenewStates[e]=null,window.callBackMappedToRenewStates[e]=null})},e.prototype.getCachedTokenInternal=function(e,t){var n,r=t||this.getUser();if(!r)return null;var o=this.authorityInstance?this.authorityInstance:g.AuthorityFactory.CreateInstance(this.authority,this.validateAuthority);return n=f.Utils.compareObjects(r,this.getUser())?e.indexOf(this.clientId)>-1?new s.AuthenticationRequestParameters(o,this.clientId,e,m,this.getRedirectUri(),this._state):new s.AuthenticationRequestParameters(o,this.clientId,e,y,this.getRedirectUri(),this._state):new s.AuthenticationRequestParameters(o,this.clientId,e,C,this.getRedirectUri(),this._state),this.getCachedToken(n,t)},e.prototype.getCachedToken=function(e,t){var n=null,r=e.scopes,o=this._cacheStorage.getAllAccessTokens(this.clientId,t?t.userIdentifier:null);if(0===o.length)return null;var i=[];if(e.authority){for(s=0;s<o.length;s++){c=(a=o[s]).key.scopes.split(" ");f.Utils.containsScope(c,r)&&a.key.authority===e.authority&&i.push(a)}if(0===i.length)return null;if(1!==i.length)return{errorDesc:"The cache contains multiple tokens satisfying the requirements.Call AcquireToken again providing more requirements like authority",token:null,error:"multiple_matching_tokens_detected"};n=i[0]}else{for(var s=0;s<o.length;s++){var a,c=(a=o[s]).key.scopes.split(" ");f.Utils.containsScope(c,r)&&i.push(a)}if(1===i.length)n=i[0],e.authorityInstance=g.AuthorityFactory.CreateInstance(n.key.authority,this.validateAuthority);else{if(i.length>1)return{errorDesc:"The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements like authority",token:null,error:"multiple_matching_tokens_detected"};var u=this.getUniqueAuthority(o,"authority");if(u.length>1)return{errorDesc:"Multiple authorities found in the cache. Pass authority in the API overload.",token:null,error:"multiple_matching_tokens_detected"};e.authorityInstance=g.AuthorityFactory.CreateInstance(u[0],this.validateAuthority)}}if(null!=n){var l=Number(n.value.expiresIn),d=this._clockSkew||300;return l&&l>f.Utils.now()+d?{errorDesc:null,token:n.value.accessToken,error:null}:(this._cacheStorage.removeItem(JSON.stringify(i[0].key)),null)}return null},e.prototype.getAllUsers=function(){for(var e=[],t=this._cacheStorage.getAllAccessTokens(c.Constants.clientId,c.Constants.userIdentifier),n=0;n<t.length;n++){var r=new u.IdToken(t[n].value.idToken),o=new a.ClientInfo(t[n].value.clientInfo),i=p.User.createUser(r,o);e.push(i)}return this.getUniqueUsers(e)},e.prototype.getUniqueUsers=function(e){if(!e||e.length<=1)return e;for(var t=[],n=[],r=0;r<e.length;++r)e[r].userIdentifier&&-1===t.indexOf(e[r].userIdentifier)&&(t.push(e[r].userIdentifier),n.push(e[r]));return n},e.prototype.getUniqueAuthority=function(e,t){var n=[],r=[];return e.forEach(function(e){e.key.hasOwnProperty(t)&&-1===r.indexOf(e.key[t])&&(r.push(e.key[t]),n.push(e.key[t]))}),n},e.prototype.addHintParameters=function(e,t){var n=t||this.getUser();if(n){var r=n.userIdentifier.split("."),o=f.Utils.base64DecodeStringUrlSafe(r[0]),i=f.Utils.base64DecodeStringUrlSafe(r[1]);n.sid&&-1!==e.indexOf(c.Constants.prompt_none)?this.urlContainsQueryStringParameter(c.Constants.sid,e)||this.urlContainsQueryStringParameter(c.Constants.login_hint,e)||(e+="&"+c.Constants.sid+"="+encodeURIComponent(n.sid)):this.urlContainsQueryStringParameter(c.Constants.login_hint,e)||!n.displayableId||f.Utils.isEmpty(n.displayableId)||(e+="&"+c.Constants.login_hint+"="+encodeURIComponent(n.displayableId)),f.Utils.isEmpty(o)||f.Utils.isEmpty(i)||(this.urlContainsQueryStringParameter("domain_req",e)||f.Utils.isEmpty(i)||(e+="&domain_req="+encodeURIComponent(i)),this.urlContainsQueryStringParameter("login_req",e)||f.Utils.isEmpty(o)||(e+="&login_req="+encodeURIComponent(o))),this.urlContainsQueryStringParameter(c.Constants.domain_hint,e)||f.Utils.isEmpty(i)||(i===c.Constants.consumersUtid?e+="&"+c.Constants.domain_hint+"="+encodeURIComponent(c.Constants.consumers):e+="&"+c.Constants.domain_hint+"="+encodeURIComponent(c.Constants.organizations))}return e},e.prototype.urlContainsQueryStringParameter=function(e,t){return new RegExp("[\\?&]"+e+"=").test(t)},e.prototype.acquireTokenRedirect=function(e,t,n,r){var o=this,i=this.validateInputScope(e);if(i&&!f.Utils.isEmpty(i)&&this._tokenReceivedCallback)this._tokenReceivedCallback(c.ErrorDescription.inputScopesError,null,c.ErrorCodes.inputScopesError,c.Constants.accessToken,this.getUserState(this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie)));else{e&&(e=this.filterScopes(e));var a=n||this.getUser();if(!this._acquireTokenInProgress){var u;e.join(" ").toLowerCase();if(!(a||r&&-1!==r.indexOf(c.Constants.login_hint))&&this._tokenReceivedCallback)return this._logger.info("User login is required"),void this._tokenReceivedCallback(c.ErrorDescription.userLoginError,null,c.ErrorCodes.userLoginError,c.Constants.accessToken,this.getUserState(this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie)));this._acquireTokenInProgress=!0;var l=t?g.AuthorityFactory.CreateInstance(t,this.validateAuthority):this.authorityInstance;l.ResolveEndpointsAsync().then(function(){var t;u=f.Utils.compareObjects(a,o.getUser())?e.indexOf(o.clientId)>-1?new s.AuthenticationRequestParameters(l,o.clientId,e,m,o.getRedirectUri(),o._state):new s.AuthenticationRequestParameters(l,o.clientId,e,y,o.getRedirectUri(),o._state):new s.AuthenticationRequestParameters(l,o.clientId,e,C,o.getRedirectUri(),o._state),o._cacheStorage.setItem(c.Constants.nonceIdToken,u.nonce,o.storeAuthStateInCookie),t=a?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+a.userIdentifier+c.Constants.resourceDelimeter+u.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_user+c.Constants.resourceDelimeter+u.state,o._cacheStorage.setItem(t,JSON.stringify(a));var n=c.Constants.authority+c.Constants.resourceDelimeter+u.state;o._cacheStorage.setItem(n,l.CanonicalAuthority,o.storeAuthStateInCookie),r&&(u.extraQueryParameters=r);var i=u.createNavigateUrl(e)+c.Constants.response_mode_fragment;(i=o.addHintParameters(i,a))&&(o._cacheStorage.setItem(c.Constants.stateAcquireToken,u.state,o.storeAuthStateInCookie),window.location.replace(i))})}}},e.prototype.acquireTokenPopup=function(e,t,n,r){var o=this;return new Promise(function(i,a){var u=o.validateInputScope(e);u&&!f.Utils.isEmpty(u)&&a(c.ErrorCodes.inputScopesError+c.Constants.resourceDelimeter+u),e&&(e=o.filterScopes(e));var l=n||o.getUser();if(o._acquireTokenInProgress)a(c.ErrorCodes.acquireTokenProgressError+c.Constants.resourceDelimeter+c.ErrorDescription.acquireTokenProgressError);else{var d,h=e.join(" ").toLowerCase();if(!(l||r&&-1!==r.indexOf(c.Constants.login_hint)))return o._logger.info("User login is required"),void a(c.ErrorCodes.userLoginError+c.Constants.resourceDelimeter+c.ErrorDescription.userLoginError);o._acquireTokenInProgress=!0;var p=t?g.AuthorityFactory.CreateInstance(t,o.validateAuthority):o.authorityInstance,w=o.openWindow("about:blank","_blank",1,o,i,a);w&&p.ResolveEndpointsAsync().then(function(){var t;d=f.Utils.compareObjects(l,o.getUser())?e.indexOf(o.clientId)>-1?new s.AuthenticationRequestParameters(p,o.clientId,e,m,o.getRedirectUri(),o._state):new s.AuthenticationRequestParameters(p,o.clientId,e,y,o.getRedirectUri(),o._state):new s.AuthenticationRequestParameters(p,o.clientId,e,C,o.getRedirectUri(),o._state),o._cacheStorage.setItem(c.Constants.nonceIdToken,d.nonce),d.state=d.state,t=l?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+l.userIdentifier+c.Constants.resourceDelimeter+d.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_user+c.Constants.resourceDelimeter+d.state,o._cacheStorage.setItem(t,JSON.stringify(l));var n=c.Constants.authority+c.Constants.resourceDelimeter+d.state;o._cacheStorage.setItem(n,p.CanonicalAuthority,o.storeAuthStateInCookie),r&&(d.extraQueryParameters=r);var u=d.createNavigateUrl(e)+c.Constants.response_mode_fragment;u=o.addHintParameters(u,l),window.renewStates.push(d.state),window.requestType=c.Constants.renewToken,o.registerCallback(d.state,h,i,a),w&&(w.location.href=u)},function(){o._logger.info(c.ErrorCodes.endpointResolutionError+":"+c.ErrorDescription.endpointResolutionError),o._cacheStorage.setItem(c.Constants.msalError,c.ErrorCodes.endpointResolutionError),o._cacheStorage.setItem(c.Constants.msalErrorDescription,c.ErrorDescription.endpointResolutionError),a&&a(c.ErrorCodes.endpointResolutionError+c.Constants.resourceDelimeter+c.ErrorDescription.endpointResolutionError),w&&w.close()}).catch(function(e){o._logger.warning("could not resolve endpoints"),a(e)})}})},e.prototype.acquireTokenSilent=function(e,t,n,r){var o=this;return new Promise(function(i,a){var u=o.validateInputScope(e);if(u&&!f.Utils.isEmpty(u))return a(c.ErrorCodes.inputScopesError+"|"+u),null;e&&(e=o.filterScopes(e));var l,d=e.join(" ").toLowerCase(),h=n||o.getUser(),p=o._cacheStorage.getItem(c.Constants.adalIdToken);if(!h&&f.Utils.checkSSO(r)&&f.Utils.isEmpty(p))return o._logger.info("User login is required"),a(c.ErrorCodes.userLoginError+c.Constants.resourceDelimeter+c.ErrorDescription.userLoginError),null;if(!h&&!f.Utils.isEmpty(p)){var w=f.Utils.extractIdToken(p);console.log("ADAL's idToken exists. Extracting login information from ADAL's idToken "),r=f.Utils.constructUnifiedCacheExtraQueryParameter(w,r)}l=f.Utils.compareObjects(h,o.getUser())?e.indexOf(o.clientId)>-1?new s.AuthenticationRequestParameters(g.AuthorityFactory.CreateInstance(t,o.validateAuthority),o.clientId,e,m,o.getRedirectUri(),o._state):new s.AuthenticationRequestParameters(g.AuthorityFactory.CreateInstance(t,o.validateAuthority),o.clientId,e,y,o.getRedirectUri(),o._state):e.indexOf(o.clientId)>-1?new s.AuthenticationRequestParameters(g.AuthorityFactory.CreateInstance(t,o.validateAuthority),o.clientId,e,m,o.getRedirectUri(),o._state):new s.AuthenticationRequestParameters(g.AuthorityFactory.CreateInstance(t,o.validateAuthority),o.clientId,e,C,o.getRedirectUri(),o._state);var _=o.getCachedToken(l,h);if(_){if(_.token)return o._logger.info("Token is already in cache for scope:"+d),i(_.token),null;if(_.errorDesc||_.error)return o._logger.infoPii(_.errorDesc+":"+_.error),a(_.errorDesc+c.Constants.resourceDelimeter+_.error),null}else o._logger.verbose("Token is not in cache for scope:"+d);return l.authorityInstance||(l.authorityInstance=t?g.AuthorityFactory.CreateInstance(t,o.validateAuthority):o.authorityInstance),l.authorityInstance.ResolveEndpointsAsync().then(function(){window.activeRenewals[d]?(o._logger.verbose("Renew token for scope: "+d+" is in progress. Registering callback"),o.registerCallback(window.activeRenewals[d],d,i,a)):e&&e.indexOf(o.clientId)>-1&&1===e.length?(o._logger.verbose("renewing idToken"),o.renewIdToken(e,i,a,h,l,r)):(o._logger.verbose("renewing accesstoken"),o.renewToken(e,i,a,h,l,r))}).catch(function(e){return o._logger.warning("could not resolve endpoints"),a(e),null})})},e.prototype.extractADALIdToken=function(){var e=this._cacheStorage.getItem(c.Constants.adalIdToken);return f.Utils.isEmpty(e)?null:f.Utils.extractIdToken(e)},e.prototype.loadIframeTimeout=function(e,t,n){var r=this,o=window.activeRenewals[n];this._logger.verbose("Set loading state to pending for: "+n+":"+o),this._cacheStorage.setItem(c.Constants.renewStatus+o,c.Constants.tokenRenewStatusInProgress),this.loadFrame(e,t),setTimeout(function(){r._cacheStorage.getItem(c.Constants.renewStatus+o)===c.Constants.tokenRenewStatusInProgress&&(r._logger.verbose("Loading frame has timed out after: "+r.loadFrameTimeout/1e3+" seconds for scope "+n+":"+o),o&&window.callBackMappedToRenewStates[o]&&window.callBackMappedToRenewStates[o]("Token renewal operation failed due to timeout",null,"Token Renewal Failed",c.Constants.accessToken),r._cacheStorage.setItem(c.Constants.renewStatus+o,c.Constants.tokenRenewStatusCancelled))},this.loadFrameTimeout)},e.prototype.loadFrame=function(e,t){var n=this;this._logger.info("LoadFrame: "+t);var r=t;setTimeout(function(){var o=n.addAdalFrame(r);""!==o.src&&"about:blank"!==o.src||(o.src=e,n._logger.infoPii("Frame Name : "+t+" Navigated to: "+e))},500)},e.prototype.addAdalFrame=function(e){if(void 0===e)return null;this._logger.info("Add msal frame to document:"+e);var t=document.getElementById(e);if(!t){if(document.createElement&&document.documentElement&&-1===window.navigator.userAgent.indexOf("MSIE 5.0")){var n=document.createElement("iframe");n.setAttribute("id",e),n.style.visibility="hidden",n.style.position="absolute",n.style.width=n.style.height="0",n.style.border="0",t=document.getElementsByTagName("body")[0].appendChild(n)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML("beforeend","<iframe name='"+e+"' id='"+e+"' style='display:none'></iframe>");window.frames&&window.frames[e]&&(t=window.frames[e])}return t},e.prototype.renewToken=function(e,t,n,r,o,i){var s=e.join(" ").toLowerCase();this._logger.verbose("renewToken is called for scope:"+s);var a,u=this.addAdalFrame("msalRenewFrame"+s);i&&(o.extraQueryParameters=i),a=r?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+r.userIdentifier+c.Constants.resourceDelimeter+o.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_user+c.Constants.resourceDelimeter+o.state,this._cacheStorage.setItem(a,JSON.stringify(r));var l=c.Constants.authority+c.Constants.resourceDelimeter+o.state;this._cacheStorage.setItem(l,o.authority),this._cacheStorage.setItem(c.Constants.nonceIdToken,o.nonce),this._logger.verbose("Renew token Expected state: "+o.state);var d=f.Utils.urlRemoveQueryStringParameter(o.createNavigateUrl(e),c.Constants.prompt)+c.Constants.prompt_none;d=this.addHintParameters(d,r),window.renewStates.push(o.state),window.requestType=c.Constants.renewToken,this.registerCallback(o.state,s,t,n),this._logger.infoPii("Navigate to:"+d),u.src="about:blank",this.loadIframeTimeout(d,"msalRenewFrame"+s,s)},e.prototype.renewIdToken=function(e,t,n,r,o,i){e.join(" ").toLowerCase();this._logger.info("renewidToken is called");var s,a=this.addAdalFrame("msalIdTokenFrame");i&&(o.extraQueryParameters=i),s=r?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+r.userIdentifier+c.Constants.resourceDelimeter+o.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_user+c.Constants.resourceDelimeter+o.state,this._cacheStorage.setItem(s,JSON.stringify(r));var u=c.Constants.authority+c.Constants.resourceDelimeter+o.state;this._cacheStorage.setItem(u,o.authority),this._cacheStorage.setItem(c.Constants.nonceIdToken,o.nonce),this._logger.verbose("Renew Idtoken Expected state: "+o.state);var l=f.Utils.urlRemoveQueryStringParameter(o.createNavigateUrl(e),c.Constants.prompt)+c.Constants.prompt_none;l=this.addHintParameters(l,r),this._silentLogin?(window.requestType=c.Constants.login,this._silentAuthenticationState=o.state):(window.requestType=c.Constants.renewToken,window.renewStates.push(o.state)),this.registerCallback(o.state,this.clientId,t,n),this._logger.infoPii("Navigate to:"+l),a.src="about:blank",this.loadIframeTimeout(l,"msalIdTokenFrame",this.clientId)},e.prototype.getUser=function(){if(this._user)return this._user;var e=this._cacheStorage.getItem(c.Constants.idTokenKey),t=this._cacheStorage.getItem(c.Constants.msalClientInfo);if(!f.Utils.isEmpty(e)&&!f.Utils.isEmpty(t)){var n=new u.IdToken(e),r=new a.ClientInfo(t);return this._user=p.User.createUser(n,r),this._user}return null},e.prototype.handleAuthenticationResponse=function(e){null==e&&(e=window.location.hash);var t=null,n=!1,r=!1;try{r=window.opener&&window.opener.msal&&window.opener.msal!==window.msal}catch(e){r=!1}r?(t=window.opener.msal,n=!0):window.parent&&window.parent.msal&&(t=window.parent.msal);var o,i=t.getRequestInfo(e),s=null,a=null;if(t._logger.info("Returned from redirect url"),window.parent!==window&&window.parent.msal)a=window.parent.callBackMappedToRenewStates[i.stateResponse];else if(r)a=window.opener.callBackMappedToRenewStates[i.stateResponse];else{if(t._navigateToLoginRequestUrl)return a=null,t._cacheStorage.setItem(c.Constants.urlHash,e),!1,void(window.parent!==window||n||(window.location.href=t._cacheStorage.getItem(c.Constants.loginRequest,this.storeAuthStateInCookie)));a=t._tokenReceivedCallback,window.location.hash=""}t.saveTokenFromHash(i),i.requestType===c.Constants.renewToken&&window.parent?(window.parent!==window?t._logger.verbose("Window is in iframe, acquiring token silently"):t._logger.verbose("acquiring token interactive in progress"),s=i.parameters[c.Constants.accessToken]||i.parameters[c.Constants.idToken],o=c.Constants.accessToken):i.requestType===c.Constants.login&&(s=i.parameters[c.Constants.idToken],o=c.Constants.idToken);var u=i.parameters[c.Constants.errorDescription],l=i.parameters[c.Constants.error];try{a&&(i.stateMatch?a.call(t,u,s,l,o,this.getUserState(i.stateResponse)):a.call(t,u,s,l,o,null))}catch(e){t._logger.error("Error occurred in token received callback function: "+e)}if(r)for(var d=0;d<window.opener.openedWindows.length;d++)window.opener.openedWindows[d].close()},e.prototype.saveAccessToken=function(e,t,n,r,s){var u,l=new a.ClientInfo(r);if(t.parameters.hasOwnProperty("scope")){for(var d=(u=t.parameters.scope).split(" "),h=this._cacheStorage.getAllAccessTokens(this.clientId,e),p=0;p<h.length;p++){var g=h[p];if(g.key.userIdentifier===n.userIdentifier){var m=g.key.scopes.split(" ");f.Utils.isIntersectingScopes(m,d)&&this._cacheStorage.removeItem(JSON.stringify(g.key))}}var y=new o.AccessTokenKey(e,this.clientId,u,l.uid,l.utid),C=new i.AccessTokenValue(t.parameters[c.Constants.accessToken],s.rawIdToken,f.Utils.expiresIn(t.parameters[c.Constants.expiresIn]).toString(),r);this._cacheStorage.setItem(JSON.stringify(y),JSON.stringify(C))}else{u=this.clientId;y=new o.AccessTokenKey(e,this.clientId,u,l.uid,l.utid),C=new i.AccessTokenValue(t.parameters[c.Constants.idToken],t.parameters[c.Constants.idToken],s.expiration,r);this._cacheStorage.setItem(JSON.stringify(y),JSON.stringify(C))}},e.prototype.saveTokenFromHash=function(e){this._logger.info("State status:"+e.stateMatch+"; Request type:"+e.requestType),this._cacheStorage.setItem(c.Constants.msalError,""),this._cacheStorage.setItem(c.Constants.msalErrorDescription,"");var t="",n="";if(e.parameters.hasOwnProperty("scope")?e.parameters.scope.toLowerCase():this.clientId,e.parameters.hasOwnProperty(c.Constants.errorDescription)||e.parameters.hasOwnProperty(c.Constants.error)){if(this._logger.infoPii("Error :"+e.parameters[c.Constants.error]+"; Error description:"+e.parameters[c.Constants.errorDescription]),this._cacheStorage.setItem(c.Constants.msalError,e.parameters.error),this._cacheStorage.setItem(c.Constants.msalErrorDescription,e.parameters[c.Constants.errorDescription]),e.requestType===c.Constants.login&&(this._loginInProgress=!1,this._cacheStorage.setItem(c.Constants.loginError,e.parameters[c.Constants.errorDescription]+":"+e.parameters[c.Constants.error]),t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse),e.requestType===c.Constants.renewToken){this._acquireTokenInProgress=!1,t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse;var r=null!==this.getUser()?this.getUser().userIdentifier:"";n=c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+r+c.Constants.resourceDelimeter+e.stateResponse}}else if(e.stateMatch){var o;this._logger.info("State is right"),e.parameters.hasOwnProperty(c.Constants.sessionState)&&this._cacheStorage.setItem(c.Constants.msalSessionState,e.parameters[c.Constants.sessionState]);var i="";if(e.parameters.hasOwnProperty(c.Constants.accessToken)){this._logger.info("Fragment has access token"),this._acquireTokenInProgress=!1;var s=void 0;o=e.parameters.hasOwnProperty(c.Constants.idToken)?new u.IdToken(e.parameters[c.Constants.idToken]):new u.IdToken(this._cacheStorage.getItem(c.Constants.idTokenKey)),t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse;var l=this._cacheStorage.getItem(t,this.storeAuthStateInCookie);f.Utils.isEmpty(l)||(l=f.Utils.replaceFirstPath(l,o.tenantId)),e.parameters.hasOwnProperty(c.Constants.clientInfo)?(i=e.parameters[c.Constants.clientInfo],s=p.User.createUser(o,new a.ClientInfo(i))):(this._logger.warning("ClientInfo not received in the response from AAD"),s=p.User.createUser(o,new a.ClientInfo(i))),n=c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+s.userIdentifier+c.Constants.resourceDelimeter+e.stateResponse;var d=c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_user+c.Constants.resourceDelimeter+e.stateResponse,h=this._cacheStorage.getItem(n),g=void 0;f.Utils.isEmpty(h)?f.Utils.isEmpty(this._cacheStorage.getItem(d))||this.saveAccessToken(l,e,s,i,o):(g=JSON.parse(h),s&&g&&f.Utils.compareObjects(s,g)?(this.saveAccessToken(l,e,s,i,o),this._logger.info("The user object received in the response is the same as the one passed in the acquireToken request")):this._logger.warning("The user object created from the response is not the same as the one passed in the acquireToken request"))}if(e.parameters.hasOwnProperty(c.Constants.idToken)){this._logger.info("Fragment has id token"),this._loginInProgress=!1,o=new u.IdToken(e.parameters[c.Constants.idToken]),e.parameters.hasOwnProperty(c.Constants.clientInfo)?i=e.parameters[c.Constants.clientInfo]:this._logger.warning("ClientInfo not received in the response from AAD"),t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse;l=this._cacheStorage.getItem(t,this.storeAuthStateInCookie);f.Utils.isEmpty(l)||(l=f.Utils.replaceFirstPath(l,o.tenantId)),this._user=p.User.createUser(o,new a.ClientInfo(i)),o&&o.nonce?o.nonce!==this._cacheStorage.getItem(c.Constants.nonceIdToken,this.storeAuthStateInCookie)?(this._user=null,this._cacheStorage.setItem(c.Constants.loginError,"Nonce Mismatch. Expected Nonce: "+this._cacheStorage.getItem(c.Constants.nonceIdToken,this.storeAuthStateInCookie)+",Actual Nonce: "+o.nonce),this._logger.error("Nonce Mismatch.Expected Nonce: "+this._cacheStorage.getItem(c.Constants.nonceIdToken,this.storeAuthStateInCookie)+",Actual Nonce: "+o.nonce)):(this._cacheStorage.setItem(c.Constants.idTokenKey,e.parameters[c.Constants.idToken]),this._cacheStorage.setItem(c.Constants.msalClientInfo,i),this.saveAccessToken(l,e,this._user,i,o)):(t=e.stateResponse,n=e.stateResponse,this._logger.error("Invalid id_token received in the response"),e.parameters.error="invalid idToken",e.parameters.error_description="Invalid idToken. idToken: "+e.parameters[c.Constants.idToken],this._cacheStorage.setItem(c.Constants.msalError,"invalid idToken"),this._cacheStorage.setItem(c.Constants.msalErrorDescription,"Invalid idToken. idToken: "+e.parameters[c.Constants.idToken]))}}else t=e.stateResponse,n=e.stateResponse,this._logger.error("State Mismatch.Expected State: "+this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie)+",Actual State: "+e.stateResponse),e.parameters.error="Invalid_state",e.parameters.error_description="Invalid_state. state: "+e.stateResponse,this._cacheStorage.setItem(c.Constants.msalError,"Invalid_state"),this._cacheStorage.setItem(c.Constants.msalErrorDescription,"Invalid_state. state: "+e.stateResponse);this._cacheStorage.setItem(c.Constants.renewStatus+e.stateResponse,c.Constants.tokenRenewStatusCompleted),this._cacheStorage.removeAcquireTokenEntries(t,n),this.storeAuthStateInCookie&&(this._cacheStorage.setItemCookie(t,"",-1),this._cacheStorage.clearCookie())},e.prototype.isCallback=function(e){e=this.getHash(e);var t=f.Utils.deserialize(e);return t.hasOwnProperty(c.Constants.errorDescription)||t.hasOwnProperty(c.Constants.error)||t.hasOwnProperty(c.Constants.accessToken)||t.hasOwnProperty(c.Constants.idToken)},e.prototype.getHash=function(e){return e.indexOf("#/")>-1?e=e.substring(e.indexOf("#/")+2):e.indexOf("#")>-1&&(e=e.substring(1)),e},e.prototype.getRequestInfo=function(e){e=this.getHash(e);var t=f.Utils.deserialize(e),n=new h.TokenResponse;if(t&&(n.parameters=t,t.hasOwnProperty(c.Constants.errorDescription)||t.hasOwnProperty(c.Constants.error)||t.hasOwnProperty(c.Constants.accessToken)||t.hasOwnProperty(c.Constants.idToken))){n.valid=!0;var r=void 0;if(!t.hasOwnProperty("state"))return n;if(r=t.state,n.stateResponse=r,r===this._cacheStorage.getItem(c.Constants.stateLogin,this.storeAuthStateInCookie)||r===this._silentAuthenticationState)return n.requestType=c.Constants.login,n.stateMatch=!0,n;if(r===this._cacheStorage.getItem(c.Constants.stateAcquireToken,this.storeAuthStateInCookie))return n.requestType=c.Constants.renewToken,n.stateMatch=!0,n;if(!n.stateMatch){n.requestType=window.requestType;for(var o=window.renewStates,i=0;i<o.length;i++)if(o[i]===n.stateResponse){n.stateMatch=!0;break}}}return n},e.prototype.getScopeFromState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return""},e.prototype.getUserState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return""},e.prototype.isInIframe=function(){return window.parent!==window},e.prototype.loginInProgress=function(){return!!this._cacheStorage.getItem(c.Constants.urlHash)||this._loginInProgress},e.prototype.getHostFromUri=function(e){var t=String(e).replace(/^(https?:)\/\//,"");return t=t.split("/")[0]},e.prototype.getScopesForEndpoint=function(e){if(this._unprotectedResources.length>0)for(var t=0;t<this._unprotectedResources.length;t++)if(e.indexOf(this._unprotectedResources[t])>-1)return null;if(this._protectedResourceMap.size>0)for(var n=0,r=Array.from(this._protectedResourceMap.keys());n<r.length;n++){var o=r[n];if(e.indexOf(o)>-1)return this._protectedResourceMap.get(o)}return e.indexOf("http://")>-1||e.indexOf("https://")>-1?this.getHostFromUri(e)===this.getHostFromUri(this.getRedirectUri())?new Array(this.clientId):null:new Array(this.clientId)},e.prototype.setloginInProgress=function(e){this._loginInProgress=e},e.prototype.getAcquireTokenInProgress=function(){return this._acquireTokenInProgress},e.prototype.setAcquireTokenInProgress=function(e){this._acquireTokenInProgress=e},e.prototype.getLogger=function(){return this._logger},r.__decorate([w],e.prototype,"acquireTokenSilent",null),e}();t.UserAgentApplication=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(){this.valid=!1,this.parameters={},this.stateMatch=!1,this.stateResponse="",this.requestType="unknown"}}();t.TokenResponse=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e,t,n,r,o,i){this.displayableId=e,this.name=t,this.identityProvider=n,this.userIdentifier=r,this.idToken=o,this.sid=i}return e.createUser=function(t,n){var o,i;n?(o=n.uid,i=n.utid):(o="",i="");var s=r.Utils.base64EncodeStringUrlSafe(o)+"."+r.Utils.base64EncodeStringUrlSafe(i);return new e(t.preferredName,t.name,t.issuer,s,t.decodedIdToken,t.sid)},e}();t.User=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(2),i=n(10),s=function(e){function t(t,n){return e.call(this,t,n)||this}return r.__extends(t,e),Object.defineProperty(t.prototype,"AadInstanceDiscoveryEndpointUrl",{get:function(){return t.AadInstanceDiscoveryEndpoint+"?api-version=1.0&authorization_endpoint="+this.CanonicalAuthority+"oauth2/v2.0/authorize"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"AuthorityType",{get:function(){return o.AuthorityType.Aad},enumerable:!0,configurable:!0}),t.prototype.GetOpenIdConfigurationEndpointAsync=function(){var e=this,t=new Promise(function(t,n){return t(e.DefaultOpenIdConfigurationEndpoint)});if(!this.IsValidationEnabled)return t;var n=this.CanonicalAuthorityUrlComponents.HostNameAndPort;return this.IsInTrustedHostList(n)?t:(new i.XhrClient).sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl,"GET",!0).then(function(e){return e.tenant_discovery_endpoint})},t.prototype.IsInTrustedHostList=function(e){return t.TrustedHostList[e.toLowerCase()]},t.AadInstanceDiscoveryEndpoint="https://login.microsoftonline.com/common/discovery/instance",t.TrustedHostList={"login.windows.net":"login.windows.net","login.chinacloudapi.cn":"login.chinacloudapi.cn","login.cloudgovapi.us":"login.cloudgovapi.us","login.microsoftonline.com":"login.microsoftonline.com","login.microsoftonline.de":"login.microsoftonline.de","login.microsoftonline.us":"login.microsoftonline.us"},t}(o.Authority);t.AadAuthority=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.sendRequestAsync=function(e,t,n){var r=this;return new Promise(function(n,o){var i=new XMLHttpRequest;if(i.open(t,e,!0),i.onload=function(e){(i.status<200||i.status>=300)&&o(r.handleError(i.responseText));try{var t=JSON.parse(i.responseText)}catch(e){o(r.handleError(i.responseText))}n(t)},i.onerror=function(e){o(i.status)},"GET"!==t)throw"not implemented";i.send()})},e.prototype.handleError=function(e){var t;try{if((t=JSON.parse(e)).error)return t.error;throw e}catch(t){return e}},e}();t.XhrClient=r},function(e,t,n){e.exports=n(12)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6);t.UserAgentApplication=r.UserAgentApplication;var o=n(4);t.Logger=o.Logger;var i=n(4);t.LogLevel=i.LogLevel;var s=n(8);t.User=s.User;var a=n(1);t.Constants=a.Constants;var c=n(7);t.TokenResponse=c.TokenResponse;var u=n(2);t.Authority=u.Authority;var l=n(6);t.CacheResult=l.CacheResult},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){return function(e,t,n,o,i){this.authority=e,this.clientId=t,this.scopes=n,this.userIdentifier=r.Utils.base64EncodeStringUrlSafe(o)+"."+r.Utils.base64EncodeStringUrlSafe(i)}}();t.AccessTokenKey=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t,n,r){this.accessToken=e,this.idToken=t,this.expiresIn=n,this.clientInfo=r}}();t.AccessTokenValue=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e,t,n,o,i,s){this.authorityInstance=e,this.clientId=t,this.scopes=n,this.responseType=o,this.redirectUri=i,this.correlationId=r.Utils.createNewGuid(),this.state=s&&!r.Utils.isEmpty(s)?r.Utils.createNewGuid()+"|"+s:r.Utils.createNewGuid(),this.nonce=r.Utils.createNewGuid(),this.xClientSku="MSAL.JS",this.xClientVer=r.Utils.getLibraryVersion()}return Object.defineProperty(e.prototype,"authority",{get:function(){return this.authorityInstance?this.authorityInstance.CanonicalAuthority:null},enumerable:!0,configurable:!0}),e.prototype.createNavigateUrl=function(e){var t=this.createNavigationUrlString(e),n=this.authorityInstance.AuthorizationEndpoint;return n.indexOf("?")<0?n+="?":n+="&",""+n+t.join("&")},e.prototype.createNavigationUrlString=function(e){e||(e=[this.clientId]),-1===e.indexOf(this.clientId)&&e.push(this.clientId);var t=[];return t.push("response_type="+this.responseType),this.translateclientIdUsedInScope(e),t.push("scope="+encodeURIComponent(this.parseScope(e))),t.push("client_id="+encodeURIComponent(this.clientId)),t.push("redirect_uri="+encodeURIComponent(this.redirectUri)),t.push("state="+encodeURIComponent(this.state)),t.push("nonce="+encodeURIComponent(this.nonce)),t.push("client_info=1"),t.push("x-client-SKU="+this.xClientSku),t.push("x-client-Ver="+this.xClientVer),this.extraQueryParameters&&t.push(this.extraQueryParameters),t.push("client-request-id="+encodeURIComponent(this.correlationId)),t},e.prototype.translateclientIdUsedInScope=function(e){var t=e.indexOf(this.clientId);t>=0&&(e.splice(t,1),-1===e.indexOf("openid")&&e.push("openid"),-1===e.indexOf("profile")&&e.push("profile"))},e.prototype.parseScope=function(e){var t="";if(e)for(var n=0;n<e.length;++n)t+=n!==e.length-1?e[n]+" ":e[n];return t},e}();t.AuthenticationRequestParameters=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e){if(!e||r.Utils.isEmpty(e))return this.uid="",void(this.utid="");try{var t=r.Utils.base64DecodeStringUrlSafe(e),n=JSON.parse(t);n&&(n.hasOwnProperty("uid")&&(this.uid=n.uid),n.hasOwnProperty("utid")&&(this.utid=n.utid))}catch(e){throw new Error(e)}}return Object.defineProperty(e.prototype,"uid",{get:function(){return this._uid?this._uid:""},set:function(e){this._uid=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"utid",{get:function(){return this._utid?this._utid:""},set:function(e){this._utid=e},enumerable:!0,configurable:!0}),e}();t.ClientInfo=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){return function(e){if(r.Utils.isEmpty(e))throw new Error("null or empty raw idtoken");try{this.rawIdToken=e,this.decodedIdToken=r.Utils.extractIdToken(e),this.decodedIdToken&&(this.decodedIdToken.hasOwnProperty("iss")&&(this.issuer=this.decodedIdToken.iss),this.decodedIdToken.hasOwnProperty("oid")&&(this.objectId=this.decodedIdToken.oid),this.decodedIdToken.hasOwnProperty("sub")&&(this.subject=this.decodedIdToken.sub),this.decodedIdToken.hasOwnProperty("tid")&&(this.tenantId=this.decodedIdToken.tid),this.decodedIdToken.hasOwnProperty("ver")&&(this.version=this.decodedIdToken.ver),this.decodedIdToken.hasOwnProperty("preferred_username")&&(this.preferredName=this.decodedIdToken.preferred_username),this.decodedIdToken.hasOwnProperty("name")&&(this.name=this.decodedIdToken.name),this.decodedIdToken.hasOwnProperty("nonce")&&(this.nonce=this.decodedIdToken.nonce),this.decodedIdToken.hasOwnProperty("exp")&&(this.expiration=this.decodedIdToken.exp),this.decodedIdToken.hasOwnProperty("home_oid")&&(this.homeObjectId=this.decodedIdToken.home_oid),this.decodedIdToken.hasOwnProperty("sid")&&(this.sid=this.decodedIdToken.sid))}catch(e){throw new Error("Failed to parse the returned id token")}}}();t.IdToken=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(19),i=function(){function e(t){if(e._instance)return e._instance;if(this._cacheLocation=t,this._localStorageSupported=void 0!==window[this._cacheLocation]&&null!=window[this._cacheLocation],this._sessionStorageSupported=void 0!==window[t]&&null!=window[t],e._instance=this,!this._localStorageSupported&&!this._sessionStorageSupported)throw new Error("localStorage and sessionStorage not supported");return e._instance}return e.prototype.setItem=function(e,t,n){window[this._cacheLocation]&&window[this._cacheLocation].setItem(e,t),n&&this.setItemCookie(e,t)},e.prototype.getItem=function(e,t){return t&&this.getItemCookie(e)?this.getItemCookie(e):window[this._cacheLocation]?window[this._cacheLocation].getItem(e):null},e.prototype.removeItem=function(e){if(window[this._cacheLocation])return window[this._cacheLocation].removeItem(e)},e.prototype.clear=function(){if(window[this._cacheLocation])return window[this._cacheLocation].clear()},e.prototype.getAllAccessTokens=function(e,t){var n,r=[],i=window[this._cacheLocation];if(i){var s=void 0;for(s in i)if(i.hasOwnProperty(s)&&s.match(e)&&s.match(t)){var a=this.getItem(s);a&&(n=new o.AccessTokenCacheItem(JSON.parse(s),JSON.parse(a)),r.push(n))}}return r},e.prototype.removeAcquireTokenEntries=function(e,t){var n=window[this._cacheLocation];if(n){var r=void 0;for(r in n)n.hasOwnProperty(r)&&(""!==e&&r.indexOf(e)>-1||""!==t&&r.indexOf(t)>-1)&&this.removeItem(r)}},e.prototype.resetCacheItems=function(){var e=window[this._cacheLocation];if(e){var t=void 0;for(t in e)e.hasOwnProperty(t)&&(-1!==t.indexOf(r.Constants.msal)&&this.setItem(t,""),-1!==t.indexOf(r.Constants.renewStatus)&&this.removeItem(t))}},e.prototype.setItemCookie=function(e,t,n){var r=e+"="+t+";";n&&(r+="expires="+this.setExpirationCookie(n)+";");document.cookie=r},e.prototype.getItemCookie=function(e){for(var t=e+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var o=n[r];" "===o.charAt(0);)o=o.substring(1);if(0===o.indexOf(t))return o.substring(t.length,o.length)}return""},e.prototype.setExpirationCookie=function(e){var t=new Date;return new Date(t.getTime()+24*e*60*60*1e3).toUTCString()},e.prototype.clearCookie=function(){this.setItemCookie(r.Constants.nonceIdToken,"",-1),this.setItemCookie(r.Constants.stateLogin,"",-1),this.setItemCookie(r.Constants.loginRequest,"",-1),this.setItemCookie(r.Constants.stateAcquireToken,"",-1)},e}();t.Storage=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){this.key=e,this.value=t}}();t.AccessTokenCacheItem=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(9),i=n(21),s=n(2),a=n(5),c=function(){function e(){}return e.DetectAuthorityFromUrl=function(e){switch(e=r.Utils.CanonicalizeUri(e),r.Utils.GetUrlComponents(e).PathSegments[0]){case"tfp":return s.AuthorityType.B2C;case"adfs":return s.AuthorityType.Adfs;default:return s.AuthorityType.Aad}},e.CreateInstance=function(t,n){if(r.Utils.isEmpty(t))return null;switch(e.DetectAuthorityFromUrl(t)){case s.AuthorityType.B2C:return new i.B2cAuthority(t,n);case s.AuthorityType.Aad:return new o.AadAuthority(t,n);default:throw a.ErrorMessage.invalidAuthorityType}},e}();t.AuthorityFactory=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(9),i=n(2),s=n(5),a=n(0),c=function(e){function t(t,n){var r=e.call(this,t,n)||this,o=a.Utils.GetUrlComponents(t),i=o.PathSegments;if(i.length<3)throw s.ErrorMessage.b2cAuthorityUriInvalidPath;return r.CanonicalAuthority="https://"+o.HostNameAndPort+"/"+i[0]+"/"+i[1]+"/"+i[2]+"/",r}return r.__extends(t,e),Object.defineProperty(t.prototype,"AuthorityType",{get:function(){return i.AuthorityType.B2C},enumerable:!0,configurable:!0}),t.prototype.GetOpenIdConfigurationEndpointAsync=function(){var e=this,t=new Promise(function(t,n){return t(e.DefaultOpenIdConfigurationEndpoint)});return this.IsValidationEnabled?this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)?t:new Promise(function(e,t){return t(s.ErrorMessage.unsupportedAuthorityValidation)}):t},t}(o.AadAuthority);t.B2cAuthority=c}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Nc2FsL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9Nc2FsL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL01zYWwvLi9zcmMvVXRpbHMudHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9Db25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9BdXRob3JpdHkudHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9Mb2dnZXIudHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9FcnJvck1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9Vc2VyQWdlbnRBcHBsaWNhdGlvbi50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL1JlcXVlc3RJbmZvLnRzIiwid2VicGFjazovL01zYWwvLi9zcmMvVXNlci50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL0FhZEF1dGhvcml0eS50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL1hIUkNsaWVudC50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL01zYWwvLi9zcmMvQWNjZXNzVG9rZW5LZXkudHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9BY2Nlc3NUb2tlblZhbHVlLnRzIiwid2VicGFjazovL01zYWwvLi9zcmMvQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycy50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL0NsaWVudEluZm8udHMiLCJ3ZWJwYWNrOi8vTXNhbC8uL3NyYy9JZFRva2VuLnRzIiwid2VicGFjazovL01zYWwvLi9zcmMvU3RvcmFnZS50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL0FjY2Vzc1Rva2VuQ2FjaGVJdGVtLnRzIiwid2VicGFjazovL01zYWwvLi9zcmMvQXV0aG9yaXR5RmFjdG9yeS50cyIsIndlYnBhY2s6Ly9Nc2FsLy4vc3JjL0IyY0F1dGhvcml0eS50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ29uc3RhbnRzXzEiLCJVdGlscyIsImNvbXBhcmVPYmplY3RzIiwidTEiLCJ1MiIsInVzZXJJZGVudGlmaWVyIiwiZXhwaXJlc0luIiwiZXhwaXJlcyIsInRoaXMiLCJub3ciLCJwYXJzZUludCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiaXNFbXB0eSIsInN0ciIsImxlbmd0aCIsImV4dHJhY3RJZFRva2VuIiwiZW5jb2RlZElkVG9rZW4iLCJkZWNvZGVkVG9rZW4iLCJkZWNvZGVKd3QiLCJiYXNlNjRJZFRva2VuIiwiSldTUGF5bG9hZCIsImJhc2U2NERlY29kZWQiLCJiYXNlNjREZWNvZGVTdHJpbmdVcmxTYWZlIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwiYmFzZTY0RW5jb2RlU3RyaW5nVXJsU2FmZSIsImlucHV0IiwiYnRvYSIsImVuY29kZSIsInJlcGxhY2UiLCJhdG9iIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlIiwiY2hyMSIsImNocjIiLCJjaHIzIiwiZW5jMSIsImVuYzIiLCJlbmMzIiwiZW5jNCIsImtleVN0ciIsIm91dHB1dCIsInV0ZjhFbmNvZGUiLCJjaGFyQ29kZUF0IiwiaXNOYU4iLCJjaGFyQXQiLCJ1dGZ0ZXh0IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY29kZXMiLCJFcnJvciIsImgxIiwiaDIiLCJoMyIsImg0IiwiYml0cyIsImMxIiwiYzIiLCJjMyIsImRlY29kZWQiLCJpbmRleE9mIiwiand0VG9rZW4iLCJtYXRjaGVzIiwiZXhlYyIsImhlYWRlciIsIkpXU1NpZyIsImRlc2VyaWFsaXplIiwicXVlcnkiLCJtYXRjaCIsInBsIiwic2VhcmNoIiwib2JqIiwiaXNJbnRlcnNlY3RpbmdTY29wZXMiLCJjYWNoZWRTY29wZXMiLCJzY29wZXMiLCJjb252ZXJ0VG9Mb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsImNvbnRhaW5zU2NvcGUiLCJldmVyeSIsInRvU3RyaW5nIiwibWFwIiwic2NvcGUiLCJyZW1vdmVFbGVtZW50IiwiZmlsdGVyIiwiZGVjaW1hbFRvSGV4IiwibnVtIiwiaGV4IiwiZ2V0TGlicmFyeVZlcnNpb24iLCJyZXBsYWNlRmlyc3RQYXRoIiwidXJsIiwidGVuYW50SWQiLCJ1cmxPYmplY3QiLCJHZXRVcmxDb21wb25lbnRzIiwicGF0aEFycmF5IiwiUGF0aFNlZ21lbnRzIiwiQ29uc3RhbnRzIiwiY29tbW9uIiwib3JnYW5pemF0aW9ucyIsIlByb3RvY29sIiwiSG9zdE5hbWVBbmRQb3J0Iiwiam9pbiIsImNyZWF0ZU5ld0d1aWQiLCJjcnlwdG9PYmoiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJidWZmZXIiLCJVaW50OEFycmF5IiwiZ3VpZEhvbGRlciIsImd1aWRSZXNwb25zZSIsInJhbmRvbSIsInJlZ0V4IiwiUmVnRXhwIiwidXJsQ29tcG9uZW50cyIsIkFic29sdXRlUGF0aCIsInBhdGhTZWdtZW50cyIsInNwbGl0IiwidmFsIiwiQ2Fub25pY2FsaXplVXJpIiwiZW5kc1dpdGgiLCJzdWZmaXgiLCJjaGVja1NTTyIsImV4dHJhUXVlcnlQYXJhbWV0ZXJzIiwibG9naW5faGludCIsInNpZCIsImNvbnN0cnVjdFVuaWZpZWRDYWNoZUV4dHJhUXVlcnlQYXJhbWV0ZXIiLCJpZFRva2VuT2JqZWN0IiwidXBuIiwidXJsUmVtb3ZlUXVlcnlTdHJpbmdQYXJhbWV0ZXIiLCJkb21haW5faGludCIsInJlZ2V4IiwiX3BvcFVwV2lkdGgiLCJ3aWR0aCIsIl9wb3BVcEhlaWdodCIsImhlaWdodCIsIkVycm9yQ29kZXMiLCJFcnJvckRlc2NyaXB0aW9uIiwiVXRpbHNfMSIsIkVycm9yTWVzc2FnZV8xIiwiWEhSQ2xpZW50XzEiLCJBdXRob3JpdHlUeXBlIiwiQXV0aG9yaXR5IiwiYXV0aG9yaXR5IiwidmFsaWRhdGVBdXRob3JpdHkiLCJJc1ZhbGlkYXRpb25FbmFibGVkIiwiQ2Fub25pY2FsQXV0aG9yaXR5IiwidmFsaWRhdGVBc1VyaSIsIkNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMiLCJ2YWxpZGF0ZVJlc29sdmVkIiwidGVuYW50RGlzY292ZXJ5UmVzcG9uc2UiLCJBdXRob3JpemF0aW9uRW5kcG9pbnQiLCJUZW5hbnQiLCJFbmRTZXNzaW9uRW5kcG9pbnQiLCJJc3N1ZXIiLCJjYW5vbmljYWxBdXRob3JpdHkiLCJjYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzIiwiY29tcG9uZW50cyIsImUiLCJFcnJvck1lc3NhZ2UiLCJpbnZhbGlkQXV0aG9yaXR5VHlwZSIsImF1dGhvcml0eVVyaUluc2VjdXJlIiwiYXV0aG9yaXR5VXJpSW52YWxpZFBhdGgiLCJEaXNjb3ZlckVuZHBvaW50cyIsIm9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludCIsIlhockNsaWVudCIsInNlbmRSZXF1ZXN0QXN5bmMiLCJ0aGVuIiwicmVzcG9uc2UiLCJhdXRob3JpemF0aW9uX2VuZHBvaW50IiwiZW5kX3Nlc3Npb25fZW5kcG9pbnQiLCJpc3N1ZXIiLCJSZXNvbHZlRW5kcG9pbnRzQXN5bmMiLCJfdGhpcyIsIkdldE9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludEFzeW5jIiwib3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50UmVzcG9uc2UiLCJleHRlbmRTdGF0aWNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImIiLCJfX3ZhbHVlcyIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJfX3JlYWQiLCJhciIsInB1c2giLCJlcnJvciIsIl9fYXdhaXQiLCJ2IiwiX19leHRlbmRzIiwiX18iLCJjb25zdHJ1Y3RvciIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXJndW1lbnRzIiwiX19yZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsInRocm93IiwicmVzdWx0IiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJyZXR1cm4iLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsIl9fZXhwb3J0U3RhciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiX19hc3luY0dlbmVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJxIiwiYSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJzaGlmdCIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiTG9nTGV2ZWwiLCJMb2dnZXIiLCJsb2NhbENhbGxiYWNrIiwib3B0aW9ucyIsIl9sZXZlbCIsIkluZm8iLCJfYSIsImNvcnJlbGF0aW9uSWQiLCJfYiIsImxldmVsIiwiX2MiLCJwaWlMb2dnaW5nRW5hYmxlZCIsIl9sb2NhbENhbGxiYWNrIiwiX2NvcnJlbGF0aW9uSWQiLCJfcGlpTG9nZ2luZ0VuYWJsZWQiLCJsb2dNZXNzYWdlIiwibG9nTGV2ZWwiLCJjb250YWluc1BpaSIsImxvZyIsInRpbWVzdGFtcCIsInRvVVRDU3RyaW5nIiwiZXhlY3V0ZUNhbGxiYWNrIiwibWVzc2FnZSIsImVycm9yUGlpIiwid2FybmluZyIsIldhcm5pbmciLCJ3YXJuaW5nUGlpIiwiaW5mbyIsImluZm9QaWkiLCJ2ZXJib3NlIiwiVmVyYm9zZSIsInZlcmJvc2VQaWkiLCJBY2Nlc3NUb2tlbktleV8xIiwiQWNjZXNzVG9rZW5WYWx1ZV8xIiwiQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVyc18xIiwiQ2xpZW50SW5mb18xIiwiSWRUb2tlbl8xIiwiTG9nZ2VyXzEiLCJTdG9yYWdlXzEiLCJSZXF1ZXN0SW5mb18xIiwiVXNlcl8xIiwiQXV0aG9yaXR5RmFjdG9yeV8xIiwiUmVzcG9uc2VUeXBlcyIsInJlc29sdmVUb2tlbk9ubHlJZk91dE9mSWZyYW1lIiwicHJvcGVydHlLZXkiLCJkZXNjcmlwdG9yIiwidG9rZW5BY3F1aXNpdGlvbk1ldGhvZCIsImFyZ3MiLCJfaSIsImlzSW5JZnJhbWUiLCJVc2VyQWdlbnRBcHBsaWNhdGlvbiIsImNsaWVudElkIiwidG9rZW5SZWNlaXZlZENhbGxiYWNrIiwiX2NhY2hlTG9jYXRpb25zIiwibG9jYWxTdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJfY2xvY2tTa2V3IiwiX3Rva2VuUmVjZWl2ZWRDYWxsYmFjayIsIl9pc0FuZ3VsYXIiLCJjYWNoZUxvY2F0aW9uIiwicmVkaXJlY3RVcmkiLCJsb2NhdGlvbiIsImhyZWYiLCJfZCIsInBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsIl9lIiwibG9nZ2VyIiwiX2YiLCJsb2FkRnJhbWVUaW1lb3V0IiwiX2ciLCJuYXZpZ2F0ZVRvTG9naW5SZXF1ZXN0VXJsIiwiX2giLCJzdGF0ZSIsIl9qIiwiaXNBbmd1bGFyIiwiX2siLCJ1bnByb3RlY3RlZFJlc291cmNlcyIsIl9sIiwicHJvdGVjdGVkUmVzb3VyY2VNYXAiLCJNYXAiLCJfbSIsInN0b3JlQXV0aFN0YXRlSW5Db29raWUiLCJfcmVkaXJlY3RVcmkiLCJfcG9zdExvZ291dHJlZGlyZWN0VXJpIiwiX2xvZ2luSW5Qcm9ncmVzcyIsIl9hY3F1aXJlVG9rZW5JblByb2dyZXNzIiwiX2NhY2hlTG9jYXRpb24iLCJfbmF2aWdhdGVUb0xvZ2luUmVxdWVzdFVybCIsIl9zdGF0ZSIsIl91bnByb3RlY3RlZFJlc291cmNlcyIsIl9wcm90ZWN0ZWRSZXNvdXJjZU1hcCIsIl9jYWNoZVN0b3JhZ2UiLCJTdG9yYWdlIiwiX2xvZ2dlciIsIm9wZW5lZFdpbmRvd3MiLCJhY3RpdmVSZW5ld2FscyIsInJlbmV3U3RhdGVzIiwiY2FsbEJhY2tNYXBwZWRUb1JlbmV3U3RhdGVzIiwiY2FsbEJhY2tzTWFwcGVkVG9SZW5ld1N0YXRlcyIsIm1zYWwiLCJ1cmxIYXNoIiwiaGFzaCIsImlzQ2FsbGJhY2siLCJoYW5kbGVBdXRoZW50aWNhdGlvblJlc3BvbnNlIiwicGVuZGluZ0NhbGxiYWNrIiwiZ2V0SXRlbSIsInByb2Nlc3NDYWxsQmFjayIsImF1dGhvcml0eUluc3RhbmNlIiwiQXV0aG9yaXR5RmFjdG9yeSIsIkNyZWF0ZUluc3RhbmNlIiwicmVxdWVzdEluZm8iLCJnZXRSZXF1ZXN0SW5mbyIsInNhdmVUb2tlbkZyb21IYXNoIiwidG9rZW5UeXBlIiwidG9rZW4iLCJwYXJhbWV0ZXJzIiwiYWNjZXNzVG9rZW4iLCJpZFRva2VuIiwiZXJyb3JEZXNjIiwiZXJyb3JEZXNjcmlwdGlvbiIsInJlbW92ZUl0ZW0iLCJjbGVhckNvb2tpZSIsImdldFVzZXJTdGF0ZSIsInN0YXRlTG9naW4iLCJnZXRSZWRpcmVjdFVyaSIsImdldFBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsImxvZ2luUmVkaXJlY3QiLCJsb2dpblByb2dyZXNzRXJyb3IiLCJpc1ZhbGlkU2NvcGUiLCJ2YWxpZGF0ZUlucHV0U2NvcGUiLCJpbnB1dFNjb3Blc0Vycm9yIiwiZmlsdGVyU2NvcGVzIiwiZXh0cmFjdEFEQUxJZFRva2VuIiwiX3NpbGVudExvZ2luIiwiYWNxdWlyZVRva2VuU2lsZW50IiwiZ2V0VXNlciIsIl9zaWxlbnRBdXRoZW50aWNhdGlvblN0YXRlIiwibG9naW5SZWRpcmVjdEhlbHBlciIsImF1dGhlbnRpY2F0aW9uUmVxdWVzdCIsIkF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMiLCJsb2dpblN0YXJ0UGFnZSIsImFuZ3VsYXJMb2dpblJlcXVlc3QiLCJzZXRJdGVtIiwibG9naW5SZXF1ZXN0IiwibG9naW5FcnJvciIsIm5vbmNlSWRUb2tlbiIsIm5vbmNlIiwibXNhbEVycm9yIiwibXNhbEVycm9yRGVzY3JpcHRpb24iLCJhdXRob3JpdHlLZXkiLCJyZXNvdXJjZURlbGltZXRlciIsInVybE5hdmlnYXRlIiwiY3JlYXRlTmF2aWdhdGVVcmwiLCJyZXNwb25zZV9tb2RlX2ZyYWdtZW50IiwicHJvbXB0VXNlciIsImxvZ2luUG9wdXAiLCJsb2dpblBvcHVwSGVscGVyIiwicG9wVXBXaW5kb3ciLCJvcGVuV2luZG93IiwicmVxdWVzdFR5cGUiLCJsb2dpbiIsInJlZ2lzdGVyQ2FsbGJhY2siLCJlbmRwb2ludFJlc29sdXRpb25FcnJvciIsImNsb3NlIiwiY2F0Y2giLCJ0aXRsZSIsImludGVydmFsIiwiaW5zdGFuY2UiLCJwb3B1cFdpbmRvdyIsIm9wZW5Qb3B1cCIsInBvcFVwV2lkdGgiLCJwb3BVcEhlaWdodCIsInBvcFVwV2luZG93RXJyb3IiLCJwb2xsVGltZXIiLCJzZXRJbnRlcnZhbCIsImNsb3NlZCIsInVzZXJDYW5jZWxsZWRFcnJvciIsImNsZWFySW50ZXJ2YWwiLCJicm9hZGNhc3QiLCJwb3BVcFdpbmRvd0xvY2F0aW9uIiwiZXZlbnROYW1lIiwiZGF0YSIsImV2dCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsImxvZ291dCIsImNsZWFyQ2FjaGUiLCJfdXNlciIsImFjY2Vzc1Rva2VuSXRlbXMiLCJnZXRBbGxBY2Nlc3NUb2tlbnMiLCJzdHJpbmdpZnkiLCJyZXNldENhY2hlSXRlbXMiLCJjbGVhckNhY2hlRm9yU2NvcGUiLCJ3aW5MZWZ0Iiwic2NyZWVuTGVmdCIsInNjcmVlblgiLCJ3aW5Ub3AiLCJzY3JlZW5Ub3AiLCJzY3JlZW5ZIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsImxlZnQiLCJ0b3AiLCJvcGVuIiwiZm9jdXMiLCJpc0FycmF5IiwiZWxlbWVudCIsImV4cGVjdGVkU3RhdGUiLCJnZXRDYWNoZWRUb2tlbkludGVybmFsIiwidXNlciIsInVzZXJPYmplY3QiLCJuZXdBdXRob3JpdHkiLCJnZXRDYWNoZWRUb2tlbiIsImFjY2Vzc1Rva2VuQ2FjaGVJdGVtIiwidG9rZW5DYWNoZUl0ZW1zIiwiZmlsdGVyZWRJdGVtcyIsImNhY2hlSXRlbSIsImF1dGhvcml0eUxpc3QiLCJnZXRVbmlxdWVBdXRob3JpdHkiLCJleHBpcmVkIiwiTnVtYmVyIiwib2Zmc2V0IiwiZ2V0QWxsVXNlcnMiLCJ1c2VycyIsImFjY2Vzc1Rva2VuQ2FjaGVJdGVtcyIsIklkVG9rZW4iLCJjbGllbnRJbmZvIiwiQ2xpZW50SW5mbyIsIlVzZXIiLCJjcmVhdGVVc2VyIiwiZ2V0VW5pcXVlVXNlcnMiLCJmbGFncyIsInVuaXF1ZVVzZXJzIiwiaW5kZXgiLCJmb3JFYWNoIiwiYWRkSGludFBhcmFtZXRlcnMiLCJkZWNvZGVkQ2xpZW50SW5mbyIsInVpZCIsInV0aWQiLCJwcm9tcHRfbm9uZSIsInVybENvbnRhaW5zUXVlcnlTdHJpbmdQYXJhbWV0ZXIiLCJkaXNwbGF5YWJsZUlkIiwiY29uc3VtZXJzVXRpZCIsImNvbnN1bWVycyIsInRlc3QiLCJhY3F1aXJlVG9rZW5SZWRpcmVjdCIsInVzZXJMb2dpbkVycm9yIiwiYWNxdWlyZVRva2VuQXV0aG9yaXR5IiwiYWNxdWlyZVRva2VuVXNlcktleSIsImFjcXVpcmVUb2tlblVzZXIiLCJub191c2VyIiwic3RhdGVBY3F1aXJlVG9rZW4iLCJhY3F1aXJlVG9rZW5Qb3B1cCIsImFjcXVpcmVUb2tlblByb2dyZXNzRXJyb3IiLCJyZW5ld1Rva2VuIiwiYXV0aGVudGljYXRpb25SZXF1ZXN0XzEiLCJzY29wZV8xIiwidXNlck9iamVjdF8xIiwiYWRhbElkVG9rZW4iLCJjb25zb2xlIiwiY2FjaGVSZXN1bHQiLCJyZW5ld0lkVG9rZW4iLCJsb2FkSWZyYW1lVGltZW91dCIsImZyYW1lTmFtZSIsInJlbmV3U3RhdHVzIiwidG9rZW5SZW5ld1N0YXR1c0luUHJvZ3Jlc3MiLCJsb2FkRnJhbWUiLCJzZXRUaW1lb3V0IiwidG9rZW5SZW5ld1N0YXR1c0NhbmNlbGxlZCIsImZyYW1lQ2hlY2siLCJmcmFtZUhhbmRsZSIsImFkZEFkYWxGcmFtZSIsInNyYyIsImlmcmFtZUlkIiwiYWRhbEZyYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFbGVtZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaWZyIiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwicG9zaXRpb24iLCJib3JkZXIiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZnJhbWVzIiwicHJvbXB0IiwicmF3SWRUb2tlbiIsImlkVG9rZW5LZXkiLCJyYXdDbGllbnRJbmZvIiwibXNhbENsaWVudEluZm8iLCJzZWxmIiwiaXNQb3B1cCIsImlzV2luZG93T3BlbmVyTXNhbCIsIm9wZW5lciIsInBhcmVudCIsInN0YXRlUmVzcG9uc2UiLCJzdGF0ZU1hdGNoIiwic2F2ZUFjY2Vzc1Rva2VuIiwidG9rZW5SZXNwb25zZSIsImNsaWVudE9iaiIsImNvbnNlbnRlZFNjb3BlcyIsImFjY2Vzc1Rva2VuS2V5IiwiQWNjZXNzVG9rZW5LZXkiLCJhY2Nlc3NUb2tlblZhbHVlIiwiQWNjZXNzVG9rZW5WYWx1ZSIsImV4cGlyYXRpb24iLCJ1c2VyS2V5Iiwic2Vzc2lvblN0YXRlIiwibXNhbFNlc3Npb25TdGF0ZSIsImFjcXVpcmVUb2tlblVzZXJLZXlfbm91c2VyIiwiY2FjaGVkVXNlciIsInRva2VuUmVuZXdTdGF0dXNDb21wbGV0ZWQiLCJyZW1vdmVBY3F1aXJlVG9rZW5FbnRyaWVzIiwic2V0SXRlbUNvb2tpZSIsImdldEhhc2giLCJzdWJzdHJpbmciLCJUb2tlblJlc3BvbnNlIiwidmFsaWQiLCJzdGF0ZXNJblBhcmVudENvbnRleHQiLCJnZXRTY29wZUZyb21TdGF0ZSIsInNwbGl0SW5kZXgiLCJsb2dpbkluUHJvZ3Jlc3MiLCJnZXRIb3N0RnJvbVVyaSIsInVyaSIsImV4dHJhY3RlZFVyaSIsImdldFNjb3Blc0ZvckVuZHBvaW50IiwiZW5kcG9pbnQiLCJzaXplIiwiZnJvbSIsImtleXMiLCJzZXRsb2dpbkluUHJvZ3Jlc3MiLCJnZXRBY3F1aXJlVG9rZW5JblByb2dyZXNzIiwic2V0QWNxdWlyZVRva2VuSW5Qcm9ncmVzcyIsImFjcXVpcmVUb2tlbkluUHJvZ3Jlc3MiLCJnZXRMb2dnZXIiLCJ0c2xpYl8xIiwiaWRlbnRpdHlQcm92aWRlciIsInByZWZlcnJlZE5hbWUiLCJkZWNvZGVkSWRUb2tlbiIsIkF1dGhvcml0eV8xIiwiQWFkQXV0aG9yaXR5IiwiX3N1cGVyIiwiQWFkSW5zdGFuY2VEaXNjb3ZlcnlFbmRwb2ludCIsIkFhZCIsInJlc3VsdFByb21pc2UiLCJEZWZhdWx0T3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50IiwiaG9zdCIsIklzSW5UcnVzdGVkSG9zdExpc3QiLCJBYWRJbnN0YW5jZURpc2NvdmVyeUVuZHBvaW50VXJsIiwidGVuYW50X2Rpc2NvdmVyeV9lbmRwb2ludCIsIlRydXN0ZWRIb3N0TGlzdCIsImxvZ2luLndpbmRvd3MubmV0IiwibG9naW4uY2hpbmFjbG91ZGFwaS5jbiIsImxvZ2luLmNsb3VkZ292YXBpLnVzIiwibG9naW4ubWljcm9zb2Z0b25saW5lLmNvbSIsImxvZ2luLm1pY3Jvc29mdG9ubGluZS5kZSIsImxvZ2luLm1pY3Jvc29mdG9ubGluZS51cyIsIm1ldGhvZCIsImVuYWJsZUNhY2hpbmciLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsImV2Iiwic3RhdHVzIiwiaGFuZGxlRXJyb3IiLCJyZXNwb25zZVRleHQiLCJqc29uUmVzcG9uc2UiLCJvbmVycm9yIiwic2VuZCIsIlVzZXJBZ2VudEFwcGxpY2F0aW9uXzEiLCJMb2dnZXJfMiIsIlVzZXJBZ2VudEFwcGxpY2F0aW9uXzIiLCJDYWNoZVJlc3VsdCIsInJlc3BvbnNlVHlwZSIsInhDbGllbnRTa3UiLCJ4Q2xpZW50VmVyIiwiY3JlYXRlTmF2aWdhdGlvblVybFN0cmluZyIsImF1dGhFbmRwb2ludCIsInRyYW5zbGF0ZWNsaWVudElkVXNlZEluU2NvcGUiLCJwYXJzZVNjb3BlIiwiY2xpZW50SWRJbmRleCIsInNwbGljZSIsInNjb3BlTGlzdCIsIl91aWQiLCJfdXRpZCIsIm9iamVjdElkIiwic3ViamVjdCIsInZlcnNpb24iLCJob21lT2JqZWN0SWQiLCJBY2Nlc3NUb2tlbkNhY2hlSXRlbV8xIiwiX2luc3RhbmNlIiwiX2xvY2FsU3RvcmFnZVN1cHBvcnRlZCIsIl9zZXNzaW9uU3RvcmFnZVN1cHBvcnRlZCIsImVuYWJsZUNvb2tpZVN0b3JhZ2UiLCJnZXRJdGVtQ29va2llIiwiY2xlYXIiLCJyZXN1bHRzIiwic3RvcmFnZSIsIkFjY2Vzc1Rva2VuQ2FjaGVJdGVtIiwiY05hbWUiLCJjVmFsdWUiLCJjb29raWVTdHIiLCJzZXRFeHBpcmF0aW9uQ29va2llIiwiY29va2llIiwiY2EiLCJjb29raWVMaWZlIiwidG9kYXkiLCJBYWRBdXRob3JpdHlfMSIsIkIyY0F1dGhvcml0eV8xIiwiRGV0ZWN0QXV0aG9yaXR5RnJvbVVybCIsImF1dGhvcml0eVVybCIsIkIyQyIsIkFkZnMiLCJCMmNBdXRob3JpdHkiLCJiMmNBdXRo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QUFJQSxFQUFhLEdBQUUsTUF5Qi9ILE9BbkNrQ21lLEVBQUF4WixVQUFBc2UsRUFBQXhFLEdBYWhDdG5CLE9BQUFDLGVBQVc2ckIsRUFBQTVxQixVQUFBLGdCQUFhLEtBQXhCLFdBQ0UsT0FBT2ttQixFQUFBOWMsY0FBY3NoQixxQ0FNaEJFLEVBQUE1cUIsVUFBQXFMLG9DQUFQLGVBQUFELEVBQUF4SyxLQUNNMmxCLEVBQWdCLElBQUl0WSxRQUFnQixTQUFDQyxFQUFTQyxHQUNoRCxPQUFBRCxFQUFROUMsRUFBS29iLHNDQUVmLE9BQUs1bEIsS0FBSzRJLG9CQUlONUksS0FBSzhsQixvQkFBb0I5bEIsS0FBSytJLGdDQUFnQy9DLGlCQUN6RDJmLEVBR0YsSUFBSXRZLFFBQWdCLFNBQUNDLEVBQVNDLEdBQ25DLE9BQUFBLEVBQU9qRixFQUFBb0IsYUFBYXdnQixrQ0FSYnZFLEdBVWJxRSxFQW5DQSxDQUFrQ04sRUFBQW5FLGNBQXJCdm9CLEVBQUFndEIiLCJmaWxlIjoibXNhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiTXNhbFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJNc2FsXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIk1zYWxcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgSVVyaSB9IGZyb20gXCIuL0lVcmlcIjtcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi9Vc2VyXCI7XG5pbXBvcnQge0NvbnN0YW50c30gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBVdGlscyB7XG4gIHN0YXRpYyBjb21wYXJlT2JqZWN0cyh1MTogVXNlciwgdTI6IFVzZXIpOiBib29sZWFuIHtcbiAgIGlmICghdTEgfHwgIXUyKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIGlmICh1MS51c2VySWRlbnRpZmllciAmJiB1Mi51c2VySWRlbnRpZmllcikge1xuICAgICAgaWYgKHUxLnVzZXJJZGVudGlmaWVyID09PSB1Mi51c2VySWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGV4cGlyZXNJbihleHBpcmVzOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIC8vIGlmIEFBRCBkaWQgbm90IHNlbmQgXCJleHBpcmVzX2luXCIgcHJvcGVydHksIHVzZSBkZWZhdWx0IGV4cGlyYXRpb24gb2YgMzU5OSBzZWNvbmRzLCBmb3Igc29tZSByZWFzb24gQUFEIHNlbmRzIDM1OTkgYXMgXCJleHBpcmVzX2luXCIgdmFsdWUgaW5zdGVhZCBvZiAzNjAwXG4gICAgIGlmICghZXhwaXJlcykge1xuICAgICAgICAgZXhwaXJlcyA9IFwiMzU5OVwiO1xuICAgICAgfVxuICAgIHJldHVybiB0aGlzLm5vdygpICsgcGFyc2VJbnQoZXhwaXJlcywgMTApO1xuICB9XG5cbiAgc3RhdGljIG5vdygpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMC4wKTtcbiAgfVxuXG4gIHN0YXRpYyBpc0VtcHR5KHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0eXBlb2Ygc3RyID09PSBcInVuZGVmaW5lZFwiIHx8ICFzdHIgfHwgMCA9PT0gc3RyLmxlbmd0aCk7XG4gIH1cblxuICBzdGF0aWMgZXh0cmFjdElkVG9rZW4oZW5jb2RlZElkVG9rZW46IHN0cmluZyk6IGFueSB7XG4gICAgLy8gaWQgdG9rZW4gd2lsbCBiZSBkZWNvZGVkIHRvIGdldCB0aGUgdXNlcm5hbWVcbiAgICBjb25zdCBkZWNvZGVkVG9rZW4gPSB0aGlzLmRlY29kZUp3dChlbmNvZGVkSWRUb2tlbik7XG4gICAgaWYgKCFkZWNvZGVkVG9rZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgYmFzZTY0SWRUb2tlbiA9IGRlY29kZWRUb2tlbi5KV1NQYXlsb2FkO1xuICAgICAgY29uc3QgYmFzZTY0RGVjb2RlZCA9IHRoaXMuYmFzZTY0RGVjb2RlU3RyaW5nVXJsU2FmZShiYXNlNjRJZFRva2VuKTtcbiAgICAgIGlmICghYmFzZTY0RGVjb2RlZCkge1xuICAgICAgICAvL3RoaXMuX3JlcXVlc3RDb250ZXh0LmxvZ2dlci5pbmZvKFwiVGhlIHJldHVybmVkIGlkX3Rva2VuIGNvdWxkIG5vdCBiZSBiYXNlNjQgdXJsIHNhZmUgZGVjb2RlZC5cIik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gRUNNQSBzY3JpcHQgaGFzIEpTT04gYnVpbHQtaW4gc3VwcG9ydFxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0RGVjb2RlZCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvL3RoaXMuX3JlcXVlc3RDb250ZXh0LmxvZ2dlci5lcnJvcihcIlRoZSByZXR1cm5lZCBpZF90b2tlbiBjb3VsZCBub3QgYmUgZGVjb2RlZFwiICsgZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBiYXNlNjRFbmNvZGVTdHJpbmdVcmxTYWZlKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIGh0bWw1IHNob3VsZCBzdXBwb3J0IGF0b2IgZnVuY3Rpb24gZm9yIGRlY29kaW5nXG4gICAgaWYgKHdpbmRvdy5idG9hKSB7XG4gICAgICByZXR1cm4gd2luZG93LmJ0b2EoaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVuY29kZShpbnB1dCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGJhc2U2NERlY29kZVN0cmluZ1VybFNhZmUoYmFzZTY0SWRUb2tlbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBodG1sNSBzaG91bGQgc3VwcG9ydCBhdG9iIGZ1bmN0aW9uIGZvciBkZWNvZGluZ1xuICAgIGJhc2U2NElkVG9rZW4gPSBiYXNlNjRJZFRva2VuLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpO1xuICAgIGlmICh3aW5kb3cuYXRvYikge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cuYXRvYihiYXNlNjRJZFRva2VuKSkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuZGVjb2RlKGJhc2U2NElkVG9rZW4pKSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGVuY29kZShpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBrZXlTdHI6IHN0cmluZyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBsZXQgY2hyMTogbnVtYmVyLCBjaHIyOiBudW1iZXIsIGNocjM6IG51bWJlciwgZW5jMTogbnVtYmVyLCBlbmMyOiBudW1iZXIsIGVuYzM6IG51bWJlciwgZW5jNDogbnVtYmVyO1xuICAgIHZhciBpID0gMDtcblxuICAgIGlucHV0ID0gdGhpcy51dGY4RW5jb2RlKGlucHV0KTtcblxuICAgIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICBjaHIxID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgICAgY2hyMiA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGNocjMgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG5cbiAgICAgIGVuYzEgPSBjaHIxID4+IDI7XG4gICAgICBlbmMyID0gKChjaHIxICYgMykgPDwgNCkgfCAoY2hyMiA+PiA0KTtcbiAgICAgIGVuYzMgPSAoKGNocjIgJiAxNSkgPDwgMikgfCAoY2hyMyA+PiA2KTtcbiAgICAgIGVuYzQgPSBjaHIzICYgNjM7XG5cbiAgICAgIGlmIChpc05hTihjaHIyKSkge1xuICAgICAgICBlbmMzID0gZW5jNCA9IDY0O1xuICAgICAgfSBlbHNlIGlmIChpc05hTihjaHIzKSkge1xuICAgICAgICBlbmM0ID0gNjQ7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IG91dHB1dCArIGtleVN0ci5jaGFyQXQoZW5jMSkgKyBrZXlTdHIuY2hhckF0KGVuYzIpICsga2V5U3RyLmNoYXJBdChlbmMzKSArIGtleVN0ci5jaGFyQXQoZW5jNCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPSskLywgXCJcIik7XG4gIH1cblxuICBzdGF0aWMgdXRmOEVuY29kZShpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcblwiKTtcbiAgICB2YXIgdXRmdGV4dCA9IFwiXCI7XG5cbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IGlucHV0Lmxlbmd0aDsgbisrKSB7XG4gICAgICB2YXIgYyA9IGlucHV0LmNoYXJDb2RlQXQobik7XG5cbiAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKChjID4gMTI3KSAmJiAoYyA8IDIwNDgpKSB7XG4gICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyA+PiA2KSB8IDE5Mik7XG4gICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDYzKSB8IDEyOCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjID4+IDEyKSB8IDIyNCk7XG4gICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgPj4gNikgJiA2MykgfCAxMjgpO1xuICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgJiA2MykgfCAxMjgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1dGZ0ZXh0O1xuICB9XG5cbiAgc3RhdGljIGRlY29kZShiYXNlNjRJZFRva2VuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHZhciBjb2RlcyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcbiAgICBiYXNlNjRJZFRva2VuID0gU3RyaW5nKGJhc2U2NElkVG9rZW4pLnJlcGxhY2UoLz0rJC8sIFwiXCIpO1xuICAgIHZhciBsZW5ndGggPSBiYXNlNjRJZFRva2VuLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICUgNCA9PT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHRva2VuIHRvIGJlIGRlY29kZWQgaXMgbm90IGNvcnJlY3RseSBlbmNvZGVkLlwiKTtcbiAgICB9XG4gICAgbGV0IGgxOiBudW1iZXIsIGgyOiBudW1iZXIsIGgzOiBudW1iZXIsIGg0OiBudW1iZXIsIGJpdHM6IG51bWJlciwgYzE6IG51bWJlciwgYzI6IG51bWJlciwgYzM6IG51bWJlciwgZGVjb2RlZCA9IFwiXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gNCkge1xuICAgICAgLy9FdmVyeSA0IGJhc2U2NCBlbmNvZGVkIGNoYXJhY3RlciB3aWxsIGJlIGNvbnZlcnRlZCB0byAzIGJ5dGUgc3RyaW5nLCB3aGljaCBpcyAyNCBiaXRzXG4gICAgICAvLyB0aGVuIDYgYml0cyBwZXIgYmFzZTY0IGVuY29kZWQgY2hhcmFjdGVyXG4gICAgICBoMSA9IGNvZGVzLmluZGV4T2YoYmFzZTY0SWRUb2tlbi5jaGFyQXQoaSkpO1xuICAgICAgaDIgPSBjb2Rlcy5pbmRleE9mKGJhc2U2NElkVG9rZW4uY2hhckF0KGkgKyAxKSk7XG4gICAgICBoMyA9IGNvZGVzLmluZGV4T2YoYmFzZTY0SWRUb2tlbi5jaGFyQXQoaSArIDIpKTtcbiAgICAgIGg0ID0gY29kZXMuaW5kZXhPZihiYXNlNjRJZFRva2VuLmNoYXJBdChpICsgMykpO1xuICAgICAgLy8gRm9yIHBhZGRpbmcsIGlmIGxhc3QgdHdvIGFyZSBcIj1cIlxuICAgICAgaWYgKGkgKyAyID09PSBsZW5ndGggLSAxKSB7XG4gICAgICAgIGJpdHMgPSBoMSA8PCAxOCB8IGgyIDw8IDEyIHwgaDMgPDwgNjtcbiAgICAgICAgYzEgPSBiaXRzID4+IDE2ICYgMjU1O1xuICAgICAgICBjMiA9IGJpdHMgPj4gOCAmIDI1NTtcbiAgICAgICAgZGVjb2RlZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxLCBjMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gaWYgbGFzdCBvbmUgaXMgXCI9XCJcbiAgICAgIGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGggLSAxKSB7XG4gICAgICAgIGJpdHMgPSBoMSA8PCAxOCB8IGgyIDw8IDEyO1xuICAgICAgICBjMSA9IGJpdHMgPj4gMTYgJiAyNTU7XG4gICAgICAgIGRlY29kZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYml0cyA9IGgxIDw8IDE4IHwgaDIgPDwgMTIgfCBoMyA8PCA2IHwgaDQ7XG4gICAgICAvLyB0aGVuIGNvbnZlcnQgdG8gMyBieXRlIGNoYXJzXG4gICAgICBjMSA9IGJpdHMgPj4gMTYgJiAyNTU7XG4gICAgICBjMiA9IGJpdHMgPj4gOCAmIDI1NTtcbiAgICAgIGMzID0gYml0cyAmIDI1NTtcbiAgICAgIGRlY29kZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSwgYzIsIGMzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZWQ7XG4gIH1cblxuICBzdGF0aWMgZGVjb2RlSnd0KGp3dFRva2VuOiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoand0VG9rZW4pKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgaWRUb2tlblBhcnRzUmVnZXggPSAvXihbXlxcLlxcc10qKVxcLihbXlxcLlxcc10rKVxcLihbXlxcLlxcc10qKSQvO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBpZFRva2VuUGFydHNSZWdleC5leGVjKGp3dFRva2VuKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlcy5sZW5ndGggPCA0KSB7XG4gICAgICAvL3RoaXMuX3JlcXVlc3RDb250ZXh0LmxvZ2dlci53YXJuKFwiVGhlIHJldHVybmVkIGlkX3Rva2VuIGlzIG5vdCBwYXJzZWFibGUuXCIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNyYWNrZWRUb2tlbiA9IHtcbiAgICAgIGhlYWRlcjogbWF0Y2hlc1sxXSxcbiAgICAgIEpXU1BheWxvYWQ6IG1hdGNoZXNbMl0sXG4gICAgICBKV1NTaWc6IG1hdGNoZXNbM11cbiAgICB9O1xuICAgIHJldHVybiBjcmFja2VkVG9rZW47XG4gIH1cblxuICBzdGF0aWMgZGVzZXJpYWxpemUocXVlcnk6IHN0cmluZyk6IGFueSB7XG4gICAgbGV0IG1hdGNoOiBBcnJheTxzdHJpbmc+OyAvLyBSZWdleCBmb3IgcmVwbGFjaW5nIGFkZGl0aW9uIHN5bWJvbCB3aXRoIGEgc3BhY2VcbiAgICBjb25zdCBwbCA9IC9cXCsvZztcbiAgICBjb25zdCBzZWFyY2ggPSAvKFteJj1dKyk9KFteJl0qKS9nO1xuICAgIGNvbnN0IGRlY29kZSA9IChzOiBzdHJpbmcpID0+IGRlY29kZVVSSUNvbXBvbmVudChzLnJlcGxhY2UocGwsIFwiIFwiKSk7XG4gICAgY29uc3Qgb2JqOiB7fSA9IHt9O1xuICAgIG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpO1xuICAgIHdoaWxlIChtYXRjaCkge1xuICAgICAgb2JqW2RlY29kZShtYXRjaFsxXSldID0gZGVjb2RlKG1hdGNoWzJdKTtcbiAgICAgIG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgc3RhdGljIGlzSW50ZXJzZWN0aW5nU2NvcGVzKGNhY2hlZFNjb3BlczogQXJyYXk8c3RyaW5nPiwgc2NvcGVzOiBBcnJheTxzdHJpbmc+KTogYm9vbGVhbiB7XG4gICAgY2FjaGVkU2NvcGVzID0gdGhpcy5jb252ZXJ0VG9Mb3dlckNhc2UoY2FjaGVkU2NvcGVzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjb3Blcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY2FjaGVkU2NvcGVzLmluZGV4T2Yoc2NvcGVzW2ldLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBjb250YWluc1Njb3BlKGNhY2hlZFNjb3BlczogQXJyYXk8c3RyaW5nPiwgc2NvcGVzOiBBcnJheTxzdHJpbmc+KTogYm9vbGVhbiB7XG4gICAgY2FjaGVkU2NvcGVzID0gdGhpcy5jb252ZXJ0VG9Mb3dlckNhc2UoY2FjaGVkU2NvcGVzKTtcbiAgICByZXR1cm4gc2NvcGVzLmV2ZXJ5KCh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiBjYWNoZWRTY29wZXMuaW5kZXhPZih2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpID49IDApO1xuICB9XG5cbiAgc3RhdGljIGNvbnZlcnRUb0xvd2VyQ2FzZShzY29wZXM6IEFycmF5PHN0cmluZz4pOiBBcnJheTxzdHJpbmc+IHtcbiAgICByZXR1cm4gc2NvcGVzLm1hcChzY29wZSA9PiBzY29wZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVFbGVtZW50KHNjb3BlczogQXJyYXk8c3RyaW5nPiwgc2NvcGU6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBzY29wZXMuZmlsdGVyKHZhbHVlID0+IHZhbHVlICE9PSBzY29wZSk7XG4gIH1cblxuICBzdGF0aWMgZGVjaW1hbFRvSGV4KG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICB2YXIgaGV4OiBzdHJpbmcgPSBudW0udG9TdHJpbmcoMTYpO1xuICAgIHdoaWxlIChoZXgubGVuZ3RoIDwgMikge1xuICAgICAgaGV4ID0gXCIwXCIgKyBoZXg7XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGlicmFyeVZlcnNpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCIwLjIuNFwiO1xuICB9XG5cbiAgLypcbiAgICAqIEdpdmVuIGEgdXJsIGxpa2UgaHR0cHM6Ly9hOmIvY29tbW9uL2Q/ZT1mI2csIGFuZCBhIHRlbmFudElkLCByZXR1cm5zIGh0dHBzOi8vYTpiL3RlbmFudElkL2RcbiAgICAqIEBwYXJhbSBocmVmIFRoZSB1cmxcbiAgICAqIEBwYXJhbSB0ZW5hbnRJZCBUaGUgdGVuYW50IGlkIHRvIHJlcGxhY2VcbiAgICAqL1xuICAgIHN0YXRpYyByZXBsYWNlRmlyc3RQYXRoKHVybDogc3RyaW5nLCB0ZW5hbnRJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0ZW5hbnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsT2JqZWN0ID0gdGhpcy5HZXRVcmxDb21wb25lbnRzKHVybCk7XG4gICAgICAgIHZhciBwYXRoQXJyYXkgPSB1cmxPYmplY3QuUGF0aFNlZ21lbnRzO1xuICAgICAgICBpZiAocGF0aEFycmF5Lmxlbmd0aCAhPT0gMCAmJiAocGF0aEFycmF5WzBdID09PSBDb25zdGFudHMuY29tbW9uIHx8IHBhdGhBcnJheVswXSA9PT0gQ29uc3RhbnRzLm9yZ2FuaXphdGlvbnMpKSB7XG4gICAgICAgICAgICBwYXRoQXJyYXlbMF0gPSB0ZW5hbnRJZDtcbiAgICAgICAgICAgIHVybCA9IHVybE9iamVjdC5Qcm90b2NvbCArIFwiLy9cIiArIHVybE9iamVjdC5Ib3N0TmFtZUFuZFBvcnQgKyBcIi9cIiArIHBhdGhBcnJheS5qb2luKFwiL1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICBzdGF0aWMgY3JlYXRlTmV3R3VpZCgpOiBzdHJpbmcge1xuICAgIC8vIFJGQzQxMjI6IFRoZSB2ZXJzaW9uIDQgVVVJRCBpcyBtZWFudCBmb3IgZ2VuZXJhdGluZyBVVUlEcyBmcm9tIHRydWx5LXJhbmRvbSBvclxuICAgIC8vIHBzZXVkby1yYW5kb20gbnVtYmVycy5cbiAgICAvLyBUaGUgYWxnb3JpdGhtIGlzIGFzIGZvbGxvd3M6XG4gICAgLy8gICAgIFNldCB0aGUgdHdvIG1vc3Qgc2lnbmlmaWNhbnQgYml0cyAoYml0cyA2IGFuZCA3KSBvZiB0aGVcbiAgICAvLyAgICAgICAgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byB6ZXJvIGFuZCBvbmUsIHJlc3BlY3RpdmVseS5cbiAgICAvLyAgICAgU2V0IHRoZSBmb3VyIG1vc3Qgc2lnbmlmaWNhbnQgYml0cyAoYml0cyAxMiB0aHJvdWdoIDE1KSBvZiB0aGVcbiAgICAvLyAgICAgICAgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byB0aGUgNC1iaXQgdmVyc2lvbiBudW1iZXIgZnJvbVxuICAgIC8vICAgICAgICBTZWN0aW9uIDQuMS4zLiBWZXJzaW9uNFxuICAgIC8vICAgICBTZXQgYWxsIHRoZSBvdGhlciBiaXRzIHRvIHJhbmRvbWx5IChvciBwc2V1ZG8tcmFuZG9tbHkpIGNob3NlblxuICAgIC8vICAgICB2YWx1ZXMuXG4gICAgLy8gVVVJRCAgICAgICAgICAgICAgICAgICA9IHRpbWUtbG93IFwiLVwiIHRpbWUtbWlkIFwiLVwidGltZS1oaWdoLWFuZC12ZXJzaW9uIFwiLVwiY2xvY2stc2VxLXJlc2VydmVkIGFuZCBsb3coMmhleE9jdGV0KVwiLVwiIG5vZGVcbiAgICAvLyB0aW1lLWxvdyAgICAgICAgICAgICAgID0gNGhleE9jdGV0XG4gICAgLy8gdGltZS1taWQgICAgICAgICAgICAgICA9IDJoZXhPY3RldFxuICAgIC8vIHRpbWUtaGlnaC1hbmQtdmVyc2lvbiAgPSAyaGV4T2N0ZXRcbiAgICAvLyBjbG9jay1zZXEtYW5kLXJlc2VydmVkID0gaGV4T2N0ZXQ6XG4gICAgLy8gY2xvY2stc2VxLWxvdyAgICAgICAgICA9IGhleE9jdGV0XG4gICAgLy8gbm9kZSAgICAgICAgICAgICAgICAgICA9IDZoZXhPY3RldFxuICAgIC8vIEZvcm1hdDogeHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XG4gICAgLy8geSBjb3VsZCBiZSAxMDAwLCAxMDAxLCAxMDEwLCAxMDExIHNpbmNlIG1vc3Qgc2lnbmlmaWNhbnQgdHdvIGJpdHMgbmVlZHMgdG8gYmUgMTBcbiAgICAvLyB5IHZhbHVlcyBhcmUgOCwgOSwgQSwgQlxuXG4gICAgY29uc3QgY3J5cHRvT2JqOiBDcnlwdG8gPSB3aW5kb3cuY3J5cHRvOyAvLyBmb3IgSUUgMTFcbiAgICBpZiAoY3J5cHRvT2JqICYmIGNyeXB0b09iai5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIGNvbnN0IGJ1ZmZlcjogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgIGNyeXB0b09iai5nZXRSYW5kb21WYWx1ZXMoYnVmZmVyKTtcblxuICAgICAgLy9idWZmZXJbNl0gYW5kIGJ1ZmZlcls3XSByZXByZXNlbnRzIHRoZSB0aW1lX2hpX2FuZF92ZXJzaW9uIGZpZWxkLiBXZSB3aWxsIHNldCB0aGUgZm91ciBtb3N0IHNpZ25pZmljYW50IGJpdHMgKDQgdGhyb3VnaCA3KSBvZiBidWZmZXJbNl0gdG8gcmVwcmVzZW50IGRlY2ltYWwgbnVtYmVyIDQgKFVVSUQgdmVyc2lvbiBudW1iZXIpLlxuICAgICAgYnVmZmVyWzZdIHw9IDB4NDA7IC8vYnVmZmVyWzZdIHwgMDEwMDAwMDAgd2lsbCBzZXQgdGhlIDYgYml0IHRvIDEuXG4gICAgICBidWZmZXJbNl0gJj0gMHg0ZjsgLy9idWZmZXJbNl0gJiAwMTAwMTExMSB3aWxsIHNldCB0aGUgNCwgNSwgYW5kIDcgYml0IHRvIDAgc3VjaCB0aGF0IGJpdHMgNC03ID09IDAxMDAgPSBcIjRcIi5cblxuICAgICAgLy9idWZmZXJbOF0gcmVwcmVzZW50cyB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCBmaWVsZC4gV2Ugd2lsbCBzZXQgdGhlIHR3byBtb3N0IHNpZ25pZmljYW50IGJpdHMgKDYgYW5kIDcpIG9mIHRoZSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkIHRvIHplcm8gYW5kIG9uZSwgcmVzcGVjdGl2ZWx5LlxuICAgICAgYnVmZmVyWzhdIHw9IDB4ODA7IC8vYnVmZmVyWzhdIHwgMTAwMDAwMDAgd2lsbCBzZXQgdGhlIDcgYml0IHRvIDEuXG4gICAgICBidWZmZXJbOF0gJj0gMHhiZjsgLy9idWZmZXJbOF0gJiAxMDExMTExMSB3aWxsIHNldCB0aGUgNiBiaXQgdG8gMC5cblxuICAgICAgcmV0dXJuIFV0aWxzLmRlY2ltYWxUb0hleChidWZmZXJbMF0pICsgVXRpbHMuZGVjaW1hbFRvSGV4KGJ1ZmZlclsxXSlcbiAgICAgICAgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzJdKSArIFV0aWxzLmRlY2ltYWxUb0hleChidWZmZXJbM10pXG4gICAgICAgICsgXCItXCIgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzRdKSArIFV0aWxzLmRlY2ltYWxUb0hleChidWZmZXJbNV0pXG4gICAgICAgICsgXCItXCIgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzZdKSArIFV0aWxzLmRlY2ltYWxUb0hleChidWZmZXJbN10pXG4gICAgICAgICsgXCItXCIgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzhdKSArIFV0aWxzLmRlY2ltYWxUb0hleChidWZmZXJbOV0pXG4gICAgICAgICsgXCItXCIgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzEwXSkgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzExXSlcbiAgICAgICAgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzEyXSkgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzEzXSlcbiAgICAgICAgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzE0XSkgKyBVdGlscy5kZWNpbWFsVG9IZXgoYnVmZmVyWzE1XSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgZ3VpZEhvbGRlcjogc3RyaW5nID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIjtcbiAgICAgIGNvbnN0IGhleDogc3RyaW5nID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gICAgICBsZXQgcjogbnVtYmVyID0gMDtcbiAgICAgIGxldCBndWlkUmVzcG9uc2U6IHN0cmluZyA9IFwiXCI7XG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgMzY7IGkrKykge1xuICAgICAgICBpZiAoZ3VpZEhvbGRlcltpXSAhPT0gXCItXCIgJiYgZ3VpZEhvbGRlcltpXSAhPT0gXCI0XCIpIHtcbiAgICAgICAgICAvLyBlYWNoIHggYW5kIHkgbmVlZHMgdG8gYmUgcmFuZG9tXG4gICAgICAgICAgciA9IE1hdGgucmFuZG9tKCkgICogMTYgfCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChndWlkSG9sZGVyW2ldID09PSBcInhcIikge1xuICAgICAgICAgIGd1aWRSZXNwb25zZSArPSBoZXhbcl07XG4gICAgICAgIH0gZWxzZSBpZiAoZ3VpZEhvbGRlcltpXSA9PT0gXCJ5XCIpIHtcbiAgICAgICAgICAvLyBjbG9jay1zZXEtYW5kLXJlc2VydmVkIGZpcnN0IGhleCBpcyBmaWx0ZXJlZCBhbmQgcmVtYWluaW5nIGhleCB2YWx1ZXMgYXJlIHJhbmRvbVxuICAgICAgICAgIHIgJj0gMHgzOyAvLyBiaXQgYW5kIHdpdGggMDAxMSB0byBzZXQgcG9zIDIgdG8gemVybyA/MD8/XG4gICAgICAgICAgciB8PSAweDg7IC8vIHNldCBwb3MgMyB0byAxIGFzIDE/Pz9cbiAgICAgICAgICBndWlkUmVzcG9uc2UgKz0gaGV4W3JdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGd1aWRSZXNwb25zZSArPSBndWlkSG9sZGVyW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZ3VpZFJlc3BvbnNlO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFBhcnNlcyBvdXQgdGhlIGNvbXBvbmVudHMgZnJvbSBhIHVybCBzdHJpbmcuXG4gICAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMuIFBsZWFzZSBjYWNoZSB0aGlzIHZhbHVlIGluc3RlZCBvZiBjYWxsaW5nIHRoaXMgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgdXJsLlxuICAgKi9cbiAgc3RhdGljIEdldFVybENvbXBvbmVudHModXJsOiBzdHJpbmcpOiBJVXJpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgXCJVcmwgcmVxdWlyZWRcIjtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9jdXJ0aXN6LzExMTM5YjJjZmNhZWY0YTI2MWUwXG4gICAgdmFyIHJlZ0V4ID0gUmVnRXhwKFwiXigoW146Lz8jXSspOik/KC8vKFteLz8jXSopKT8oW14/I10qKShcXFxcPyhbXiNdKikpPygjKC4qKSk/XCIpO1xuXG4gICAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKHJlZ0V4KTtcblxuICAgIGlmICghbWF0Y2ggfHwgbWF0Y2gubGVuZ3RoIDwgNikge1xuICAgICAgdGhyb3cgXCJWYWxpZCB1cmwgcmVxdWlyZWRcIjtcbiAgICB9XG5cbiAgICBsZXQgdXJsQ29tcG9uZW50cyA9IDxJVXJpPntcbiAgICAgIFByb3RvY29sOiBtYXRjaFsxXSxcbiAgICAgIEhvc3ROYW1lQW5kUG9ydDogbWF0Y2hbNF0sXG4gICAgICBBYnNvbHV0ZVBhdGg6IG1hdGNoWzVdXG4gICAgfTtcblxuICAgIGxldCBwYXRoU2VnbWVudHMgPSB1cmxDb21wb25lbnRzLkFic29sdXRlUGF0aC5zcGxpdChcIi9cIik7XG4gICAgcGF0aFNlZ21lbnRzID0gcGF0aFNlZ21lbnRzLmZpbHRlcigodmFsKSA9PiB2YWwgJiYgdmFsLmxlbmd0aCA+IDApOyAvLyByZW1vdmUgZW1wdHkgZWxlbWVudHNcbiAgICB1cmxDb21wb25lbnRzLlBhdGhTZWdtZW50cyA9IHBhdGhTZWdtZW50cztcbiAgICByZXR1cm4gdXJsQ29tcG9uZW50cztcbiAgfVxuXG4gIC8qXG4gICAqIEdpdmVuIGEgdXJsIG9yIHBhdGgsIGFwcGVuZCBhIHRyYWlsaW5nIHNsYXNoIGlmIG9uZSBkb2VzbnQgZXhpc3RcbiAgICovXG4gIHN0YXRpYyBDYW5vbmljYWxpemVVcmkodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh1cmwpIHtcbiAgICAgIHVybCA9IHVybC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICh1cmwgJiYgIVV0aWxzLmVuZHNXaXRoKHVybCwgXCIvXCIpKSB7XG4gICAgICB1cmwgKz0gXCIvXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIC8qXG4gICAgKiBDaGVja3MgdG8gc2VlIGlmIHRoZSB1cmwgZW5kcyB3aXRoIHRoZSBzdWZmaXhcbiAgICAqIFJlcXVpcmVkIGJlY2F1c2Ugd2UgYXJlIGNvbXBpbGluZyBmb3IgZXM1IGluc3RlYWQgb2YgZXM2XG4gICAgKiBAcGFyYW0gdXJsXG4gICAgKiBAcGFyYW0gc3RyXG4gICAgKi9cbiAgc3RhdGljIGVuZHNXaXRoKHVybDogc3RyaW5nLCBzdWZmaXg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICghdXJsIHx8ICFzdWZmaXgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsLmluZGV4T2Yoc3VmZml4LCB1cmwubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCkgIT09IC0xO1xuICB9XG5cbiAgICAgc3RhdGljIGNoZWNrU1NPKGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuICAhKGV4dHJhUXVlcnlQYXJhbWV0ZXJzICYmICAoKGV4dHJhUXVlcnlQYXJhbWV0ZXJzLmluZGV4T2YoQ29uc3RhbnRzLmxvZ2luX2hpbnQpICE9PSAtMSB8fCAgZXh0cmFRdWVyeVBhcmFtZXRlcnMuaW5kZXhPZihDb25zdGFudHMuc2lkKSAhPT0gLTEgKSkpO1xuICAgIH1cblxuICAgICBzdGF0aWMgY29uc3RydWN0VW5pZmllZENhY2hlRXh0cmFRdWVyeVBhcmFtZXRlcihpZFRva2VuT2JqZWN0OiBhbnksIGV4dHJhUXVlcnlQYXJhbWV0ZXJzPzogc3RyaW5nKSB7XG4gICAgICAgICBpZiAoaWRUb2tlbk9iamVjdCkge1xuICAgICAgICAgICAgIGlmIChpZFRva2VuT2JqZWN0Lmhhc093blByb3BlcnR5KENvbnN0YW50cy51cG4pKSB7XG4gICAgICAgICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gdGhpcy51cmxSZW1vdmVRdWVyeVN0cmluZ1BhcmFtZXRlcihleHRyYVF1ZXJ5UGFyYW1ldGVycywgQ29uc3RhbnRzLmxvZ2luX2hpbnQpO1xuICAgICAgICAgICAgICAgICBleHRyYVF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMudXJsUmVtb3ZlUXVlcnlTdHJpbmdQYXJhbWV0ZXIoZXh0cmFRdWVyeVBhcmFtZXRlcnMsIENvbnN0YW50cy5kb21haW5faGludCk7XG4gICAgICAgICAgICAgICAgIGlmIChleHRyYVF1ZXJ5UGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhUXVlcnlQYXJhbWV0ZXJzICs9IFwiJlwiICsgQ29uc3RhbnRzLmxvZ2luX2hpbnQgKyBcIj1cIiArIGlkVG9rZW5PYmplY3QudXBuICsgXCImXCIgKyBDb25zdGFudHMuZG9tYWluX2hpbnQgKyBcIj1cIiArIENvbnN0YW50cy5vcmdhbml6YXRpb25zO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gXCImXCIgKyBDb25zdGFudHMubG9naW5faGludCArIFwiPVwiICsgaWRUb2tlbk9iamVjdC51cG4gKyBcIiZcIiArIENvbnN0YW50cy5kb21haW5faGludCArIFwiPVwiICsgQ29uc3RhbnRzLm9yZ2FuaXphdGlvbnM7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gdGhpcy51cmxSZW1vdmVRdWVyeVN0cmluZ1BhcmFtZXRlcihleHRyYVF1ZXJ5UGFyYW1ldGVycywgQ29uc3RhbnRzLmRvbWFpbl9oaW50KTtcbiAgICAgICAgICAgICAgICAgaWYgKGV4dHJhUXVlcnlQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXh0cmFRdWVyeVBhcmFtZXRlcnMgKz0gXCImXCIgKyBDb25zdGFudHMuZG9tYWluX2hpbnQgKyBcIj1cIiArIENvbnN0YW50cy5vcmdhbml6YXRpb25zO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gXCImXCIgKyBDb25zdGFudHMuZG9tYWluX2hpbnQgKyBcIj1cIiArIENvbnN0YW50cy5vcmdhbml6YXRpb25zO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGV4dHJhUXVlcnlQYXJhbWV0ZXJzO1xuICAgICB9XG5cbiAgICAgc3RhdGljIHVybFJlbW92ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVyKHVybDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSh1cmwpKSB7XG4gICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgIH1cblxuICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIihcXFxcJlwiICsgbmFtZSArIFwiPSlbXlxcJl0rXCIpO1xuICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UocmVnZXgsIFwiXCIpO1xuICAgICAgICAgLy8gbmFtZT12YWx1ZSZcbiAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIihcIiArIG5hbWUgKyBcIj0pW15cXCZdKyZcIik7XG4gICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShyZWdleCwgXCJcIik7XG4gICAgICAgICAvLyBuYW1lPXZhbHVlXG4gICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoXCIoXCIgKyBuYW1lICsgXCI9KVteXFwmXStcIik7XG4gICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShyZWdleCwgXCJcIik7XG4gICAgICAgICByZXR1cm4gdXJsO1xuICAgICB9XG5cbn1cbiIsIi8qXG4gICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb25cbiAgKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICAqICBNSVQgTGljZW5zZVxuICAqXG4gICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICAqIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAgKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICAqIGNvbmRpdGlvbnM6XG4gICpcbiAgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICAqXG4gICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gICogT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAgKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICAqL1xuXG4vKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgQ29uc3RhbnRzIHtcbiAgc3RhdGljIGdldCBlcnJvckRlc2NyaXB0aW9uKCk6IHN0cmluZyB7IHJldHVybiBcImVycm9yX2Rlc2NyaXB0aW9uXCI7IH1cbiAgc3RhdGljIGdldCBlcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJlcnJvclwiOyB9XG4gIHN0YXRpYyBnZXQgc2NvcGUoKTogc3RyaW5nIHsgcmV0dXJuIFwic2NvcGVcIjsgfVxuICBzdGF0aWMgZ2V0IGFjcXVpcmVUb2tlblVzZXIoKTogc3RyaW5nIHsgcmV0dXJuIFwibXNhbC5hY3F1aXJlVG9rZW5Vc2VyXCI7IH1cbiAgc3RhdGljIGdldCBjbGllbnRJbmZvKCk6IHN0cmluZyB7IHJldHVybiBcImNsaWVudF9pbmZvXCI7IH1cbiAgc3RhdGljIGdldCBjbGllbnRJZCgpOiBzdHJpbmcgeyByZXR1cm4gXCJjbGllbnRJZFwiOyB9XG4gIHN0YXRpYyBnZXQgYXV0aG9yaXR5KCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwuYXV0aG9yaXR5XCI7IH1cbiAgc3RhdGljIGdldCBpZFRva2VuKCk6IHN0cmluZyB7IHJldHVybiBcImlkX3Rva2VuXCI7IH1cbiAgc3RhdGljIGdldCBhY2Nlc3NUb2tlbigpOiBzdHJpbmcgeyByZXR1cm4gXCJhY2Nlc3NfdG9rZW5cIjsgfVxuICBzdGF0aWMgZ2V0IGV4cGlyZXNJbigpOiBzdHJpbmcgeyByZXR1cm4gXCJleHBpcmVzX2luXCI7IH1cbiAgc3RhdGljIGdldCBzZXNzaW9uU3RhdGUoKTogc3RyaW5nIHsgcmV0dXJuIFwic2Vzc2lvbl9zdGF0ZVwiOyB9XG4gIHN0YXRpYyBnZXQgbXNhbENsaWVudEluZm8oKTogc3RyaW5nIHsgcmV0dXJuIFwibXNhbC5jbGllbnQuaW5mb1wiOyB9XG4gIHN0YXRpYyBnZXQgbXNhbEVycm9yKCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwuZXJyb3JcIjsgfVxuICBzdGF0aWMgZ2V0IG1zYWxFcnJvckRlc2NyaXB0aW9uKCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwuZXJyb3IuZGVzY3JpcHRpb25cIjsgfVxuICBzdGF0aWMgZ2V0IG1zYWxTZXNzaW9uU3RhdGUoKTogc3RyaW5nIHsgcmV0dXJuIFwibXNhbC5zZXNzaW9uLnN0YXRlXCI7IH1cbiAgc3RhdGljIGdldCB0b2tlbktleXMoKTogc3RyaW5nIHsgcmV0dXJuIFwibXNhbC50b2tlbi5rZXlzXCI7IH1cbiAgc3RhdGljIGdldCBhY2Nlc3NUb2tlbktleSgpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLmFjY2Vzcy50b2tlbi5rZXlcIjsgfVxuICBzdGF0aWMgZ2V0IGV4cGlyYXRpb25LZXkoKTogc3RyaW5nIHsgcmV0dXJuIFwibXNhbC5leHBpcmF0aW9uLmtleVwiOyB9XG4gIHN0YXRpYyBnZXQgc3RhdGVMb2dpbigpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLnN0YXRlLmxvZ2luXCI7IH1cbiAgc3RhdGljIGdldCBzdGF0ZUFjcXVpcmVUb2tlbigpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLnN0YXRlLmFjcXVpcmVUb2tlblwiOyB9XG4gIHN0YXRpYyBnZXQgc3RhdGVSZW5ldygpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLnN0YXRlLnJlbmV3XCI7IH1cbiAgc3RhdGljIGdldCBub25jZUlkVG9rZW4oKTogc3RyaW5nIHsgcmV0dXJuIFwibXNhbC5ub25jZS5pZHRva2VuXCI7IH1cbiAgc3RhdGljIGdldCB1c2VyTmFtZSgpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLnVzZXJuYW1lXCI7IH1cbiAgc3RhdGljIGdldCBpZFRva2VuS2V5KCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwuaWR0b2tlblwiOyB9XG4gIHN0YXRpYyBnZXQgbG9naW5SZXF1ZXN0KCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwubG9naW4ucmVxdWVzdFwiOyB9XG4gIHN0YXRpYyBnZXQgbG9naW5FcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLmxvZ2luLmVycm9yXCI7IH1cbiAgc3RhdGljIGdldCByZW5ld1N0YXR1cygpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsLnRva2VuLnJlbmV3LnN0YXR1c1wiOyB9XG4gIHN0YXRpYyBnZXQgbXNhbCgpOiBzdHJpbmcgeyByZXR1cm4gXCJtc2FsXCI7IH1cbiAgc3RhdGljIGdldCBub191c2VyKCk6IHN0cmluZyB7IHJldHVybiBcIk5PX1VTRVJcIjsgfVxuICBzdGF0aWMgZ2V0IGxvZ2luX2hpbnQoKTogc3RyaW5nIHsgcmV0dXJuIFwibG9naW5faGludFwiOyB9XG4gIHN0YXRpYyBnZXQgZG9tYWluX2hpbnQoKTogc3RyaW5nIHsgcmV0dXJuIFwiZG9tYWluX2hpbnRcIjsgfVxuICBzdGF0aWMgZ2V0IG9yZ2FuaXphdGlvbnMoKTogc3RyaW5nIHsgcmV0dXJuIFwib3JnYW5pemF0aW9uc1wiOyB9XG4gIHN0YXRpYyBnZXQgY29uc3VtZXJzKCk6IHN0cmluZyB7IHJldHVybiBcImNvbnN1bWVyc1wiOyB9XG4gIHN0YXRpYyBnZXQgY29uc3VtZXJzVXRpZCgpOiBzdHJpbmcgeyByZXR1cm4gXCI5MTg4MDQwZC02YzY3LTRjNWItYjExMi0zNmEzMDRiNjZkYWRcIjsgfVxuICBzdGF0aWMgZ2V0IHNpZCgpOiBzdHJpbmcgeyByZXR1cm4gXCJzaWRcIjsgfVxuICBzdGF0aWMgZ2V0IHVwbigpOiBzdHJpbmcgeyByZXR1cm4gXCJ1cG5cIjsgfVxuICBzdGF0aWMgZ2V0IGFkYWxJZFRva2VuKCk6IHN0cmluZyB7IHJldHVybiBcImFkYWwuaWR0b2tlblwiOyB9XG4gIHN0YXRpYyBnZXQgcHJvbXB0X3NlbGVjdF9hY2NvdW50KCk6IHN0cmluZyB7IHJldHVybiBcIiZwcm9tcHQ9c2VsZWN0X2FjY291bnRcIjsgfVxuICBzdGF0aWMgZ2V0IHByb21wdF9ub25lKCk6IHN0cmluZyB7IHJldHVybiBcIiZwcm9tcHQ9bm9uZVwiOyB9XG4gIHN0YXRpYyBnZXQgcHJvbXB0KCk6IHN0cmluZyB7IHJldHVybiBcInByb21wdFwiOyB9XG4gIHN0YXRpYyBnZXQgcmVzcG9uc2VfbW9kZV9mcmFnbWVudCgpOiBzdHJpbmcgeyByZXR1cm4gXCImcmVzcG9uc2VfbW9kZT1mcmFnbWVudFwiOyB9XG4gIHN0YXRpYyBnZXQgcmVzb3VyY2VEZWxpbWV0ZXIoKTogc3RyaW5nIHsgcmV0dXJuIFwifFwiOyB9XG4gIHN0YXRpYyBnZXQgdG9rZW5SZW5ld1N0YXR1c0NhbmNlbGxlZCgpOiBzdHJpbmcgeyByZXR1cm4gXCJDYW5jZWxlZFwiOyB9XG4gIHN0YXRpYyBnZXQgdG9rZW5SZW5ld1N0YXR1c0NvbXBsZXRlZCgpOiBzdHJpbmcgeyByZXR1cm4gXCJDb21wbGV0ZWRcIjsgfVxuICBzdGF0aWMgZ2V0IHRva2VuUmVuZXdTdGF0dXNJblByb2dyZXNzKCk6IHN0cmluZyB7IHJldHVybiBcIkluIFByb2dyZXNzXCI7IH1cbiAgcHJpdmF0ZSBzdGF0aWMgX3BvcFVwV2lkdGg6IG51bWJlciA9IDQ4MztcbiAgc3RhdGljIGdldCBwb3BVcFdpZHRoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9wb3BVcFdpZHRoOyB9XG4gIHN0YXRpYyBzZXQgcG9wVXBXaWR0aCh3aWR0aDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcG9wVXBXaWR0aCA9IHdpZHRoO1xuICB9XG4gIHByaXZhdGUgc3RhdGljIF9wb3BVcEhlaWdodDogbnVtYmVyID0gNjAwO1xuICBzdGF0aWMgZ2V0IHBvcFVwSGVpZ2h0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9wb3BVcEhlaWdodDsgfVxuICBzdGF0aWMgc2V0IHBvcFVwSGVpZ2h0KGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcG9wVXBIZWlnaHQgPSBoZWlnaHQ7XG4gIH1cbiAgc3RhdGljIGdldCBsb2dpbigpOiBzdHJpbmcgeyByZXR1cm4gXCJMT0dJTlwiOyB9XG4gIHN0YXRpYyBnZXQgcmVuZXdUb2tlbigpOiBzdHJpbmcgeyByZXR1cm4gXCJSRU5FV19UT0tFTlwiOyB9XG4gIHN0YXRpYyBnZXQgdW5rbm93bigpOiBzdHJpbmcgeyByZXR1cm4gXCJVTktOT1dOXCI7IH1cbiAgc3RhdGljIGdldCB1cmxIYXNoKCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwudXJsSGFzaFwiOyB9XG4gICAgc3RhdGljIGdldCBhbmd1bGFyTG9naW5SZXF1ZXN0KCk6IHN0cmluZyB7IHJldHVybiBcIm1zYWwuYW5ndWxhci5sb2dpbi5yZXF1ZXN0XCI7IH1cbiAgICBzdGF0aWMgZ2V0IHVzZXJJZGVudGlmaWVyKCk6IHN0cmluZyB7IHJldHVybiBcInVzZXJJZGVudGlmaWVyXCI7IH1cbiAgICBzdGF0aWMgZ2V0IGNvbW1vbigpOiBzdHJpbmcgeyByZXR1cm4gXCJjb21tb25cIjsgfVxufVxuXG4vKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JDb2RlcyB7XG4gIHN0YXRpYyBnZXQgbG9naW5Qcm9ncmVzc0Vycm9yKCk6IHN0cmluZyB7IHJldHVybiBcImxvZ2luX3Byb2dyZXNzX2Vycm9yXCI7IH1cbiAgc3RhdGljIGdldCBhY3F1aXJlVG9rZW5Qcm9ncmVzc0Vycm9yKCk6IHN0cmluZyB7IHJldHVybiBcImFjcXVpcmV0b2tlbl9wcm9ncmVzc19lcnJvclwiOyB9XG4gIHN0YXRpYyBnZXQgaW5wdXRTY29wZXNFcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJpbnB1dF9zY29wZXNfZXJyb3JcIjsgfVxuICBzdGF0aWMgZ2V0IGVuZHBvaW50UmVzb2x1dGlvbkVycm9yKCk6IHN0cmluZyB7IHJldHVybiBcImVuZHBvaW50c19yZXNvbHV0aW9uX2Vycm9yXCI7IH1cbiAgc3RhdGljIGdldCBwb3BVcFdpbmRvd0Vycm9yKCk6IHN0cmluZyB7IHJldHVybiBcInBvcHVwX3dpbmRvd19lcnJvclwiOyB9XG4gIHN0YXRpYyBnZXQgdXNlckxvZ2luRXJyb3IoKTogc3RyaW5nIHsgcmV0dXJuIFwidXNlcl9sb2dpbl9lcnJvclwiOyB9XG4gIHN0YXRpYyBnZXQgdXNlckNhbmNlbGxlZEVycm9yKCk6IHN0cmluZyB7IHJldHVybiBcInVzZXJfY2FuY2VsbGVkXCI7IH1cbn1cblxuLypcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yRGVzY3JpcHRpb24ge1xuICBzdGF0aWMgZ2V0IGxvZ2luUHJvZ3Jlc3NFcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJMb2dpbiBpcyBpbiBwcm9ncmVzc1wiOyB9XG4gIHN0YXRpYyBnZXQgYWNxdWlyZVRva2VuUHJvZ3Jlc3NFcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJBY3F1aXJlIHRva2VuIGlzIGluIHByb2dyZXNzXCI7IH1cbiAgc3RhdGljIGdldCBpbnB1dFNjb3Blc0Vycm9yKCk6IHN0cmluZyB7IHJldHVybiBcIkludmFsaWQgdmFsdWUgb2YgaW5wdXQgc2NvcGVzIHByb3ZpZGVkXCI7IH1cbiAgc3RhdGljIGdldCBlbmRwb2ludFJlc29sdXRpb25FcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJFbmRwb2ludHMgY2Fubm90IGJlIHJlc29sdmVkXCI7IH1cbiAgc3RhdGljIGdldCBwb3BVcFdpbmRvd0Vycm9yKCk6IHN0cmluZyB7IHJldHVybiBcIkVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93LiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSB1c2luZyBJRSBvciBpZiBwb3B1cHMgYXJlIGJsb2NrZWQgaW4gdGhlIGJyb3dzZXIuXCI7IH1cbiAgc3RhdGljIGdldCB1c2VyTG9naW5FcnJvcigpOiBzdHJpbmcgeyByZXR1cm4gXCJVc2VyIGxvZ2luIGlzIHJlcXVpcmVkXCI7IH1cbiAgc3RhdGljIGdldCB1c2VyQ2FuY2VsbGVkRXJyb3IoKTogc3RyaW5nIHsgcmV0dXJuIFwiVXNlciBjbG9zZWQgdGhlIHBvcHVwIHdpbmRvdyBhbmQgY2FuY2VsbGVkIHRoZSBmbG93XCI7IH1cblxufVxuIiwiaW1wb3J0IHsgSVVyaSB9IGZyb20gXCIuL0lVcmlcIjtcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4vVXRpbHNcIjtcbmltcG9ydCB7IElUZW5hbnREaXNjb3ZlcnlSZXNwb25zZSB9IGZyb20gXCIuL0lUZW5hbnREaXNjb3ZlcnlSZXNwb25zZVwiO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSBcIi4vRXJyb3JNZXNzYWdlXCI7XG5pbXBvcnQgeyBYaHJDbGllbnQgfSBmcm9tIFwiLi9YSFJDbGllbnRcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCBSaWdodHMgUmVzZXJ2ZWRcbiAqICBNSVQgTGljZW5zZVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xuICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gKiBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUXG4gKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cblxuLypcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGVudW0gQXV0aG9yaXR5VHlwZSB7XG4gIEFhZCxcbiAgQWRmcyxcbiAgQjJDXG59XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdXRob3JpdHkge1xuICBjb25zdHJ1Y3RvcihhdXRob3JpdHk6IHN0cmluZywgdmFsaWRhdGVBdXRob3JpdHk6IGJvb2xlYW4pIHtcbiAgICB0aGlzLklzVmFsaWRhdGlvbkVuYWJsZWQgPSB2YWxpZGF0ZUF1dGhvcml0eTtcbiAgICB0aGlzLkNhbm9uaWNhbEF1dGhvcml0eSA9IGF1dGhvcml0eTtcblxuICAgIHRoaXMudmFsaWRhdGVBc1VyaSgpO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IGdldCBBdXRob3JpdHlUeXBlKCk6IEF1dGhvcml0eVR5cGU7XG5cbiAgcHVibGljIElzVmFsaWRhdGlvbkVuYWJsZWQ6IGJvb2xlYW47XG5cbiAgcHVibGljIGdldCBUZW5hbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5DYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzLlBhdGhTZWdtZW50c1swXTtcbiAgfVxuXG4gIHByaXZhdGUgdGVuYW50RGlzY292ZXJ5UmVzcG9uc2U6IElUZW5hbnREaXNjb3ZlcnlSZXNwb25zZTtcblxuICBwdWJsaWMgZ2V0IEF1dGhvcml6YXRpb25FbmRwb2ludCgpOiBzdHJpbmcge1xuICAgIHRoaXMudmFsaWRhdGVSZXNvbHZlZCgpO1xuICAgIHJldHVybiB0aGlzLnRlbmFudERpc2NvdmVyeVJlc3BvbnNlLkF1dGhvcml6YXRpb25FbmRwb2ludC5yZXBsYWNlKFwie3RlbmFudH1cIiwgdGhpcy5UZW5hbnQpO1xuICB9XG5cbiAgcHVibGljIGdldCBFbmRTZXNzaW9uRW5kcG9pbnQoKTogc3RyaW5nIHtcbiAgICB0aGlzLnZhbGlkYXRlUmVzb2x2ZWQoKTtcbiAgICByZXR1cm4gdGhpcy50ZW5hbnREaXNjb3ZlcnlSZXNwb25zZS5FbmRTZXNzaW9uRW5kcG9pbnQucmVwbGFjZShcInt0ZW5hbnR9XCIsIHRoaXMuVGVuYW50KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgU2VsZlNpZ25lZEp3dEF1ZGllbmNlKCk6IHN0cmluZyB7XG4gICAgdGhpcy52YWxpZGF0ZVJlc29sdmVkKCk7XG4gICAgcmV0dXJuIHRoaXMudGVuYW50RGlzY292ZXJ5UmVzcG9uc2UuSXNzdWVyLnJlcGxhY2UoXCJ7dGVuYW50fVwiLCB0aGlzLlRlbmFudCk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlUmVzb2x2ZWQoKSB7XG4gICAgaWYgKCF0aGlzLnRlbmFudERpc2NvdmVyeVJlc3BvbnNlKSB7XG4gICAgICB0aHJvdyBcIlBsZWFzZSBjYWxsIFJlc29sdmVFbmRwb2ludHNBc3luYyBmaXJzdFwiO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIEEgVVJMIHRoYXQgaXMgdGhlIGF1dGhvcml0eSBzZXQgYnkgdGhlIGRldmVsb3BlclxuICAgKi9cbiAgcHVibGljIGdldCBDYW5vbmljYWxBdXRob3JpdHkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jYW5vbmljYWxBdXRob3JpdHk7XG4gIH1cblxuICBwdWJsaWMgc2V0IENhbm9uaWNhbEF1dGhvcml0eSh1cmw6IHN0cmluZykge1xuICAgIHRoaXMuY2Fub25pY2FsQXV0aG9yaXR5ID0gVXRpbHMuQ2Fub25pY2FsaXplVXJpKHVybCk7XG4gICAgdGhpcy5jYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgY2Fub25pY2FsQXV0aG9yaXR5OiBzdHJpbmc7XG4gIHByaXZhdGUgY2Fub25pY2FsQXV0aG9yaXR5VXJsQ29tcG9uZW50czogSVVyaTtcblxuICBwdWJsaWMgZ2V0IENhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMoKTogSVVyaSB7XG4gICAgaWYgKCF0aGlzLmNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMpIHtcbiAgICAgIHRoaXMuY2Fub25pY2FsQXV0aG9yaXR5VXJsQ29tcG9uZW50cyA9IFV0aWxzLkdldFVybENvbXBvbmVudHModGhpcy5DYW5vbmljYWxBdXRob3JpdHkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHM7XG4gIH1cblxuICAvKlxuICAgKiAvLyBodHRwOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1kaXNjb3ZlcnktMV8wLmh0bWwjUHJvdmlkZXJNZXRhZGF0YVxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBEZWZhdWx0T3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuQ2Fub25pY2FsQXV0aG9yaXR5fXYyLjAvLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb25gO1xuICB9XG5cbiAgLypcbiAgICogR2l2ZW4gYSBzdHJpbmcsIHZhbGlkYXRlIHRoYXQgaXQgaXMgb2YgdGhlIGZvcm0gaHR0cHM6Ly9kb21haW4vcGF0aFxuICAgKi9cbiAgcHJpdmF0ZSB2YWxpZGF0ZUFzVXJpKCkge1xuICAgIGxldCBjb21wb25lbnRzO1xuICAgIHRyeSB7XG4gICAgICBjb21wb25lbnRzID0gdGhpcy5DYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IEVycm9yTWVzc2FnZS5pbnZhbGlkQXV0aG9yaXR5VHlwZTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbXBvbmVudHMuUHJvdG9jb2wgfHwgY29tcG9uZW50cy5Qcm90b2NvbC50b0xvd2VyQ2FzZSgpICE9PSBcImh0dHBzOlwiKSB7XG4gICAgICB0aHJvdyBFcnJvck1lc3NhZ2UuYXV0aG9yaXR5VXJpSW5zZWN1cmU7XG4gICAgfVxuXG4gICAgaWYgKCFjb21wb25lbnRzLlBhdGhTZWdtZW50cyB8fCBjb21wb25lbnRzLlBhdGhTZWdtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvdyBFcnJvck1lc3NhZ2UuYXV0aG9yaXR5VXJpSW52YWxpZFBhdGg7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogQ2FsbHMgdGhlIE9JREMgZW5kcG9pbnQgYW5kIHJldHVybnMgdGhlIHJlc3BvbnNlXG4gICAqL1xuICBwcml2YXRlIERpc2NvdmVyRW5kcG9pbnRzKG9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludDogc3RyaW5nKTogUHJvbWlzZTxJVGVuYW50RGlzY292ZXJ5UmVzcG9uc2U+IHtcbiAgICBsZXQgY2xpZW50ID0gbmV3IFhockNsaWVudCgpO1xuICAgIHJldHVybiBjbGllbnQuc2VuZFJlcXVlc3RBc3luYyhvcGVuSWRDb25maWd1cmF0aW9uRW5kcG9pbnQsIFwiR0VUXCIsIC8qZW5hYmxlQ2FjaGluZzogKi8gdHJ1ZSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8SVRlbmFudERpc2NvdmVyeVJlc3BvbnNlPntcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uRW5kcG9pbnQ6IHJlc3BvbnNlLmF1dGhvcml6YXRpb25fZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgRW5kU2Vzc2lvbkVuZHBvaW50OiByZXNwb25zZS5lbmRfc2Vzc2lvbl9lbmRwb2ludCxcbiAgICAgICAgICAgICAgICBJc3N1ZXI6IHJlc3BvbnNlLmlzc3VlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZS5cbiAgICogQ2hlY2tzIHRvIHNlZSBpZiB0aGUgYXV0aG9yaXR5IGlzIGluIHRoZSBjYWNoZVxuICAgKiBEaXNjb3ZlciBlbmRwb2ludHMgdmlhIG9wZW5pZC1jb25maWd1cmF0aW9uXG4gICAqIElmIHN1Y2Nlc3NmdWwsIGNhY2hlcyB0aGUgZW5kcG9pbnQgZm9yIGxhdGVyIHVzZSBpbiBPSURDXG4gICAqL1xuICBwdWJsaWMgUmVzb2x2ZUVuZHBvaW50c0FzeW5jKCk6IFByb21pc2U8QXV0aG9yaXR5PiB7XG4gICAgbGV0IG9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludCA9IFwiXCI7XG4gICAgcmV0dXJuIHRoaXMuR2V0T3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50QXN5bmMoKS50aGVuKG9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludFJlc3BvbnNlID0+IHtcbiAgICAgIG9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludCA9IG9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludFJlc3BvbnNlO1xuICAgICAgcmV0dXJuIHRoaXMuRGlzY292ZXJFbmRwb2ludHMob3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50KTtcbiAgICB9KS50aGVuKCh0ZW5hbnREaXNjb3ZlcnlSZXNwb25zZTogSVRlbmFudERpc2NvdmVyeVJlc3BvbnNlKSA9PiB7XG4gICAgICB0aGlzLnRlbmFudERpc2NvdmVyeVJlc3BvbnNlID0gdGVuYW50RGlzY292ZXJ5UmVzcG9uc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9KTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIFRlbmFudERpc2NvdmVyeUVuZHBvaW50XG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgR2V0T3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50QXN5bmMoKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCBSaWdodHMgUmVzZXJ2ZWRcbiAqICBNSVQgTGljZW5zZVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xuICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gKiBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUXG4gKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTG9nZ2VyQ2FsbGJhY2sge1xuICAobGV2ZWw6IExvZ0xldmVsLCBtZXNzYWdlOiBzdHJpbmcsIGNvbnRhaW5zUGlpOiBib29sZWFuKTogdm9pZDtcbn1cblxuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBFcnJvcixcbiAgV2FybmluZyxcbiAgSW5mbyxcbiAgVmVyYm9zZVxufVxuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHsvLyBTaW5nbGV0b24gQ2xhc3NcblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IExvZ2dlcjtcblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIF9jb3JyZWxhdGlvbklkOiBzdHJpbmc7XG5cbiAgLypcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBfbGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuSW5mbztcblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIF9waWlMb2dnaW5nRW5hYmxlZDogYm9vbGVhbjtcblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIF9sb2NhbENhbGxiYWNrOiBJTG9nZ2VyQ2FsbGJhY2s7XG5cbiAgY29uc3RydWN0b3IobG9jYWxDYWxsYmFjazogSUxvZ2dlckNhbGxiYWNrLFxuICAgICAgb3B0aW9uczpcbiAgICAgIHtcbiAgICAgICAgICBjb3JyZWxhdGlvbklkPzogc3RyaW5nLFxuICAgICAgICAgIGxldmVsPzogTG9nTGV2ZWwsXG4gICAgICAgICAgcGlpTG9nZ2luZ0VuYWJsZWQ/OiBib29sZWFuLFxuICAgICAgfSA9IHt9KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgY29ycmVsYXRpb25JZCA9IFwiXCIsXG4gICAgICAgICAgbGV2ZWwgPSBMb2dMZXZlbC5JbmZvLFxuICAgICAgICAgIHBpaUxvZ2dpbmdFbmFibGVkID0gZmFsc2VcbiAgICAgIH0gPSBvcHRpb25zO1xuXG4gICAgICB0aGlzLl9sb2NhbENhbGxiYWNrID0gbG9jYWxDYWxsYmFjaztcbiAgICAgIHRoaXMuX2NvcnJlbGF0aW9uSWQgPSBjb3JyZWxhdGlvbklkO1xuICAgICAgdGhpcy5fbGV2ZWwgPSBsZXZlbDtcbiAgICAgIHRoaXMuX3BpaUxvZ2dpbmdFbmFibGVkID0gcGlpTG9nZ2luZ0VuYWJsZWQ7XG4gIH1cblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIGxvZ01lc3NhZ2UobG9nTGV2ZWw6IExvZ0xldmVsLCBsb2dNZXNzYWdlOiBzdHJpbmcsIGNvbnRhaW5zUGlpOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKChsb2dMZXZlbCA+IHRoaXMuX2xldmVsKSB8fCAoIXRoaXMuX3BpaUxvZ2dpbmdFbmFibGVkICYmIGNvbnRhaW5zUGlpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b1VUQ1N0cmluZygpO1xuICAgIHZhciBsb2c6IHN0cmluZztcbiAgICBpZiAoIVV0aWxzLmlzRW1wdHkodGhpcy5fY29ycmVsYXRpb25JZCkpIHtcbiAgICAgIGxvZyA9IHRpbWVzdGFtcCArIFwiOlwiICsgdGhpcy5fY29ycmVsYXRpb25JZCArIFwiLVwiICsgVXRpbHMuZ2V0TGlicmFyeVZlcnNpb24oKSArIFwiLVwiICsgTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCIgXCIgKyBsb2dNZXNzYWdlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxvZyA9IHRpbWVzdGFtcCArIFwiOlwiICsgVXRpbHMuZ2V0TGlicmFyeVZlcnNpb24oKSArIFwiLVwiICsgTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCIgXCIgKyBsb2dNZXNzYWdlO1xuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGVDYWxsYmFjayhsb2dMZXZlbCwgbG9nLCBjb250YWluc1BpaSk7XG4gIH1cblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBleGVjdXRlQ2FsbGJhY2sobGV2ZWw6IExvZ0xldmVsLCBtZXNzYWdlOiBzdHJpbmcsIGNvbnRhaW5zUGlpOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuX2xvY2FsQ2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX2xvY2FsQ2FsbGJhY2sobGV2ZWwsIG1lc3NhZ2UsIGNvbnRhaW5zUGlpKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBlcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ01lc3NhZ2UoTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UsIGZhbHNlKTtcbiAgfVxuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIGVycm9yUGlpKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubG9nTWVzc2FnZShMb2dMZXZlbC5FcnJvciwgbWVzc2FnZSwgdHJ1ZSk7XG4gIH1cblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICB3YXJuaW5nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubG9nTWVzc2FnZShMb2dMZXZlbC5XYXJuaW5nLCBtZXNzYWdlLCBmYWxzZSk7XG4gIH1cblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICB3YXJuaW5nUGlpKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubG9nTWVzc2FnZShMb2dMZXZlbC5XYXJuaW5nLCBtZXNzYWdlLCB0cnVlKTtcbiAgfVxuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIGluZm8obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sb2dNZXNzYWdlKExvZ0xldmVsLkluZm8sIG1lc3NhZ2UsIGZhbHNlKTtcbiAgfVxuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIGluZm9QaWkobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sb2dNZXNzYWdlKExvZ0xldmVsLkluZm8sIG1lc3NhZ2UsIHRydWUpO1xuICB9XG5cbiAgLypcbiAgICogQGhpZGRlblxuICAgKi9cbiAgdmVyYm9zZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ01lc3NhZ2UoTG9nTGV2ZWwuVmVyYm9zZSwgbWVzc2FnZSwgZmFsc2UpO1xuICB9XG5cbiAgLypcbiAgICogQGhpZGRlblxuICAgKi9cbiAgdmVyYm9zZVBpaShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ01lc3NhZ2UoTG9nTGV2ZWwuVmVyYm9zZSwgbWVzc2FnZSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qXG4gICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb25cbiAgKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICAqICBNSVQgTGljZW5zZVxuICAqXG4gICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICAqIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAgKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICAqIGNvbmRpdGlvbnM6XG4gICpcbiAgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICAqXG4gICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gICogT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAgKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICAqL1xuXG4vKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JNZXNzYWdlIHtcbiAgc3RhdGljIGdldCBhdXRob3JpdHlVcmlJbnZhbGlkUGF0aCgpOiBzdHJpbmcgeyByZXR1cm4gXCJBdXRob3JpdHlVcmlJbnZhbGlkUGF0aFwiOyB9XG4gIHN0YXRpYyBnZXQgYXV0aG9yaXR5VXJpSW5zZWN1cmUoKTogc3RyaW5nIHsgcmV0dXJuIFwiQXV0aG9yaXR5VXJpSW5zZWN1cmVcIjsgfVxuICBzdGF0aWMgZ2V0IGludmFsaWRBdXRob3JpdHlUeXBlKCk6IHN0cmluZyB7IHJldHVybiBcIkludmFsaWRBdXRob3JpdHlUeXBlXCI7IH1cbiAgc3RhdGljIGdldCB1bnN1cHBvcnRlZEF1dGhvcml0eVZhbGlkYXRpb24oKTogc3RyaW5nIHsgcmV0dXJuIFwiVW5zdXBwb3J0ZWRBdXRob3JpdHlWYWxpZGF0aW9uXCI7IH1cbiAgc3RhdGljIGdldCBiMmNBdXRob3JpdHlVcmlJbnZhbGlkUGF0aCgpOiBzdHJpbmcgeyByZXR1cm4gXCJCMmNBdXRob3JpdHlVcmlJbnZhbGlkUGF0aFwiOyB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgQWNjZXNzVG9rZW5DYWNoZUl0ZW0gfSBmcm9tIFwiLi9BY2Nlc3NUb2tlbkNhY2hlSXRlbVwiO1xuaW1wb3J0IHsgQWNjZXNzVG9rZW5LZXkgfSBmcm9tIFwiLi9BY2Nlc3NUb2tlbktleVwiO1xuaW1wb3J0IHsgQWNjZXNzVG9rZW5WYWx1ZSB9IGZyb20gXCIuL0FjY2Vzc1Rva2VuVmFsdWVcIjtcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMgfSBmcm9tIFwiLi9BdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBBdXRob3JpdHkgfSBmcm9tIFwiLi9BdXRob3JpdHlcIjtcbmltcG9ydCB7IENsaWVudEluZm8gfSBmcm9tIFwiLi9DbGllbnRJbmZvXCI7XG5pbXBvcnQgeyBDb25zdGFudHMsIEVycm9yQ29kZXMsIEVycm9yRGVzY3JpcHRpb24gfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmltcG9ydCB7IElkVG9rZW4gfSBmcm9tIFwiLi9JZFRva2VuXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi9Mb2dnZXJcIjtcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tIFwiLi9TdG9yYWdlXCI7XG5pbXBvcnQgeyBUb2tlblJlc3BvbnNlIH0gZnJvbSBcIi4vUmVxdWVzdEluZm9cIjtcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi9Vc2VyXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL1V0aWxzXCI7XG5pbXBvcnQgeyBBdXRob3JpdHlGYWN0b3J5IH0gZnJvbSBcIi4vQXV0aG9yaXR5RmFjdG9yeVwiO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgICAgIG1zYWw6IE9iamVjdDtcbiAgICAgICAgQ3VzdG9tRXZlbnQ6IEN1c3RvbUV2ZW50O1xuICAgICAgICBFdmVudDogRXZlbnQ7XG4gICAgICAgIGFjdGl2ZVJlbmV3YWxzOiB7fTtcbiAgICAgICAgcmVuZXdTdGF0ZXM6IEFycmF5PHN0cmluZz47XG4gICAgICAgIGNhbGxCYWNrTWFwcGVkVG9SZW5ld1N0YXRlcyA6IHt9O1xuICAgICAgICBjYWxsQmFja3NNYXBwZWRUb1JlbmV3U3RhdGVzOiB7fTtcbiAgICAgICAgb3BlbmVkV2luZG93czogQXJyYXk8V2luZG93PjtcbiAgICAgICAgcmVxdWVzdFR5cGU6IHN0cmluZztcbiAgICB9XG59XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmxldCBSZXNwb25zZVR5cGVzID0ge1xuICBpZF90b2tlbjogXCJpZF90b2tlblwiLFxuICB0b2tlbjogXCJ0b2tlblwiLFxuICBpZF90b2tlbl90b2tlbjogXCJpZF90b2tlbiB0b2tlblwiXG59O1xuXG4vKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlUmVzdWx0IHtcbiAgZXJyb3JEZXNjOiBzdHJpbmc7XG4gIHRva2VuOiBzdHJpbmc7XG4gIGVycm9yOiBzdHJpbmc7XG59XG5cbi8qXG4gKiBBIHR5cGUgYWxpYXMgb2YgZm9yIGEgdG9rZW5SZWNlaXZlZENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHRva2VuUmVjZWl2ZWRDYWxsYmFjay5lcnJvckRlc2MgZXJyb3IgZGVzY3JpcHRpb24gcmV0dXJuZWQgZnJvbSB0aGUgU1RTIGlmIEFQSSBjYWxsIGZhaWxzLlxuICogQHBhcmFtIHRva2VuUmVjZWl2ZWRDYWxsYmFjay50b2tlbiB0b2tlbiByZXR1cm5lZCBmcm9tIFNUUyBpZiB0b2tlbiByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWwuXG4gKiBAcGFyYW0gdG9rZW5SZWNlaXZlZENhbGxiYWNrLmVycm9yIGVycm9yIGNvZGUgcmV0dXJuZWQgZnJvbSB0aGUgU1RTIGlmIEFQSSBjYWxsIGZhaWxzLlxuICogQHBhcmFtIHRva2VuUmVjZWl2ZWRDYWxsYmFjay50b2tlblR5cGUgdG9rZW5UeXBlIHJldHVybmVkIGZyb20gdGhlIFNUUyBpZiBBUEkgY2FsbCBpcyBzdWNjZXNzZnVsLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOiBpZF90b2tlbiBPUiBhY2Nlc3NfdG9rZW4uXG4gKi9cbmV4cG9ydCB0eXBlIHRva2VuUmVjZWl2ZWRDYWxsYmFjayA9IChlcnJvckRlc2M6IHN0cmluZywgdG9rZW46IHN0cmluZywgZXJyb3I6IHN0cmluZywgdG9rZW5UeXBlOiBzdHJpbmcsIHVzZXJTdGF0ZTogc3RyaW5nICkgPT4gdm9pZDtcbmNvbnN0IHJlc29sdmVUb2tlbk9ubHlJZk91dE9mSWZyYW1lID0gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcbiAgY29uc3QgdG9rZW5BY3F1aXNpdGlvbk1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pIHtcbiAgICAgIHJldHVybiB0aGlzLmlzSW5JZnJhbWUoKVxuICAgICAgICAgID8gbmV3IFByb21pc2UoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgOiB0b2tlbkFjcXVpc2l0aW9uTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5leHBvcnQgY2xhc3MgVXNlckFnZW50QXBwbGljYXRpb24ge1xuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgX2NhY2hlTG9jYXRpb25zID0ge1xuICAgIGxvY2FsU3RvcmFnZTogXCJsb2NhbFN0b3JhZ2VcIixcbiAgICBzZXNzaW9uU3RvcmFnZTogXCJzZXNzaW9uU3RvcmFnZVwiXG4gIH07XG5cbiAgLypcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBfY2FjaGVMb2NhdGlvbjogc3RyaW5nO1xuXG4gIC8qXG4gICAqIFVzZWQgdG8gZ2V0IHRoZSBjYWNoZSBsb2NhdGlvblxuICAgKi9cbiAgZ2V0IGNhY2hlTG9jYXRpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVMb2NhdGlvbjtcbiAgfVxuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByb3RlY3RlZCBfbG9nZ2VyOiBMb2dnZXI7XG5cbiAgLypcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBfbG9naW5JblByb2dyZXNzOiBib29sZWFuO1xuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3M6IGJvb2xlYW47XG5cbiAgLypcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBfY2xvY2tTa2V3ID0gMzAwO1xuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByb3RlY3RlZCBfY2FjaGVTdG9yYWdlOiBTdG9yYWdlO1xuXG4gIC8qXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgX3Rva2VuUmVjZWl2ZWRDYWxsYmFjazogdG9rZW5SZWNlaXZlZENhbGxiYWNrID0gbnVsbDtcblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIF91c2VyOiBVc2VyO1xuXG4gIC8qXG4gICAqIENsaWVudCBJRCBhc3NpZ25lZCB0byB5b3VyIGFwcCBieSBBenVyZSBBY3RpdmUgRGlyZWN0b3J5LlxuICAgKi9cbiAgY2xpZW50SWQ6IHN0cmluZztcblxuICAvKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcm90ZWN0ZWQgYXV0aG9yaXR5SW5zdGFuY2U6IEF1dGhvcml0eTtcblxuICAvKlxuICAgKiBVc2VkIHRvIHNldCB0aGUgYXV0aG9yaXR5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aG9yaXR5IC0gQSBVUkwgaW5kaWNhdGluZyBhIGRpcmVjdG9yeSB0aGF0IE1TQUwgY2FuIHVzZSB0byBvYnRhaW4gdG9rZW5zLlxuICAgKiAtIEluIEF6dXJlIEFELCBpdCBpcyBvZiB0aGUgZm9ybSBodHRwczovLyZsdDt0ZW5hbnQmZ3Q7LyZsdDt0ZW5hbnQmZ3Q7LCB3aGVyZSAmbHQ7dGVuYW50Jmd0OyBpcyB0aGUgZGlyZWN0b3J5IGhvc3QgKGUuZy4gaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tKSBhbmQgJmx0O3RlbmFudCZndDsgaXMgYSBpZGVudGlmaWVyIHdpdGhpbiB0aGUgZGlyZWN0b3J5IGl0c2VsZiAoZS5nLiBhIGRvbWFpbiBhc3NvY2lhdGVkIHRvIHRoZSB0ZW5hbnQsIHN1Y2ggYXMgY29udG9zby5vbm1pY3Jvc29mdC5jb20sIG9yIHRoZSBHVUlEIHJlcHJlc2VudGluZyB0aGUgVGVuYW50SUQgcHJvcGVydHkgb2YgdGhlIGRpcmVjdG9yeSlcbiAgICogLSBJbiBBenVyZSBCMkMsIGl0IGlzIG9mIHRoZSBmb3JtIGh0dHBzOi8vJmx0O2luc3RhbmNlJmd0Oy90ZnAvJmx0O3RlbmFudCZndDsvPHBvbGljeU5hbWU+L1xuICAgKiAtIERlZmF1bHQgdmFsdWUgaXM6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vblwiXG4gICAqL1xuICBwdWJsaWMgc2V0IGF1dGhvcml0eSh2YWwpIHtcbiAgICB0aGlzLmF1dGhvcml0eUluc3RhbmNlID0gQXV0aG9yaXR5RmFjdG9yeS5DcmVhdGVJbnN0YW5jZSh2YWwsIHRoaXMudmFsaWRhdGVBdXRob3JpdHkpO1xuICB9XG5cbiAgLypcbiAgICogVXNlZCB0byBnZXQgdGhlIGF1dGhvcml0eS5cbiAgICovXG4gIHB1YmxpYyBnZXQgYXV0aG9yaXR5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aG9yaXR5SW5zdGFuY2UuQ2Fub25pY2FsQXV0aG9yaXR5O1xuICB9XG5cbiAgLypcbiAgICogVXNlZCB0byB0dXJuIGF1dGhvcml0eSB2YWxpZGF0aW9uIG9uL29mZi5cbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSAoZGVmYXVsdCksIE1TQUwgd2lsbCBjb21wYXJlIHRoZSBhcHBsaWNhdGlvblwicyBhdXRob3JpdHkgYWdhaW5zdCB3ZWxsLWtub3duIFVSTHMgdGVtcGxhdGVzIHJlcHJlc2VudGluZyB3ZWxsLWZvcm1lZCBhdXRob3JpdGllcy4gSXQgaXMgdXNlZnVsIHdoZW4gdGhlIGF1dGhvcml0eSBpcyBvYnRhaW5lZCBhdCBydW4gdGltZSB0byBwcmV2ZW50IE1TQUwgZnJvbSBkaXNwbGF5aW5nIGF1dGhlbnRpY2F0aW9uIHByb21wdHMgZnJvbSBtYWxpY2lvdXMgcGFnZXMuXG4gICAqL1xuICB2YWxpZGF0ZUF1dGhvcml0eTogYm9vbGVhbjtcblxuICAvKlxuICAgKiBUaGUgcmVkaXJlY3QgVVJJIG9mIHRoZSBhcHBsaWNhdGlvbiwgdGhpcyBzaG91bGQgYmUgc2FtZSBhcyB0aGUgdmFsdWUgaW4gdGhlIGFwcGxpY2F0aW9uIHJlZ2lzdHJhdGlvbiBwb3J0YWwuXG4gICAqIERlZmF1bHRzIHRvIGB3aW5kb3cubG9jYXRpb24uaHJlZmAuXG4gICAqL1xuICBwcml2YXRlIF9yZWRpcmVjdFVyaTogc3RyaW5nIHwgKCgpID0+IHN0cmluZyk7XG5cbiAgICAvKlxuICAgICAqIFVzZSB0byBzZW5kIHRoZSBzdGF0ZSBwYXJhbWV0ZXIgd2l0aCBhdXRoZW50aWNhdGlvbiByZXF1ZXN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBfc3RhdGU6IHN0cmluZztcbiAgLypcbiAgICogVXNlZCB0byByZWRpcmVjdCB0aGUgdXNlciB0byB0aGlzIGxvY2F0aW9uIGFmdGVyIGxvZ291dC5cbiAgICogRGVmYXVsdHMgdG8gYHdpbmRvdy5sb2NhdGlvbi5ocmVmYC5cbiAgICovXG4gIHByaXZhdGUgX3Bvc3RMb2dvdXRyZWRpcmVjdFVyaTogc3RyaW5nIHwgKCgpID0+IHN0cmluZyk7XG5cbiAgbG9hZEZyYW1lVGltZW91dDogbnVtYmVyO1xuXG4gIHByb3RlY3RlZCBfbmF2aWdhdGVUb0xvZ2luUmVxdWVzdFVybDogYm9vbGVhbjtcblxuICBwcml2YXRlIF9pc0FuZ3VsYXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIF9wcm90ZWN0ZWRSZXNvdXJjZU1hcDogTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj47XG5cbiAgcHJpdmF0ZSBfdW5wcm90ZWN0ZWRSZXNvdXJjZXM6IEFycmF5PHN0cmluZz47XG5cbiAgcHJpdmF0ZSBzdG9yZUF1dGhTdGF0ZUluQ29va2llOiBib29sZWFuO1xuXG4gIHByaXZhdGUgX3NpbGVudEF1dGhlbnRpY2F0aW9uU3RhdGU6IHN0cmluZztcblxuICBwcml2YXRlIF9zaWxlbnRMb2dpbjogYm9vbGVhbjtcbiAgLypcbiAgICogSW5pdGlhbGl6ZSBhIFVzZXJBZ2VudEFwcGxpY2F0aW9uIHdpdGggYSBnaXZlbiBjbGllbnRJZCBhbmQgYXV0aG9yaXR5LlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkIC0gVGhlIGNsaWVudElEIG9mIHlvdXIgYXBwbGljYXRpb24sIHlvdSBzaG91bGQgZ2V0IHRoaXMgZnJvbSB0aGUgYXBwbGljYXRpb24gcmVnaXN0cmF0aW9uIHBvcnRhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhvcml0eSAtIEEgVVJMIGluZGljYXRpbmcgYSBkaXJlY3RvcnkgdGhhdCBNU0FMIGNhbiB1c2UgdG8gb2J0YWluIHRva2Vucy5cbiAgICogLSBJbiBBenVyZSBBRCwgaXQgaXMgb2YgdGhlIGZvcm0gaHR0cHM6Ly8mbHQ7aW5zdGFuY2U+LyZsdDt0ZW5hbnQmZ3Q7LFxcIHdoZXJlICZsdDtpbnN0YW5jZSZndDsgaXMgdGhlIGRpcmVjdG9yeSBob3N0IChlLmcuIGh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbSkgYW5kICZsdDt0ZW5hbnQmZ3Q7IGlzIGEgaWRlbnRpZmllciB3aXRoaW4gdGhlIGRpcmVjdG9yeSBpdHNlbGYgKGUuZy4gYSBkb21haW4gYXNzb2NpYXRlZCB0byB0aGUgdGVuYW50LCBzdWNoIGFzIGNvbnRvc28ub25taWNyb3NvZnQuY29tLCBvciB0aGUgR1VJRCByZXByZXNlbnRpbmcgdGhlIFRlbmFudElEIHByb3BlcnR5IG9mIHRoZSBkaXJlY3RvcnkpXG4gICAqIC0gSW4gQXp1cmUgQjJDLCBpdCBpcyBvZiB0aGUgZm9ybSBodHRwczovLyZsdDtpbnN0YW5jZSZndDsvdGZwLyZsdDt0ZW5hbnRJZCZndDsvJmx0O3BvbGljeU5hbWUmZ3Q7L1xuICAgKiAtIERlZmF1bHQgdmFsdWUgaXM6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vblwiXG4gICAqIEBwYXJhbSBfdG9rZW5SZWNlaXZlZENhbGxiYWNrIC0gIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgZ2V0IHRoZSBjYWxsIGJhY2sgb25jZSB0aGlzIEFQSSBpcyBjb21wbGV0ZWQgKGVpdGhlciBzdWNjZXNzZnVsbHkgb3Igd2l0aCBhIGZhaWx1cmUpLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbGlkYXRlQXV0aG9yaXR5IC0gIGJvb2xlYW4gdG8gdHVybiBhdXRob3JpdHkgdmFsaWRhdGlvbiBvbi9vZmYuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnRJZDogc3RyaW5nLFxuICAgIGF1dGhvcml0eTogc3RyaW5nIHwgbnVsbCxcbiAgICB0b2tlblJlY2VpdmVkQ2FsbGJhY2s6IHRva2VuUmVjZWl2ZWRDYWxsYmFjayxcbiAgICBvcHRpb25zOlxuICAgICAge1xuICAgICAgICB2YWxpZGF0ZUF1dGhvcml0eT86IGJvb2xlYW4sXG4gICAgICAgIGNhY2hlTG9jYXRpb24/OiBzdHJpbmcsXG4gICAgICAgIHJlZGlyZWN0VXJpPzogc3RyaW5nIHwgKCgpID0+IHN0cmluZyksXG4gICAgICAgIHBvc3RMb2dvdXRSZWRpcmVjdFVyaT86IHN0cmluZyB8ICgoKSA9PiBzdHJpbmcpLFxuICAgICAgICBsb2dnZXI/OiBMb2dnZXIsXG4gICAgICAgIGxvYWRGcmFtZVRpbWVvdXQ/OiBudW1iZXIsXG4gICAgICAgIG5hdmlnYXRlVG9Mb2dpblJlcXVlc3RVcmw/OiBib29sZWFuLFxuICAgICAgICBzdGF0ZT86IHN0cmluZyxcbiAgICAgICAgaXNBbmd1bGFyPzogYm9vbGVhbixcbiAgICAgICAgdW5wcm90ZWN0ZWRSZXNvdXJjZXM/OiBBcnJheTxzdHJpbmc+XG4gICAgICAgIHByb3RlY3RlZFJlc291cmNlTWFwPzogTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj4sXG4gICAgICAgIHN0b3JlQXV0aFN0YXRlSW5Db29raWU/OiBib29sZWFuXG4gICAgICB9ID0ge30pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgICB2YWxpZGF0ZUF1dGhvcml0eSA9IHRydWUsXG4gICAgICAgICAgY2FjaGVMb2NhdGlvbiA9IFwic2Vzc2lvblN0b3JhZ2VcIixcbiAgICAgICAgICByZWRpcmVjdFVyaSA9ICgpID0+IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KFwiP1wiKVswXS5zcGxpdChcIiNcIilbMF0sXG4gICAgICAgICAgcG9zdExvZ291dFJlZGlyZWN0VXJpID0gKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoXCI/XCIpWzBdLnNwbGl0KFwiI1wiKVswXSxcbiAgICAgICAgICBsb2dnZXIgPSBuZXcgTG9nZ2VyKG51bGwpLFxuICAgICAgICAgIGxvYWRGcmFtZVRpbWVvdXQgPSA2MDAwLFxuICAgICAgICAgIG5hdmlnYXRlVG9Mb2dpblJlcXVlc3RVcmwgPSB0cnVlLFxuICAgICAgICAgIHN0YXRlID0gXCJcIixcbiAgICAgICAgICBpc0FuZ3VsYXIgPSBmYWxzZSxcbiAgICAgICAgICB1bnByb3RlY3RlZFJlc291cmNlcyA9IG5ldyBBcnJheTxzdHJpbmc+KCksXG4gICAgICAgICAgcHJvdGVjdGVkUmVzb3VyY2VNYXAgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj4oKSxcbiAgICAgICAgICBzdG9yZUF1dGhTdGF0ZUluQ29va2llID0gZmFsc2VcbiAgICAgIH0gPSBvcHRpb25zO1xuXG4gICAgdGhpcy5sb2FkRnJhbWVUaW1lb3V0ID0gbG9hZEZyYW1lVGltZW91dDtcbiAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgdGhpcy52YWxpZGF0ZUF1dGhvcml0eSA9IHZhbGlkYXRlQXV0aG9yaXR5O1xuICAgIHRoaXMuYXV0aG9yaXR5ID0gYXV0aG9yaXR5IHx8IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vblwiO1xuICAgIHRoaXMuX3Rva2VuUmVjZWl2ZWRDYWxsYmFjayA9IHRva2VuUmVjZWl2ZWRDYWxsYmFjaztcbiAgICB0aGlzLl9yZWRpcmVjdFVyaSA9IHJlZGlyZWN0VXJpO1xuICAgIHRoaXMuX3Bvc3RMb2dvdXRyZWRpcmVjdFVyaSA9IHBvc3RMb2dvdXRSZWRpcmVjdFVyaTtcbiAgICB0aGlzLl9sb2dpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLl9hY3F1aXJlVG9rZW5JblByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5fY2FjaGVMb2NhdGlvbiA9IGNhY2hlTG9jYXRpb247XG4gICAgdGhpcy5fbmF2aWdhdGVUb0xvZ2luUmVxdWVzdFVybCA9IG5hdmlnYXRlVG9Mb2dpblJlcXVlc3RVcmw7XG4gICAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLl9pc0FuZ3VsYXIgPSBpc0FuZ3VsYXI7XG4gICAgdGhpcy5fdW5wcm90ZWN0ZWRSZXNvdXJjZXMgPSB1bnByb3RlY3RlZFJlc291cmNlcztcbiAgICB0aGlzLl9wcm90ZWN0ZWRSZXNvdXJjZU1hcCA9IHByb3RlY3RlZFJlc291cmNlTWFwO1xuICAgIGlmICghdGhpcy5fY2FjaGVMb2NhdGlvbnNbY2FjaGVMb2NhdGlvbl0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhY2hlIExvY2F0aW9uIGlzIG5vdCB2YWxpZC4gUHJvdmlkZWQgdmFsdWU6XCIgKyB0aGlzLl9jYWNoZUxvY2F0aW9uICsgXCIuUG9zc2libGUgdmFsdWVzIGFyZTogXCIgKyB0aGlzLl9jYWNoZUxvY2F0aW9ucy5sb2NhbFN0b3JhZ2UgKyBcIiwgXCIgKyB0aGlzLl9jYWNoZUxvY2F0aW9ucy5zZXNzaW9uU3RvcmFnZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FjaGVTdG9yYWdlID0gbmV3IFN0b3JhZ2UodGhpcy5fY2FjaGVMb2NhdGlvbik7IC8vY2FjaGUga2V5cyBtc2FsXG4gICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSA9IHN0b3JlQXV0aFN0YXRlSW5Db29raWU7XG4gICAgd2luZG93Lm9wZW5lZFdpbmRvd3MgPSBbXTtcbiAgICB3aW5kb3cuYWN0aXZlUmVuZXdhbHMgPSB7fTtcbiAgICB3aW5kb3cucmVuZXdTdGF0ZXMgPSBbXTtcbiAgICB3aW5kb3cuY2FsbEJhY2tNYXBwZWRUb1JlbmV3U3RhdGVzID0geyB9O1xuICAgIHdpbmRvdy5jYWxsQmFja3NNYXBwZWRUb1JlbmV3U3RhdGVzID0geyB9O1xuICAgIHdpbmRvdy5tc2FsID0gdGhpcztcbiAgICB2YXIgdXJsSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgIHZhciBpc0NhbGxiYWNrID0gdGhpcy5pc0NhbGxiYWNrKHVybEhhc2gpO1xuXG4gICAgaWYgKCF0aGlzLl9pc0FuZ3VsYXIpIHtcbiAgICAgICAgaWYgKGlzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQXV0aGVudGljYXRpb25SZXNwb25zZS5jYWxsKHRoaXMsIHVybEhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBlbmRpbmdDYWxsYmFjayA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy51cmxIYXNoKTtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NDYWxsQmFjayhwZW5kaW5nQ2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogVXNlZCB0byBjYWxsIHRoZSBjb25zdHJ1Y3RvciBjYWxsYmFjayB3aXRoIHRoZSB0b2tlbi9lcnJvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2hhc2g9d2luZG93LmxvY2F0aW9uLmhhc2hdIC0gSGFzaCBmcmFnbWVudCBvZiBVcmwuXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgcHJvY2Vzc0NhbGxCYWNrKGhhc2g6IHN0cmluZyk6IHZvaWQge1xuICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJQcm9jZXNzaW5nIHRoZSBjYWxsYmFjayBmcm9tIHJlZGlyZWN0IHJlc3BvbnNlXCIpO1xuICAgICAgY29uc3QgcmVxdWVzdEluZm8gPSB0aGlzLmdldFJlcXVlc3RJbmZvKGhhc2gpO1xuICAgICAgdGhpcy5zYXZlVG9rZW5Gcm9tSGFzaChyZXF1ZXN0SW5mbyk7XG4gICAgICBjb25zdCB0b2tlbiA9IHJlcXVlc3RJbmZvLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmFjY2Vzc1Rva2VuXSB8fCByZXF1ZXN0SW5mby5wYXJhbWV0ZXJzW0NvbnN0YW50cy5pZFRva2VuXTtcbiAgICAgIGNvbnN0IGVycm9yRGVzYyA9IHJlcXVlc3RJbmZvLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yRGVzY3JpcHRpb25dO1xuICAgICAgY29uc3QgZXJyb3IgPSByZXF1ZXN0SW5mby5wYXJhbWV0ZXJzW0NvbnN0YW50cy5lcnJvcl07XG4gICAgICB2YXIgdG9rZW5UeXBlOiBzdHJpbmc7XG5cbiAgICAgIGlmIChyZXF1ZXN0SW5mby5wYXJhbWV0ZXJzW0NvbnN0YW50cy5hY2Nlc3NUb2tlbl0pIHtcbiAgICAgICAgICB0b2tlblR5cGUgPSBDb25zdGFudHMuYWNjZXNzVG9rZW47XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgICB0b2tlblR5cGUgPSBDb25zdGFudHMuaWRUb2tlbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnJlbW92ZUl0ZW0oQ29uc3RhbnRzLnVybEhhc2gpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAgIGlmICh0aGlzLl90b2tlblJlY2VpdmVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLmNsZWFyQ29va2llKCk7XG4gICAgICAgICAgICAgIHRoaXMuX3Rva2VuUmVjZWl2ZWRDYWxsYmFjay5jYWxsKHRoaXMsIGVycm9yRGVzYywgdG9rZW4sIGVycm9yLCB0b2tlblR5cGUsICB0aGlzLmdldFVzZXJTdGF0ZSh0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMuc3RhdGVMb2dpbiwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKSkpO1xuICAgICAgICAgIH1cblxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiRXJyb3Igb2NjdXJyZWQgaW4gdG9rZW4gcmVjZWl2ZWQgY2FsbGJhY2sgZnVuY3Rpb246IFwiICsgZXJyKTtcbiAgICAgIH1cbiAgfVxuXG5cbiAgLypcbiAgICogVXNlZCB0byBnZXQgdGhlIHJlZGlyZWN0IHVyaS4gRXZhbHVhdGVzIHJlZGlyZWN0VXJpIGlmIGl0cyBhIGZ1bmN0aW9uLCBvdGhlcndpc2Ugc2ltcGx5IHJldHVybnMgaXRzIHZhbHVlLlxuICAgKiBAaWdub3JlXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgZ2V0UmVkaXJlY3RVcmkoKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3JlZGlyZWN0VXJpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdFVyaSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3RVcmk7XG4gIH1cblxuXG4gIC8qXG4gICAqIFVzZWQgdG8gZ2V0IHRoZSBwb3N0IGxvZ291dCByZWRpcmVjdCB1cmkuIEV2YWx1YXRlcyBwb3N0TG9nb3V0cmVkaXJlY3RVcmkgaWYgaXRzIGEgZnVuY3Rpb24sIG90aGVyd2lzZSBzaW1wbHkgcmV0dXJucyBpdHMgdmFsdWUuXG4gICAqIEBpZ25vcmVcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBnZXRQb3N0TG9nb3V0UmVkaXJlY3RVcmkoKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3Bvc3RMb2dvdXRyZWRpcmVjdFVyaSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcG9zdExvZ291dHJlZGlyZWN0VXJpKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wb3N0TG9nb3V0cmVkaXJlY3RVcmk7XG4gIH1cblxuXG4gIC8qXG4gICAqIEluaXRpYXRlIHRoZSBsb2dpbiBwcm9jZXNzIGJ5IHJlZGlyZWN0aW5nIHRoZSB1c2VyIHRvIHRoZSBTVFMgYXV0aG9yaXphdGlvbiBlbmRwb2ludC5cbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gc2NvcGVzIC0gUGVybWlzc2lvbnMgeW91IHdhbnQgaW5jbHVkZWQgaW4gdGhlIGFjY2VzcyB0b2tlbi4gTm90IGFsbCBzY29wZXMgYXJlIGd1YXJhbnRlZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGFjY2VzcyB0b2tlbiByZXR1cm5lZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4dHJhUXVlcnlQYXJhbWV0ZXJzIC0gS2V5LXZhbHVlIHBhaXJzIHRvIHBhc3MgdG8gdGhlIGF1dGhlbnRpY2F0aW9uIHNlcnZlciBkdXJpbmcgdGhlIGludGVyYWN0aXZlIGF1dGhlbnRpY2F0aW9uIGZsb3cuXG4gICAqL1xuICBsb2dpblJlZGlyZWN0KHNjb3Blcz86IEFycmF5PHN0cmluZz4sIGV4dHJhUXVlcnlQYXJhbWV0ZXJzPzogc3RyaW5nKTogdm9pZCB7XG4gICAgLypcbiAgICAxLiBDcmVhdGUgbmF2aWdhdGUgdXJsXG4gICAgMi4gc2F2ZXMgdmFsdWUgaW4gY2FjaGVcbiAgICAzLiByZWRpcmVjdCB1c2VyIHRvIEFBRFxuICAgICAqL1xuICAgIGlmICh0aGlzLl9sb2dpbkluUHJvZ3Jlc3MpIHtcbiAgICAgIGlmICh0aGlzLl90b2tlblJlY2VpdmVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuUmVjZWl2ZWRDYWxsYmFjayhFcnJvckRlc2NyaXB0aW9uLmxvZ2luUHJvZ3Jlc3NFcnJvciwgbnVsbCwgRXJyb3JDb2Rlcy5sb2dpblByb2dyZXNzRXJyb3IsIENvbnN0YW50cy5pZFRva2VuLCB0aGlzLmdldFVzZXJTdGF0ZSh0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMuc3RhdGVMb2dpbiwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNjb3Blcykge1xuICAgICAgY29uc3QgaXNWYWxpZFNjb3BlID0gdGhpcy52YWxpZGF0ZUlucHV0U2NvcGUoc2NvcGVzKTtcbiAgICAgIGlmIChpc1ZhbGlkU2NvcGUgJiYgIVV0aWxzLmlzRW1wdHkoaXNWYWxpZFNjb3BlKSkge1xuICAgICAgICAgIGlmICh0aGlzLl90b2tlblJlY2VpdmVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgdGhpcy5fdG9rZW5SZWNlaXZlZENhbGxiYWNrKEVycm9yRGVzY3JpcHRpb24uaW5wdXRTY29wZXNFcnJvciwgbnVsbCwgRXJyb3JDb2Rlcy5pbnB1dFNjb3Blc0Vycm9yLCBDb25zdGFudHMuaWRUb2tlbiwgdGhpcy5nZXRVc2VyU3RhdGUodGhpcy5fY2FjaGVTdG9yYWdlLmdldEl0ZW0oQ29uc3RhbnRzLnN0YXRlTG9naW4sIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSkpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNjb3BlcyA9IHRoaXMuZmlsdGVyU2NvcGVzKHNjb3Blcyk7XG4gICAgfVxuXG4gICAgICB2YXIgaWRUb2tlbk9iamVjdDtcbiAgICAgIGlkVG9rZW5PYmplY3QgPSB0aGlzLmV4dHJhY3RBREFMSWRUb2tlbigpO1xuICAgICAgaWYgKGlkVG9rZW5PYmplY3QgJiYgIXNjb3Blcykge1xuICAgICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiQURBTCdzIGlkVG9rZW4gZXhpc3RzLiBFeHRyYWN0aW5nIGxvZ2luIGluZm9ybWF0aW9uIGZyb20gQURBTCdzIGlkVG9rZW4gXCIpO1xuICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gVXRpbHMuY29uc3RydWN0VW5pZmllZENhY2hlRXh0cmFRdWVyeVBhcmFtZXRlcihpZFRva2VuT2JqZWN0LCBleHRyYVF1ZXJ5UGFyYW1ldGVycyk7XG4gICAgICAgICAgdGhpcy5fc2lsZW50TG9naW4gPSB0cnVlO1xuICAgICAgICAgIHRoaXMuYWNxdWlyZVRva2VuU2lsZW50KFt0aGlzLmNsaWVudElkXSwgdGhpcy5hdXRob3JpdHksIHRoaXMuZ2V0VXNlcigpLCBleHRyYVF1ZXJ5UGFyYW1ldGVycylcbiAgICAgICAgICAgICAgLnRoZW4oKGlkVG9rZW4pID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbGVudExvZ2luID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuaW5mbyhcIlVuaWZpZWQgY2FjaGUgY2FsbCBpcyBzdWNjZXNzZnVsXCIpO1xuICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rva2VuUmVjZWl2ZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rva2VuUmVjZWl2ZWRDYWxsYmFjay5jYWxsKHRoaXMsIG51bGwsIGlkVG9rZW4sIG51bGwsIENvbnN0YW50cy5pZFRva2VuLCB0aGlzLmdldFVzZXJTdGF0ZSh0aGlzLl9zaWxlbnRBdXRoZW50aWNhdGlvblN0YXRlKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fc2lsZW50TG9naW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcIkVycm9yIG9jY3VycmVkIGR1cmluZyB1bmlmaWVkIGNhY2hlIEFUU1wiKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMubG9naW5SZWRpcmVjdEhlbHBlcihzY29wZXMsIGV4dHJhUXVlcnlQYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvZ2luUmVkaXJlY3RIZWxwZXIoc2NvcGVzLCBleHRyYVF1ZXJ5UGFyYW1ldGVycyk7XG4gICAgICB9XG4gIH1cblxuICBwcml2YXRlIGxvZ2luUmVkaXJlY3RIZWxwZXIoc2NvcGVzPzogQXJyYXk8c3RyaW5nPiwgZXh0cmFRdWVyeVBhcmFtZXRlcnM/OiBzdHJpbmcpIHtcbiAgICAgIHRoaXMuX2xvZ2luSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICB0aGlzLmF1dGhvcml0eUluc3RhbmNlLlJlc29sdmVFbmRwb2ludHNBc3luYygpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBhdXRoZW50aWNhdGlvblJlcXVlc3QgPSBuZXcgQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycyh0aGlzLmF1dGhvcml0eUluc3RhbmNlLCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMuaWRfdG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICAgICAgICBpZiAoZXh0cmFRdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5leHRyYVF1ZXJ5UGFyYW1ldGVycyA9IGV4dHJhUXVlcnlQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGxvZ2luU3RhcnRQYWdlID0gdGhpcy5fY2FjaGVTdG9yYWdlLmdldEl0ZW0oQ29uc3RhbnRzLmFuZ3VsYXJMb2dpblJlcXVlc3QpO1xuICAgICAgICAgICAgICBpZiAoIWxvZ2luU3RhcnRQYWdlIHx8IGxvZ2luU3RhcnRQYWdlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICBsb2dpblN0YXJ0UGFnZSA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLmFuZ3VsYXJMb2dpblJlcXVlc3QsIFwiXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLmxvZ2luUmVxdWVzdCwgbG9naW5TdGFydFBhZ2UsIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSk7XG4gICAgICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5sb2dpbkVycm9yLCBcIlwiKTtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLnN0YXRlTG9naW4sIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZSwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKTtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm5vbmNlSWRUb2tlbiwgYXV0aGVudGljYXRpb25SZXF1ZXN0Lm5vbmNlLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpO1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yLCBcIlwiKTtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm1zYWxFcnJvckRlc2NyaXB0aW9uLCBcIlwiKTtcbiAgICAgICAgICAgICAgY29uc3QgYXV0aG9yaXR5S2V5ID0gQ29uc3RhbnRzLmF1dGhvcml0eSArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oYXV0aG9yaXR5S2V5LCB0aGlzLmF1dGhvcml0eSwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKTtcbiAgICAgICAgICAgICAgY29uc3QgdXJsTmF2aWdhdGUgPSBhdXRoZW50aWNhdGlvblJlcXVlc3QuY3JlYXRlTmF2aWdhdGVVcmwoc2NvcGVzKSAgKyBDb25zdGFudHMucmVzcG9uc2VfbW9kZV9mcmFnbWVudDtcbiAgICAgICAgICAgICAgdGhpcy5wcm9tcHRVc2VyKHVybE5hdmlnYXRlKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIC8qXG4gICAqIEluaXRpYXRlIHRoZSBsb2dpbiBwcm9jZXNzIGJ5IG9wZW5pbmcgYSBwb3B1cCB3aW5kb3cuXG4gICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IHNjb3BlcyAtIFBlcm1pc3Npb25zIHlvdSB3YW50IGluY2x1ZGVkIGluIHRoZSBhY2Nlc3MgdG9rZW4uIE5vdCBhbGwgc2NvcGVzIGFyZSAgZ3VhcmFudGVlZCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgYWNjZXNzIHRva2VuIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0cmFRdWVyeVBhcmFtZXRlcnMgLSBLZXktdmFsdWUgcGFpcnMgdG8gcGFzcyB0byB0aGUgU1RTIGR1cmluZyB0aGUgaW50ZXJhY3RpdmUgYXV0aGVudGljYXRpb24gZmxvdy5cbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0cmluZz59IC0gQSBQcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gdGhpcyBmdW5jdGlvbiBoYXMgY29tcGxldGVkLCBvciByZWplY3RlZCBpZiBhbiBlcnJvciB3YXMgcmFpc2VkLiBSZXR1cm5zIHRoZSB0b2tlbiBvciBlcnJvci5cbiAgICovXG4gIGxvZ2luUG9wdXAoc2NvcGVzID86IEFycmF5PHN0cmluZz4sIGV4dHJhUXVlcnlQYXJhbWV0ZXJzPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvKlxuICAgIDEuIENyZWF0ZSBuYXZpZ2F0ZSB1cmxcbiAgICAyLiBzYXZlcyB2YWx1ZSBpbiBjYWNoZVxuICAgIDMuIHJlZGlyZWN0IHVzZXIgdG8gQUFEXG4gICAgICovXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2xvZ2luSW5Qcm9ncmVzcykge1xuICAgICAgICByZWplY3QoRXJyb3JDb2Rlcy5sb2dpblByb2dyZXNzRXJyb3IgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBFcnJvckRlc2NyaXB0aW9uLmxvZ2luUHJvZ3Jlc3NFcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjb3Blcykge1xuICAgICAgICBjb25zdCBpc1ZhbGlkU2NvcGUgPSB0aGlzLnZhbGlkYXRlSW5wdXRTY29wZShzY29wZXMpO1xuICAgICAgICBpZiAoaXNWYWxpZFNjb3BlICYmICFVdGlscy5pc0VtcHR5KGlzVmFsaWRTY29wZSkpIHtcbiAgICAgICAgICByZWplY3QoRXJyb3JDb2Rlcy5pbnB1dFNjb3Blc0Vycm9yICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgRXJyb3JEZXNjcmlwdGlvbi5pbnB1dFNjb3Blc0Vycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZXMgPSB0aGlzLmZpbHRlclNjb3BlcyhzY29wZXMpO1xuICAgICAgfVxuXG4gICAgICAgIHZhciBpZFRva2VuT2JqZWN0O1xuICAgICAgICBpZFRva2VuT2JqZWN0ID0gdGhpcy5leHRyYWN0QURBTElkVG9rZW4oKTtcbiAgICAgICAgaWYgKGlkVG9rZW5PYmplY3QgJiYgIXNjb3Blcykge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJBREFMJ3MgaWRUb2tlbiBleGlzdHMuIEV4dHJhY3RpbmcgbG9naW4gaW5mb3JtYXRpb24gZnJvbSBBREFMJ3MgaWRUb2tlbiBcIik7XG4gICAgICAgICAgICBleHRyYVF1ZXJ5UGFyYW1ldGVycyA9IFV0aWxzLmNvbnN0cnVjdFVuaWZpZWRDYWNoZUV4dHJhUXVlcnlQYXJhbWV0ZXIoaWRUb2tlbk9iamVjdCwgZXh0cmFRdWVyeVBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgdGhpcy5fc2lsZW50TG9naW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hY3F1aXJlVG9rZW5TaWxlbnQoW3RoaXMuY2xpZW50SWRdLCB0aGlzLmF1dGhvcml0eSwgdGhpcy5nZXRVc2VyKCksIGV4dHJhUXVlcnlQYXJhbWV0ZXJzKVxuICAgICAgICAgICAgICAgIC50aGVuKChpZFRva2VuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbGVudExvZ2luID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiVW5pZmllZCBjYWNoZSBjYWxsIGlzIHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaWRUb2tlbik7XG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbGVudExvZ2luID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcIkVycm9yIG9jY3VycmVkIGR1cmluZyB1bmlmaWVkIGNhY2hlIEFUU1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dpblBvcHVwSGVscGVyKHJlc29sdmUsIHJlamVjdCwgc2NvcGVzLCBleHRyYVF1ZXJ5UGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dpblBvcHVwSGVscGVyKHJlc29sdmUsIHJlamVjdCwgc2NvcGVzLCBleHRyYVF1ZXJ5UGFyYW1ldGVycyApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbG9naW5Qb3B1cEhlbHBlciggcmVzb2x2ZTogYW55ICwgcmVqZWN0OiBhbnksIHNjb3BlczogQXJyYXk8c3RyaW5nPiwgZXh0cmFRdWVyeVBhcmFtZXRlcnM/OiBzdHJpbmcpIHtcbiAgICAgIC8vVE9ETyB3aHkgdGhpcyBpcyBuZWVkZWQgb25seSBmb3IgbG9naW5wb3B1cFxuICAgICAgaWYgKCFzY29wZXMpIHtcbiAgICAgICAgICBzY29wZXMgPSBbdGhpcy5jbGllbnRJZF07XG4gICAgICB9XG4gICAgICBjb25zdCBzY29wZSA9IHNjb3Blcy5qb2luKFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHBvcFVwV2luZG93ID0gdGhpcy5vcGVuV2luZG93KFwiYWJvdXQ6YmxhbmtcIiwgXCJfYmxhbmtcIiwgMSwgdGhpcywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIGlmICghcG9wVXBXaW5kb3cpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2xvZ2luSW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICAgIHRoaXMuYXV0aG9yaXR5SW5zdGFuY2UuUmVzb2x2ZUVuZHBvaW50c0FzeW5jKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnModGhpcy5hdXRob3JpdHlJbnN0YW5jZSwgdGhpcy5jbGllbnRJZCwgc2NvcGVzLCBSZXNwb25zZVR5cGVzLmlkX3Rva2VuLCB0aGlzLmdldFJlZGlyZWN0VXJpKCksIHRoaXMuX3N0YXRlKTtcbiAgICAgICAgICBpZiAoZXh0cmFRdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0LmV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gZXh0cmFRdWVyeVBhcmFtZXRlcnM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLmxvZ2luUmVxdWVzdCwgd2luZG93LmxvY2F0aW9uLmhyZWYsIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSk7XG4gICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLmxvZ2luRXJyb3IsIFwiXCIpO1xuICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5ub25jZUlkVG9rZW4sIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5ub25jZSwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKTtcbiAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yLCBcIlwiKTtcbiAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yRGVzY3JpcHRpb24sIFwiXCIpO1xuICAgICAgICAgIGNvbnN0IGF1dGhvcml0eUtleSA9IENvbnN0YW50cy5hdXRob3JpdHkgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGU7XG4gICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oYXV0aG9yaXR5S2V5LCB0aGlzLmF1dGhvcml0eSwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKTtcbiAgICAgICAgICBjb25zdCB1cmxOYXZpZ2F0ZSA9IGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5jcmVhdGVOYXZpZ2F0ZVVybChzY29wZXMpICArIENvbnN0YW50cy5yZXNwb25zZV9tb2RlX2ZyYWdtZW50O1xuICAgICAgICAgIHdpbmRvdy5yZW5ld1N0YXRlcy5wdXNoKGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZSk7XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RUeXBlID0gQ29uc3RhbnRzLmxvZ2luO1xuICAgICAgICAgIHRoaXMucmVnaXN0ZXJDYWxsYmFjayhhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGUsIHNjb3BlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIGlmIChwb3BVcFdpbmRvdykge1xuICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuaW5mb1BpaShcIk5hdmlnYXRlZCBQb3B1cCB3aW5kb3cgdG86XCIgKyB1cmxOYXZpZ2F0ZSk7XG4gICAgICAgICAgICAgIHBvcFVwV2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmxOYXZpZ2F0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICB0aGlzLl9sb2dnZXIuaW5mbyhFcnJvckNvZGVzLmVuZHBvaW50UmVzb2x1dGlvbkVycm9yICsgXCI6XCIgKyBFcnJvckRlc2NyaXB0aW9uLmVuZHBvaW50UmVzb2x1dGlvbkVycm9yKTtcbiAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yLCBFcnJvckNvZGVzLmVuZHBvaW50UmVzb2x1dGlvbkVycm9yKTtcbiAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yRGVzY3JpcHRpb24sIEVycm9yRGVzY3JpcHRpb24uZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IpO1xuICAgICAgICAgIGlmIChyZWplY3QpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KEVycm9yQ29kZXMuZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IgKyBcIjpcIiArIEVycm9yRGVzY3JpcHRpb24uZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwb3BVcFdpbmRvdykge1xuICAgICAgICAgICAgICBwb3BVcFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICB0aGlzLl9sb2dnZXIud2FybmluZyhcImNvdWxkIG5vdCByZXNvbHZlIGVuZHBvaW50c1wiKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLypcbiAgICAqIFVzZWQgdG8gcmVkaXJlY3QgdGhlIGJyb3dzZXIgdG8gdGhlIFNUUyBhdXRob3JpemF0aW9uIGVuZHBvaW50XG4gICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsTmF2aWdhdGUgLSBVUkwgb2YgdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnRcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICBwcml2YXRlIHByb21wdFVzZXIodXJsTmF2aWdhdGU6IHN0cmluZykge1xuICAgICAgaWYgKHVybE5hdmlnYXRlICYmICFVdGlscy5pc0VtcHR5KHVybE5hdmlnYXRlKSkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmluZm9QaWkoXCJOYXZpZ2F0ZSB0bzpcIiArIHVybE5hdmlnYXRlKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHVybE5hdmlnYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJOYXZpZ2F0ZSB1cmwgaXMgZW1wdHlcIik7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogVXNlZCB0byBzZW5kIHRoZSB1c2VyIHRvIHRoZSByZWRpcmVjdF91cmkgYWZ0ZXIgYXV0aGVudGljYXRpb24gaXMgY29tcGxldGUuIFRoZSB1c2VyXCJzIGJlYXJlciB0b2tlbiBpcyBhdHRhY2hlZCB0byB0aGUgVVJJIGZyYWdtZW50IGFzIGFuIGlkX3Rva2VuL2FjY2Vzc190b2tlbiBmaWVsZC5cbiAgICogVGhpcyBmdW5jdGlvbiBhbHNvIGNsb3NlcyB0aGUgcG9wdXAgd2luZG93IGFmdGVyIHJlZGlyZWN0aW9uLlxuICAgKiBAaGlkZGVuXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHByaXZhdGUgb3BlbldpbmRvdyh1cmxOYXZpZ2F0ZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBpbnRlcnZhbDogbnVtYmVyLCBpbnN0YW5jZTogdGhpcywgcmVzb2x2ZT86IEZ1bmN0aW9uLCByZWplY3Q/OiBGdW5jdGlvbik6IFdpbmRvdyB7XG4gICAgdmFyIHBvcHVwV2luZG93ID0gdGhpcy5vcGVuUG9wdXAodXJsTmF2aWdhdGUsIHRpdGxlLCBDb25zdGFudHMucG9wVXBXaWR0aCwgQ29uc3RhbnRzLnBvcFVwSGVpZ2h0KTtcbiAgICBpZiAocG9wdXBXaW5kb3cgPT0gbnVsbCkge1xuICAgICAgaW5zdGFuY2UuX2xvZ2luSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKEVycm9yQ29kZXMucG9wVXBXaW5kb3dFcnJvciArIFwiOlwiICsgRXJyb3JEZXNjcmlwdGlvbi5wb3BVcFdpbmRvd0Vycm9yKTtcbiAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5tc2FsRXJyb3IsIEVycm9yQ29kZXMucG9wVXBXaW5kb3dFcnJvcik7XG4gICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yRGVzY3JpcHRpb24sIEVycm9yRGVzY3JpcHRpb24ucG9wVXBXaW5kb3dFcnJvcik7XG4gICAgICBpZiAocmVqZWN0KSB7XG4gICAgICAgIHJlamVjdChFcnJvckNvZGVzLnBvcFVwV2luZG93RXJyb3IgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBFcnJvckRlc2NyaXB0aW9uLnBvcFVwV2luZG93RXJyb3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgd2luZG93Lm9wZW5lZFdpbmRvd3MucHVzaChwb3B1cFdpbmRvdyk7XG4gICAgdmFyIHBvbGxUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAocG9wdXBXaW5kb3cgJiYgcG9wdXBXaW5kb3cuY2xvc2VkICYmIGluc3RhbmNlLl9sb2dpbkluUHJvZ3Jlc3MpIHtcbiAgICAgICAgaWYgKHJlamVjdCkge1xuICAgICAgICAgIHJlamVjdChFcnJvckNvZGVzLnVzZXJDYW5jZWxsZWRFcnJvciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIEVycm9yRGVzY3JpcHRpb24udXNlckNhbmNlbGxlZEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChwb2xsVGltZXIpO1xuICAgICAgICBpZiAodGhpcy5faXNBbmd1bGFyKSB7XG4gICAgICAgICAgICB0aGlzLmJyb2FkY2FzdChcIm1zYWw6cG9wVXBDbG9zZWRcIiwgRXJyb3JDb2Rlcy51c2VyQ2FuY2VsbGVkRXJyb3IgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBFcnJvckRlc2NyaXB0aW9uLnVzZXJDYW5jZWxsZWRFcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuX2xvZ2luSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICBpbnN0YW5jZS5fYWNxdWlyZVRva2VuSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcG9wVXBXaW5kb3dMb2NhdGlvbiA9IHBvcHVwV2luZG93LmxvY2F0aW9uO1xuICAgICAgICBpZiAocG9wVXBXaW5kb3dMb2NhdGlvbi5ocmVmLmluZGV4T2YodGhpcy5nZXRSZWRpcmVjdFVyaSgpKSAhPT0gLTEpIHtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChwb2xsVGltZXIpO1xuICAgICAgICAgIGluc3RhbmNlLl9sb2dpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICBpbnN0YW5jZS5fYWNxdWlyZVRva2VuSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiQ2xvc2luZyBwb3B1cCB3aW5kb3dcIik7XG4gICAgICAgICAgaWYgKHRoaXMuX2lzQW5ndWxhcikge1xuICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdChcIm1zYWw6cG9wVXBIYXNoQ2hhbmdlZFwiLCBwb3BVcFdpbmRvd0xvY2F0aW9uLmhhc2gpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpbmRvdy5vcGVuZWRXaW5kb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbmVkV2luZG93c1tpXS5jbG9zZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vQ3Jvc3MgRG9tYWluIHVybCBjaGVjayBlcnJvci4gV2lsbCBiZSB0aHJvd24gdW50aWwgQUFEIHJlZGlyZWN0cyB0aGUgdXNlciBiYWNrIHRvIHRoZSBhcHBcInMgcm9vdCBwYWdlIHdpdGggdGhlIHRva2VuLiBObyBuZWVkIHRvIGxvZyBvciB0aHJvdyB0aGlzIGVycm9yIGFzIGl0IHdpbGwgY3JlYXRlIHVubmVjZXNzYXJ5IHRyYWZmaWMuXG4gICAgICB9XG4gICAgfSxcbiAgICAgIGludGVydmFsKTtcblxuICAgIHJldHVybiBwb3B1cFdpbmRvdztcbiAgfVxuXG4gIHByaXZhdGUgYnJvYWRjYXN0KGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBzdHJpbmcpIHtcbiAgICAgIHZhciBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7IGRldGFpbDogZGF0YSB9KTtcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gIH1cblxuICAvKlxuICAgKiBVc2VkIHRvIGxvZyBvdXQgdGhlIGN1cnJlbnQgdXNlciwgYW5kIHJlZGlyZWN0IHRoZSB1c2VyIHRvIHRoZSBwb3N0TG9nb3V0UmVkaXJlY3RVcmkuXG4gICAqIERlZmF1bHRzIGJlaGF2aW91ciBpcyB0byByZWRpcmVjdCB0aGUgdXNlciB0byBgd2luZG93LmxvY2F0aW9uLmhyZWZgLlxuICAgKi9cbiAgbG9nb3V0KCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIHRoaXMuX3VzZXIgPSBudWxsO1xuICAgIGxldCBsb2dvdXQgPSBcIlwiO1xuICAgIGlmICh0aGlzLmdldFBvc3RMb2dvdXRSZWRpcmVjdFVyaSgpKSB7XG4gICAgICBsb2dvdXQgPSBcInBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaT1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmdldFBvc3RMb2dvdXRSZWRpcmVjdFVyaSgpKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmxOYXZpZ2F0ZSA9IHRoaXMuYXV0aG9yaXR5ICsgXCIvb2F1dGgyL3YyLjAvbG9nb3V0P1wiICsgbG9nb3V0O1xuICAgIHRoaXMucHJvbXB0VXNlcih1cmxOYXZpZ2F0ZSk7XG4gIH1cblxuICAvKlxuICAgKiBVc2VkIHRvIGNvbmZpZ3VyZSB0aGUgcG9wdXAgd2luZG93IGZvciBsb2dpbi5cbiAgICogQGlnbm9yZVxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcm90ZWN0ZWQgY2xlYXJDYWNoZSgpOiB2b2lkIHtcbiAgICAgIHdpbmRvdy5yZW5ld1N0YXRlcyA9IFtdO1xuICAgICAgY29uc3QgYWNjZXNzVG9rZW5JdGVtcyA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRBbGxBY2Nlc3NUb2tlbnMoQ29uc3RhbnRzLmNsaWVudElkLCBDb25zdGFudHMudXNlcklkZW50aWZpZXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWNjZXNzVG9rZW5JdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnJlbW92ZUl0ZW0oSlNPTi5zdHJpbmdpZnkoYWNjZXNzVG9rZW5JdGVtc1tpXS5rZXkpKTtcbiAgICB9XG4gICAgdGhpcy5fY2FjaGVTdG9yYWdlLnJlc2V0Q2FjaGVJdGVtcygpO1xuICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5jbGVhckNvb2tpZSgpO1xuICB9XG5cbiAgIHByb3RlY3RlZCBjbGVhckNhY2hlRm9yU2NvcGUoYWNjZXNzVG9rZW46IHN0cmluZykge1xuICAgICAgY29uc3QgYWNjZXNzVG9rZW5JdGVtcyA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRBbGxBY2Nlc3NUb2tlbnMoQ29uc3RhbnRzLmNsaWVudElkLCBDb25zdGFudHMudXNlcklkZW50aWZpZXIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY2Nlc3NUb2tlbkl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRva2VuID0gYWNjZXNzVG9rZW5JdGVtc1tpXTtcbiAgICAgICAgICBpZiAodG9rZW4udmFsdWUuYWNjZXNzVG9rZW4gPT09IGFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5yZW1vdmVJdGVtKEpTT04uc3RyaW5naWZ5KHRva2VuLmtleSkpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfVxuICAvKlxuICAgKiBDb25maWd1cmVzIHBvcHVwIHdpbmRvdyBmb3IgbG9naW4uXG4gICAqIEBpZ25vcmVcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBvcGVuUG9wdXAodXJsTmF2aWdhdGU6IHN0cmluZywgdGl0bGU6IHN0cmluZywgcG9wVXBXaWR0aDogbnVtYmVyLCBwb3BVcEhlaWdodDogbnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qXG4gICAgICAgKiBhZGRpbmcgd2luTGVmdCBhbmQgd2luVG9wIHRvIGFjY291bnQgZm9yIGR1YWwgbW9uaXRvclxuICAgICAgICogdXNpbmcgc2NyZWVuTGVmdCBhbmQgc2NyZWVuVG9wIGZvciBJRTggYW5kIGVhcmxpZXJcbiAgICAgICAqL1xuICAgICAgY29uc3Qgd2luTGVmdCA9IHdpbmRvdy5zY3JlZW5MZWZ0ID8gd2luZG93LnNjcmVlbkxlZnQgOiB3aW5kb3cuc2NyZWVuWDtcbiAgICAgIGNvbnN0IHdpblRvcCA9IHdpbmRvdy5zY3JlZW5Ub3AgPyB3aW5kb3cuc2NyZWVuVG9wIDogd2luZG93LnNjcmVlblk7XG4gICAgICAvKlxuICAgICAgICogd2luZG93LmlubmVyV2lkdGggZGlzcGxheXMgYnJvd3NlciB3aW5kb3dcInMgaGVpZ2h0IGFuZCB3aWR0aCBleGNsdWRpbmcgdG9vbGJhcnNcbiAgICAgICAqIHVzaW5nIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCBmb3IgSUU4IGFuZCBlYXJsaWVyXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIHx8IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gICAgICBjb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCB8fCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodDtcbiAgICAgIGNvbnN0IGxlZnQgPSAoKHdpZHRoIC8gMikgLSAocG9wVXBXaWR0aCAvIDIpKSArIHdpbkxlZnQ7XG4gICAgICBjb25zdCB0b3AgPSAoKGhlaWdodCAvIDIpIC0gKHBvcFVwSGVpZ2h0IC8gMikpICsgd2luVG9wO1xuXG4gICAgICBjb25zdCBwb3B1cFdpbmRvdyA9IHdpbmRvdy5vcGVuKHVybE5hdmlnYXRlLCB0aXRsZSwgXCJ3aWR0aD1cIiArIHBvcFVwV2lkdGggKyBcIiwgaGVpZ2h0PVwiICsgcG9wVXBIZWlnaHQgKyBcIiwgdG9wPVwiICsgdG9wICsgXCIsIGxlZnQ9XCIgKyBsZWZ0KTtcbiAgICAgIGlmIChwb3B1cFdpbmRvdy5mb2N1cykge1xuICAgICAgICBwb3B1cFdpbmRvdy5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcG9wdXBXaW5kb3c7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiZXJyb3Igb3BlbmluZyBwb3B1cCBcIiArIGUubWVzc2FnZSk7XG4gICAgICB0aGlzLl9sb2dpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFVzZWQgdG8gdmFsaWRhdGUgdGhlIHNjb3BlcyBpbnB1dCBwYXJhbWV0ZXIgcmVxdWVzdGVkICBieSB0aGUgZGV2ZWxvcGVyLlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHNjb3BlcyAtIERldmVsb3BlciByZXF1ZXN0ZWQgcGVybWlzc2lvbnMuIE5vdCBhbGwgc2NvcGVzIGFyZSBndWFyYW50ZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQuXG4gICAqIEBpZ25vcmVcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSB2YWxpZGF0ZUlucHV0U2NvcGUoc2NvcGVzOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcbiAgICBpZiAoIXNjb3BlcyB8fCBzY29wZXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuIFwiU2NvcGVzIGNhbm5vdCBiZSBwYXNzZWQgYXMgYW4gZW1wdHkgYXJyYXlcIjtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NvcGVzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQVBJIGRvZXMgbm90IGFjY2VwdCBub24tYXJyYXkgc2NvcGVzXCIpO1xuICAgIH1cblxuICAgIGlmIChzY29wZXMuaW5kZXhPZih0aGlzLmNsaWVudElkKSA+IC0xKSB7XG4gICAgICBpZiAoc2NvcGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2xpZW50SWQgY2FuIG9ubHkgYmUgcHJvdmlkZWQgYXMgYSBzaW5nbGUgc2NvcGVcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICAvKlxuICAgICogVXNlZCB0byByZW1vdmUgb3BlbmlkIGFuZCBwcm9maWxlIGZyb20gdGhlIGxpc3Qgb2Ygc2NvcGVzIHBhc3NlZCBieSB0aGUgZGV2ZWxvcGVyLlRoZXNlIHNjb3BlcyBhcmUgYWRkZWQgYnkgZGVmYXVsdFxuICAgICogQGhpZGRlblxuICAgICovXG4gIHByaXZhdGUgZmlsdGVyU2NvcGVzKHNjb3BlczogQXJyYXk8c3RyaW5nPik6IEFycmF5PHN0cmluZz4ge1xuICAgIHNjb3BlcyA9IHNjb3Blcy5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50ICE9PSBcIm9wZW5pZFwiO1xuICAgIH0pO1xuXG4gICAgc2NvcGVzID0gc2NvcGVzLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQgIT09IFwicHJvZmlsZVwiO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNjb3BlcztcbiAgfVxuICAvKlxuICAgKiBVc2VkIHRvIGFkZCB0aGUgZGV2ZWxvcGVyIHJlcXVlc3RlZCBjYWxsYmFjayB0byB0aGUgYXJyYXkgb2YgY2FsbGJhY2tzIGZvciB0aGUgc3BlY2lmaWVkIHNjb3Blcy4gVGhlIHVwZGF0ZWQgYXJyYXkgaXMgc3RvcmVkIG9uIHRoZSB3aW5kb3cgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSAtIERldmVsb3BlciByZXF1ZXN0ZWQgcGVybWlzc2lvbnMuIE5vdCBhbGwgc2NvcGVzIGFyZSBndWFyYW50ZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZFN0YXRlIC0gVW5pcXVlIHN0YXRlIGlkZW50aWZpZXIgKGd1aWQpLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIC0gVGhlIHJlc29sdmUgZnVuY3Rpb24gb2YgdGhlIHByb21pc2Ugb2JqZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgLSBUaGUgcmVqZWN0IGZ1bmN0aW9uIG9mIHRoZSBwcm9taXNlIG9iamVjdC5cbiAgICogQGlnbm9yZVxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIHJlZ2lzdGVyQ2FsbGJhY2soZXhwZWN0ZWRTdGF0ZTogc3RyaW5nLCBzY29wZTogc3RyaW5nLCByZXNvbHZlOiBGdW5jdGlvbiwgcmVqZWN0OiBGdW5jdGlvbik6IHZvaWQge1xuICAgIHdpbmRvdy5hY3RpdmVSZW5ld2Fsc1tzY29wZV0gPSBleHBlY3RlZFN0YXRlO1xuICAgIGlmICghd2luZG93LmNhbGxCYWNrc01hcHBlZFRvUmVuZXdTdGF0ZXNbZXhwZWN0ZWRTdGF0ZV0pIHtcbiAgICAgICAgd2luZG93LmNhbGxCYWNrc01hcHBlZFRvUmVuZXdTdGF0ZXNbZXhwZWN0ZWRTdGF0ZV0gPSBbXTtcbiAgICB9XG4gICAgd2luZG93LmNhbGxCYWNrc01hcHBlZFRvUmVuZXdTdGF0ZXNbZXhwZWN0ZWRTdGF0ZV0ucHVzaCh7IHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH0pO1xuICAgIGlmICghd2luZG93LmNhbGxCYWNrTWFwcGVkVG9SZW5ld1N0YXRlc1tleHBlY3RlZFN0YXRlXSkge1xuICAgICAgICB3aW5kb3cuY2FsbEJhY2tNYXBwZWRUb1JlbmV3U3RhdGVzW2V4cGVjdGVkU3RhdGVdID1cbiAgICAgICAgKGVycm9yRGVzYzogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCBlcnJvcjogc3RyaW5nLCB0b2tlblR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgIHdpbmRvdy5hY3RpdmVSZW5ld2Fsc1tzY29wZV0gPSBudWxsO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2luZG93LmNhbGxCYWNrc01hcHBlZFRvUmVuZXdTdGF0ZXNbZXhwZWN0ZWRTdGF0ZV0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmIChlcnJvckRlc2MgfHwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5jYWxsQmFja3NNYXBwZWRUb1JlbmV3U3RhdGVzW2V4cGVjdGVkU3RhdGVdW2ldLnJlamVjdChlcnJvckRlc2MgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5jYWxsQmFja3NNYXBwZWRUb1JlbmV3U3RhdGVzW2V4cGVjdGVkU3RhdGVdW2ldLnJlc29sdmUodG9rZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci53YXJuaW5nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB3aW5kb3cuY2FsbEJhY2tzTWFwcGVkVG9SZW5ld1N0YXRlc1tleHBlY3RlZFN0YXRlXSA9IG51bGw7XG4gICAgICAgICAgd2luZG93LmNhbGxCYWNrTWFwcGVkVG9SZW5ld1N0YXRlc1tleHBlY3RlZFN0YXRlXSA9IG51bGw7XG4gICAgICAgIH07XG4gICAgfVxuICB9XG5cblxucHJvdGVjdGVkIGdldENhY2hlZFRva2VuSW50ZXJuYWwoc2NvcGVzIDogQXJyYXk8c3RyaW5nPiAsIHVzZXI6IFVzZXIpOiBDYWNoZVJlc3VsdCB7XG4gICAgY29uc3QgdXNlck9iamVjdCA9IHVzZXIgPyB1c2VyIDogdGhpcy5nZXRVc2VyKCk7XG4gICAgaWYgKCF1c2VyT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgYXV0aGVudGljYXRpb25SZXF1ZXN0OiBBdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzO1xuICAgIGxldCBuZXdBdXRob3JpdHkgPSB0aGlzLmF1dGhvcml0eUluc3RhbmNlID8gdGhpcy5hdXRob3JpdHlJbnN0YW5jZSA6IEF1dGhvcml0eUZhY3RvcnkuQ3JlYXRlSW5zdGFuY2UodGhpcy5hdXRob3JpdHksIHRoaXMudmFsaWRhdGVBdXRob3JpdHkpO1xuXG4gICAgaWYgKFV0aWxzLmNvbXBhcmVPYmplY3RzKHVzZXJPYmplY3QsIHRoaXMuZ2V0VXNlcigpKSkge1xuICAgICAgICBpZiAoc2NvcGVzLmluZGV4T2YodGhpcy5jbGllbnRJZCkgPiAtMSkge1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMobmV3QXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMuaWRfdG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMobmV3QXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMudG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMobmV3QXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMuaWRfdG9rZW5fdG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDYWNoZWRUb2tlbihhdXRoZW50aWNhdGlvblJlcXVlc3QsIHVzZXIpO1xufVxuXG4gIC8qXG4gICAqIFVzZWQgdG8gZ2V0IHRva2VuIGZvciB0aGUgc3BlY2lmaWVkIHNldCBvZiBzY29wZXMgZnJvbSB0aGUgY2FjaGVcbiAgICogQHBhcmFtIHtBdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzfSBhdXRoZW50aWNhdGlvblJlcXVlc3QgLSBSZXF1ZXN0IHNlbnQgdG8gdGhlIFNUUyB0byBvYnRhaW4gYW4gaWRfdG9rZW4vYWNjZXNzX3Rva2VuXG4gICAqIEBwYXJhbSB7VXNlcn0gdXNlciAtIFVzZXIgZm9yIHdoaWNoIHRoZSBzY29wZXMgd2VyZSByZXF1ZXN0ZWRcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBnZXRDYWNoZWRUb2tlbihhdXRoZW50aWNhdGlvblJlcXVlc3Q6IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMsIHVzZXI6IFVzZXIpOiBDYWNoZVJlc3VsdCB7XG4gICAgbGV0IGFjY2Vzc1Rva2VuQ2FjaGVJdGVtOiBBY2Nlc3NUb2tlbkNhY2hlSXRlbSA9IG51bGw7XG4gICAgY29uc3Qgc2NvcGVzID0gYXV0aGVudGljYXRpb25SZXF1ZXN0LnNjb3BlcztcbiAgICBjb25zdCB0b2tlbkNhY2hlSXRlbXMgPSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0QWxsQWNjZXNzVG9rZW5zKHRoaXMuY2xpZW50SWQsIHVzZXIgPyB1c2VyLnVzZXJJZGVudGlmaWVyIDogbnVsbCk7IC8vZmlsdGVyIGJ5IGNsaWVudElkIGFuZCB1c2VyXG4gICAgaWYgKHRva2VuQ2FjaGVJdGVtcy5sZW5ndGggPT09IDApIHsgLy8gTm8gbWF0Y2ggZm91bmQgYWZ0ZXIgaW5pdGlhbCBmaWx0ZXJpbmdcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbHRlcmVkSXRlbXM6IEFycmF5PEFjY2Vzc1Rva2VuQ2FjaGVJdGVtPiA9IFtdO1xuICAgIC8vaWYgbm8gYXV0aG9yaXR5IHBhc3NlZFxuICAgIGlmICghYXV0aGVudGljYXRpb25SZXF1ZXN0LmF1dGhvcml0eSkge1xuICAgICAgLy9maWx0ZXIgYnkgc2NvcGVcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5DYWNoZUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlSXRlbSA9IHRva2VuQ2FjaGVJdGVtc1tpXTtcbiAgICAgICAgY29uc3QgY2FjaGVkU2NvcGVzID0gY2FjaGVJdGVtLmtleS5zY29wZXMuc3BsaXQoXCIgXCIpO1xuICAgICAgICBpZiAoVXRpbHMuY29udGFpbnNTY29wZShjYWNoZWRTY29wZXMsIHNjb3BlcykpIHtcbiAgICAgICAgICBmaWx0ZXJlZEl0ZW1zLnB1c2goY2FjaGVJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL2lmIG9ubHkgb25lIGNhY2hlZCB0b2tlbiBmb3VuZFxuICAgICAgaWYgKGZpbHRlcmVkSXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGFjY2Vzc1Rva2VuQ2FjaGVJdGVtID0gZmlsdGVyZWRJdGVtc1swXTtcblxuICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QuYXV0aG9yaXR5SW5zdGFuY2UgPSBBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGFjY2Vzc1Rva2VuQ2FjaGVJdGVtLmtleS5hdXRob3JpdHksIHRoaXMudmFsaWRhdGVBdXRob3JpdHkpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZmlsdGVyZWRJdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3JEZXNjOiBcIlRoZSBjYWNoZSBjb250YWlucyBtdWx0aXBsZSB0b2tlbnMgc2F0aXNmeWluZyB0aGUgcmVxdWlyZW1lbnRzLiBDYWxsIEFjcXVpcmVUb2tlbiBhZ2FpbiBwcm92aWRpbmcgbW9yZSByZXF1aXJlbWVudHMgbGlrZSBhdXRob3JpdHlcIixcbiAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICBlcnJvcjogXCJtdWx0aXBsZV9tYXRjaGluZ190b2tlbnNfZGV0ZWN0ZWRcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vbm8gbWF0Y2ggZm91bmQuIGNoZWNrIGlmIHRoZXJlIHdhcyBhIHNpbmdsZSBhdXRob3JpdHkgdXNlZFxuICAgICAgICBjb25zdCBhdXRob3JpdHlMaXN0ID0gdGhpcy5nZXRVbmlxdWVBdXRob3JpdHkodG9rZW5DYWNoZUl0ZW1zLCBcImF1dGhvcml0eVwiKTtcbiAgICAgICAgaWYgKGF1dGhvcml0eUxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvckRlc2M6IFwiTXVsdGlwbGUgYXV0aG9yaXRpZXMgZm91bmQgaW4gdGhlIGNhY2hlLiBQYXNzIGF1dGhvcml0eSBpbiB0aGUgQVBJIG92ZXJsb2FkLlwiLFxuICAgICAgICAgICAgdG9rZW46IG51bGwsXG4gICAgICAgICAgICBlcnJvcjogXCJtdWx0aXBsZV9tYXRjaGluZ190b2tlbnNfZGV0ZWN0ZWRcIlxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QuYXV0aG9yaXR5SW5zdGFuY2UgPSBBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGF1dGhvcml0eUxpc3RbMF0sIHRoaXMudmFsaWRhdGVBdXRob3JpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vYXV0aG9yaXR5IHdhcyBwYXNzZWQgaW4gdGhlIEFQSSwgZmlsdGVyIGJ5IGF1dGhvcml0eSBhbmQgc2NvcGVcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5DYWNoZUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlSXRlbSA9IHRva2VuQ2FjaGVJdGVtc1tpXTtcbiAgICAgICAgY29uc3QgY2FjaGVkU2NvcGVzID0gY2FjaGVJdGVtLmtleS5zY29wZXMuc3BsaXQoXCIgXCIpO1xuICAgICAgICBpZiAoVXRpbHMuY29udGFpbnNTY29wZShjYWNoZWRTY29wZXMsIHNjb3BlcykgJiYgY2FjaGVJdGVtLmtleS5hdXRob3JpdHkgPT09IGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5hdXRob3JpdHkpIHtcbiAgICAgICAgICBmaWx0ZXJlZEl0ZW1zLnB1c2goY2FjaGVJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL25vIG1hdGNoXG4gICAgICBpZiAoZmlsdGVyZWRJdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICAvL29ubHkgb25lIGNhY2hlZFRva2VuIEZvdW5kXG4gICAgICBlbHNlIGlmIChmaWx0ZXJlZEl0ZW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBhY2Nlc3NUb2tlbkNhY2hlSXRlbSA9IGZpbHRlcmVkSXRlbXNbMF07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy9tb3JlIHRoYW4gb25lIG1hdGNoIGZvdW5kLlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yRGVzYzogXCJUaGUgY2FjaGUgY29udGFpbnMgbXVsdGlwbGUgdG9rZW5zIHNhdGlzZnlpbmcgdGhlIHJlcXVpcmVtZW50cy5DYWxsIEFjcXVpcmVUb2tlbiBhZ2FpbiBwcm92aWRpbmcgbW9yZSByZXF1aXJlbWVudHMgbGlrZSBhdXRob3JpdHlcIixcbiAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICBlcnJvcjogXCJtdWx0aXBsZV9tYXRjaGluZ190b2tlbnNfZGV0ZWN0ZWRcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhY2Nlc3NUb2tlbkNhY2hlSXRlbSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBleHBpcmVkID0gTnVtYmVyKGFjY2Vzc1Rva2VuQ2FjaGVJdGVtLnZhbHVlLmV4cGlyZXNJbik7XG4gICAgICAvLyBJZiBleHBpcmF0aW9uIGlzIHdpdGhpbiBvZmZzZXQsIGl0IHdpbGwgZm9yY2UgcmVuZXdcbiAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX2Nsb2NrU2tldyB8fCAzMDA7XG4gICAgICBpZiAoZXhwaXJlZCAmJiAoZXhwaXJlZCA+IFV0aWxzLm5vdygpICsgb2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yRGVzYzogbnVsbCxcbiAgICAgICAgICB0b2tlbjogYWNjZXNzVG9rZW5DYWNoZUl0ZW0udmFsdWUuYWNjZXNzVG9rZW4sXG4gICAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5yZW1vdmVJdGVtKEpTT04uc3RyaW5naWZ5KGZpbHRlcmVkSXRlbXNbMF0ua2V5KSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBVc2VkIHRvIGZpbHRlciBhbGwgY2FjaGVkIGl0ZW1zIGFuZCByZXR1cm4gYSBsaXN0IG9mIHVuaXF1ZSB1c2VycyBiYXNlZCBvbiB1c2VySWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtBcnJheTxVc2VyPn0gVXNlcnMgLSB1c2VycyBzYXZlZCBpbiB0aGUgY2FjaGUuXG4gICAqL1xuICBnZXRBbGxVc2VycygpOiBBcnJheTxVc2VyPiB7XG4gICAgICBjb25zdCB1c2VyczogQXJyYXk8VXNlcj4gPSBbXTtcbiAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuQ2FjaGVJdGVtcyA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRBbGxBY2Nlc3NUb2tlbnMoQ29uc3RhbnRzLmNsaWVudElkLCBDb25zdGFudHMudXNlcklkZW50aWZpZXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWNjZXNzVG9rZW5DYWNoZUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpZFRva2VuID0gbmV3IElkVG9rZW4oYWNjZXNzVG9rZW5DYWNoZUl0ZW1zW2ldLnZhbHVlLmlkVG9rZW4pO1xuICAgICAgY29uc3QgY2xpZW50SW5mbyA9IG5ldyBDbGllbnRJbmZvKGFjY2Vzc1Rva2VuQ2FjaGVJdGVtc1tpXS52YWx1ZS5jbGllbnRJbmZvKTtcbiAgICAgIGNvbnN0IHVzZXIgPSBVc2VyLmNyZWF0ZVVzZXIoaWRUb2tlbiwgY2xpZW50SW5mbyk7XG4gICAgICB1c2Vycy5wdXNoKHVzZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFVuaXF1ZVVzZXJzKHVzZXJzKTtcbiAgfVxuXG4gIC8qXG4gICAqIFVzZWQgdG8gZmlsdGVyIHVzZXJzIGJhc2VkIG9uIHVzZXJJZGVudGlmaWVyXG4gICAqIEBwYXJhbSB7QXJyYXk8VXNlcj59ICBVc2VycyAtIHVzZXJzIHNhdmVkIGluIHRoZSBjYWNoZVxuICAgKiBAaWdub3JlXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgZ2V0VW5pcXVlVXNlcnModXNlcnM6IEFycmF5PFVzZXI+KTogQXJyYXk8VXNlcj4ge1xuICAgIGlmICghdXNlcnMgfHwgdXNlcnMubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHJldHVybiB1c2VycztcbiAgICB9XG5cbiAgICBjb25zdCBmbGFnczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgIGNvbnN0IHVuaXF1ZVVzZXJzOiBBcnJheTxVc2VyPiA9IFtdO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB1c2Vycy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgIGlmICh1c2Vyc1tpbmRleF0udXNlcklkZW50aWZpZXIgJiYgZmxhZ3MuaW5kZXhPZih1c2Vyc1tpbmRleF0udXNlcklkZW50aWZpZXIpID09PSAtMSkge1xuICAgICAgICBmbGFncy5wdXNoKHVzZXJzW2luZGV4XS51c2VySWRlbnRpZmllcik7XG4gICAgICAgIHVuaXF1ZVVzZXJzLnB1c2godXNlcnNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5pcXVlVXNlcnM7XG4gIH1cblxuICAvKlxuICAqIFVzZWQgdG8gZ2V0IGEgdW5pcXVlIGxpc3Qgb2YgYXV0aG9yaXR1ZXMgZnJvbSB0aGUgY2FjaGVcbiAgKiBAcGFyYW0ge0FycmF5PEFjY2Vzc1Rva2VuQ2FjaGVJdGVtPn0gIGFjY2Vzc1Rva2VuQ2FjaGVJdGVtcyAtIGFjY2Vzc1Rva2VuQ2FjaGVJdGVtcyBzYXZlZCBpbiB0aGUgY2FjaGVcbiAgKiBAaWdub3JlXG4gICogQGhpZGRlblxuICAqL1xuICBwcml2YXRlIGdldFVuaXF1ZUF1dGhvcml0eShhY2Nlc3NUb2tlbkNhY2hlSXRlbXM6IEFycmF5PEFjY2Vzc1Rva2VuQ2FjaGVJdGVtPiwgcHJvcGVydHk6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICAgIGNvbnN0IGF1dGhvcml0eUxpc3Q6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICBjb25zdCBmbGFnczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgIGFjY2Vzc1Rva2VuQ2FjaGVJdGVtcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQua2V5Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiAoZmxhZ3MuaW5kZXhPZihlbGVtZW50LmtleVtwcm9wZXJ0eV0pID09PSAtMSkpIHtcbiAgICAgICAgZmxhZ3MucHVzaChlbGVtZW50LmtleVtwcm9wZXJ0eV0pO1xuICAgICAgICBhdXRob3JpdHlMaXN0LnB1c2goZWxlbWVudC5rZXlbcHJvcGVydHldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXV0aG9yaXR5TGlzdDtcbiAgfVxuXG4gIC8qXG4gICAqIEFkZHMgbG9naW5faGludCB0byBhdXRob3JpemF0aW9uIFVSTCB3aGljaCBpcyB1c2VkIHRvIHByZS1maWxsIHRoZSB1c2VybmFtZSBmaWVsZCBvZiBzaWduIGluIHBhZ2UgZm9yIHRoZSB1c2VyIGlmIGtub3duIGFoZWFkIG9mIHRpbWVcbiAgICogZG9tYWluX2hpbnQgY2FuIGJlIG9uZSBvZiB1c2Vycy9vcmdhbmlzYXRpb25zIHdoaWNoIHdoZW4gYWRkZWQgc2tpcHMgdGhlIGVtYWlsIGJhc2VkIGRpc2NvdmVyeSBwcm9jZXNzIG9mIHRoZSB1c2VyXG4gICAqIGRvbWFpbl9yZXEgdXRpZCByZWNlaXZlZCBhcyBwYXJ0IG9mIHRoZSBjbGllbnRJbmZvXG4gICAqIGxvZ2luX3JlcSB1aWQgcmVjZWl2ZWQgYXMgcGFydCBvZiBjbGllbnRJbmZvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxOYXZpZ2F0ZSAtIEF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgdXJsXG4gICAqIEBwYXJhbSB7VXNlcn0gdXNlciAtIFVzZXIgZm9yIHdoaWNoIHRoZSB0b2tlbiBpcyByZXF1ZXN0ZWRcbiAgICogQGlnbm9yZVxuICAgKiBAaGlkZGVuXG4gICAqL1xuICAgIHByaXZhdGUgYWRkSGludFBhcmFtZXRlcnModXJsTmF2aWdhdGU6IHN0cmluZywgdXNlcjogVXNlcik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHVzZXJPYmplY3QgPSB1c2VyID8gdXNlciA6IHRoaXMuZ2V0VXNlcigpO1xuICAgICAgICBpZiAodXNlck9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgZGVjb2RlZENsaWVudEluZm8gPSB1c2VyT2JqZWN0LnVzZXJJZGVudGlmaWVyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHVpZCA9IFV0aWxzLmJhc2U2NERlY29kZVN0cmluZ1VybFNhZmUoZGVjb2RlZENsaWVudEluZm9bMF0pO1xuICAgICAgICAgICAgY29uc3QgdXRpZCA9IFV0aWxzLmJhc2U2NERlY29kZVN0cmluZ1VybFNhZmUoZGVjb2RlZENsaWVudEluZm9bMV0pO1xuXG4gICAgICAgICAgICBpZiAodXNlck9iamVjdC5zaWQgICYmIHVybE5hdmlnYXRlLmluZGV4T2YoQ29uc3RhbnRzLnByb21wdF9ub25lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudXJsQ29udGFpbnNRdWVyeVN0cmluZ1BhcmFtZXRlcihDb25zdGFudHMuc2lkLCB1cmxOYXZpZ2F0ZSkgJiYgIXRoaXMudXJsQ29udGFpbnNRdWVyeVN0cmluZ1BhcmFtZXRlcihDb25zdGFudHMubG9naW5faGludCwgdXJsTmF2aWdhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybE5hdmlnYXRlICs9IFwiJlwiICsgQ29uc3RhbnRzLnNpZCArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHVzZXJPYmplY3Quc2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudXJsQ29udGFpbnNRdWVyeVN0cmluZ1BhcmFtZXRlcihDb25zdGFudHMubG9naW5faGludCwgdXJsTmF2aWdhdGUpICYmIHVzZXJPYmplY3QuZGlzcGxheWFibGVJZCAmJiAhVXRpbHMuaXNFbXB0eSh1c2VyT2JqZWN0LmRpc3BsYXlhYmxlSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybE5hdmlnYXRlICs9IFwiJlwiICsgQ29uc3RhbnRzLmxvZ2luX2hpbnQgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh1c2VyT2JqZWN0LmRpc3BsYXlhYmxlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFVdGlscy5pc0VtcHR5KHVpZCkgJiYgIVV0aWxzLmlzRW1wdHkodXRpZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudXJsQ29udGFpbnNRdWVyeVN0cmluZ1BhcmFtZXRlcihcImRvbWFpbl9yZXFcIiwgdXJsTmF2aWdhdGUpICYmICFVdGlscy5pc0VtcHR5KHV0aWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybE5hdmlnYXRlICs9IFwiJmRvbWFpbl9yZXE9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodXRpZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnVybENvbnRhaW5zUXVlcnlTdHJpbmdQYXJhbWV0ZXIoXCJsb2dpbl9yZXFcIiwgdXJsTmF2aWdhdGUpICYmICFVdGlscy5pc0VtcHR5KHVpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsTmF2aWdhdGUgKz0gXCImbG9naW5fcmVxPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHVpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnVybENvbnRhaW5zUXVlcnlTdHJpbmdQYXJhbWV0ZXIoQ29uc3RhbnRzLmRvbWFpbl9oaW50LCB1cmxOYXZpZ2F0ZSkgJiYgIVV0aWxzLmlzRW1wdHkodXRpZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodXRpZCA9PT0gQ29uc3RhbnRzLmNvbnN1bWVyc1V0aWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsTmF2aWdhdGUgKz0gXCImXCIgKyAgQ29uc3RhbnRzLmRvbWFpbl9oaW50ICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoQ29uc3RhbnRzLmNvbnN1bWVycyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsTmF2aWdhdGUgKz0gXCImXCIgKyBDb25zdGFudHMuZG9tYWluX2hpbnQgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChDb25zdGFudHMub3JnYW5pemF0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJsTmF2aWdhdGU7XG4gICAgfVxuXG4gIC8qXG4gICAqIENoZWNrcyBpZiB0aGUgYXV0aG9yaXphdGlvbiBlbmRwb2ludCBVUkwgY29udGFpbnMgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnNcbiAgICogQGlnbm9yZVxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIHVybENvbnRhaW5zUXVlcnlTdHJpbmdQYXJhbWV0ZXIobmFtZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vIHJlZ2V4IHRvIGRldGVjdCBwYXR0ZXJuIG9mIGEgPyBvciAmIGZvbGxvd2VkIGJ5IHRoZSBuYW1lIHBhcmFtZXRlciBhbmQgYW4gZXF1YWxzIGNoYXJhY3RlclxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9XCIpO1xuICAgIHJldHVybiByZWdleC50ZXN0KHVybCk7XG4gIH1cblxuICAvKlxuICAgKiBVc2VkIHRvIG9idGFpbiBhbiBhY2Nlc3NfdG9rZW4gYnkgcmVkaXJlY3RpbmcgdGhlIHVzZXIgdG8gdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnQuXG4gICAqIFRvIHJlbmV3IGlkVG9rZW4sIGNsaWVudElkIHNob3VsZCBiZSBwYXNzZWQgYXMgdGhlIG9ubHkgc2NvcGUgaW4gdGhlIHNjb3BlcyBhcnJheS5cbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBzY29wZXMgLSBQZXJtaXNzaW9ucyB5b3Ugd2FudCBpbmNsdWRlZCBpbiB0aGUgYWNjZXNzIHRva2VuLiBOb3QgYWxsIHNjb3BlcyBhcmUgIGd1YXJhbnRlZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGFjY2VzcyB0b2tlbi4gU2NvcGVzIGxpa2UgXCJvcGVuaWRcIiBhbmQgXCJwcm9maWxlXCIgYXJlIHNlbnQgd2l0aCBldmVyeSByZXF1ZXN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aG9yaXR5IC0gQSBVUkwgaW5kaWNhdGluZyBhIGRpcmVjdG9yeSB0aGF0IE1TQUwgY2FuIHVzZSB0byBvYnRhaW4gdG9rZW5zLlxuICAgKiAtIEluIEF6dXJlIEFELCBpdCBpcyBvZiB0aGUgZm9ybSBodHRwczovL3tpbnN0YW5jZX0vJmx0O3RlbmFudCZndDssIHdoZXJlICZsdDt0ZW5hbnQmZ3Q7IGlzIHRoZSBkaXJlY3RvcnkgaG9zdCAoZS5nLiBodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20pIGFuZCAmbHQ7dGVuYW50Jmd0OyBpcyBhIGlkZW50aWZpZXIgd2l0aGluIHRoZSBkaXJlY3RvcnkgaXRzZWxmIChlLmcuIGEgZG9tYWluIGFzc29jaWF0ZWQgdG8gdGhlIHRlbmFudCwgc3VjaCBhcyBjb250b3NvLm9ubWljcm9zb2Z0LmNvbSwgb3IgdGhlIEdVSUQgcmVwcmVzZW50aW5nIHRoZSBUZW5hbnRJRCBwcm9wZXJ0eSBvZiB0aGUgZGlyZWN0b3J5KVxuICAgKiAtIEluIEF6dXJlIEIyQywgaXQgaXMgb2YgdGhlIGZvcm0gaHR0cHM6Ly97aW5zdGFuY2V9L3RmcC8mbHQ7dGVuYW50Jmd0Oy88cG9saWN5TmFtZT5cbiAgICogLSBEZWZhdWx0IHZhbHVlIGlzOiBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS9jb21tb25cIlxuICAgKiBAcGFyYW0ge1VzZXJ9IHVzZXIgLSBUaGUgdXNlciBmb3Igd2hpY2ggdGhlIHNjb3BlcyBhcmUgcmVxdWVzdGVkLlRoZSBkZWZhdWx0IHVzZXIgaXMgdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0cmFRdWVyeVBhcmFtZXRlcnMgLSBLZXktdmFsdWUgcGFpcnMgdG8gcGFzcyB0byB0aGUgU1RTIGR1cmluZyB0aGUgIGF1dGhlbnRpY2F0aW9uIGZsb3cuXG4gICAqL1xuICBhY3F1aXJlVG9rZW5SZWRpcmVjdChzY29wZXM6IEFycmF5PHN0cmluZz4pOiB2b2lkO1xuICBhY3F1aXJlVG9rZW5SZWRpcmVjdChzY29wZXM6IEFycmF5PHN0cmluZz4sIGF1dGhvcml0eTogc3RyaW5nKTogdm9pZDtcbiAgYWNxdWlyZVRva2VuUmVkaXJlY3Qoc2NvcGVzOiBBcnJheTxzdHJpbmc+LCBhdXRob3JpdHk6IHN0cmluZywgdXNlcjogVXNlcik6IHZvaWQ7XG4gIGFjcXVpcmVUb2tlblJlZGlyZWN0KHNjb3BlczogQXJyYXk8c3RyaW5nPiwgYXV0aG9yaXR5OiBzdHJpbmcsIHVzZXI6IFVzZXIsIGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiBzdHJpbmcpOiB2b2lkO1xuICBhY3F1aXJlVG9rZW5SZWRpcmVjdChzY29wZXM6IEFycmF5PHN0cmluZz4sIGF1dGhvcml0eT86IHN0cmluZywgdXNlcj86IFVzZXIsIGV4dHJhUXVlcnlQYXJhbWV0ZXJzPzogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgaXNWYWxpZFNjb3BlID0gdGhpcy52YWxpZGF0ZUlucHV0U2NvcGUoc2NvcGVzKTtcbiAgICBpZiAoaXNWYWxpZFNjb3BlICYmICFVdGlscy5pc0VtcHR5KGlzVmFsaWRTY29wZSkpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Rva2VuUmVjZWl2ZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fdG9rZW5SZWNlaXZlZENhbGxiYWNrKEVycm9yRGVzY3JpcHRpb24uaW5wdXRTY29wZXNFcnJvciwgbnVsbCwgRXJyb3JDb2Rlcy5pbnB1dFNjb3Blc0Vycm9yLCBDb25zdGFudHMuYWNjZXNzVG9rZW4sIHRoaXMuZ2V0VXNlclN0YXRlKHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy5zdGF0ZUxvZ2luLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2NvcGVzKSB7XG4gICAgICBzY29wZXMgPSB0aGlzLmZpbHRlclNjb3BlcyhzY29wZXMpO1xuICAgIH1cblxuICAgIGNvbnN0IHVzZXJPYmplY3QgPSB1c2VyID8gdXNlciA6IHRoaXMuZ2V0VXNlcigpO1xuICAgIGlmICh0aGlzLl9hY3F1aXJlVG9rZW5JblByb2dyZXNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2NvcGUgPSBzY29wZXMuam9pbihcIiBcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghdXNlck9iamVjdCAmJiAhKGV4dHJhUXVlcnlQYXJhbWV0ZXJzICYmIChleHRyYVF1ZXJ5UGFyYW1ldGVycy5pbmRleE9mKENvbnN0YW50cy5sb2dpbl9oaW50KSAhPT0gLTEgKSkpIHtcbiAgICAgICAgICBpZiAodGhpcy5fdG9rZW5SZWNlaXZlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiVXNlciBsb2dpbiBpcyByZXF1aXJlZFwiKTtcbiAgICAgICAgICAgICAgdGhpcy5fdG9rZW5SZWNlaXZlZENhbGxiYWNrKEVycm9yRGVzY3JpcHRpb24udXNlckxvZ2luRXJyb3IsIG51bGwsIEVycm9yQ29kZXMudXNlckxvZ2luRXJyb3IsIENvbnN0YW50cy5hY2Nlc3NUb2tlbiwgdGhpcy5nZXRVc2VyU3RhdGUodGhpcy5fY2FjaGVTdG9yYWdlLmdldEl0ZW0oQ29uc3RhbnRzLnN0YXRlTG9naW4sIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSkpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgIHRoaXMuX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIGxldCBhdXRoZW50aWNhdGlvblJlcXVlc3Q6IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnM7XG4gICAgbGV0IGFjcXVpcmVUb2tlbkF1dGhvcml0eSA9IGF1dGhvcml0eSA/IEF1dGhvcml0eUZhY3RvcnkuQ3JlYXRlSW5zdGFuY2UoYXV0aG9yaXR5LCB0aGlzLnZhbGlkYXRlQXV0aG9yaXR5KSA6IHRoaXMuYXV0aG9yaXR5SW5zdGFuY2U7XG5cbiAgICBhY3F1aXJlVG9rZW5BdXRob3JpdHkuUmVzb2x2ZUVuZHBvaW50c0FzeW5jKCkudGhlbigoKSA9PiB7XG4gICAgICBpZiAoVXRpbHMuY29tcGFyZU9iamVjdHModXNlck9iamVjdCwgdGhpcy5nZXRVc2VyKCkpKSB7XG4gICAgICAgICAgaWYgKHNjb3Blcy5pbmRleE9mKHRoaXMuY2xpZW50SWQpID4gLTEpIHtcbiAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMoYWNxdWlyZVRva2VuQXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMuaWRfdG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMoYWNxdWlyZVRva2VuQXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMudG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1dGhlbnRpY2F0aW9uUmVxdWVzdCA9IG5ldyBBdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzKGFjcXVpcmVUb2tlbkF1dGhvcml0eSwgdGhpcy5jbGllbnRJZCwgc2NvcGVzLCBSZXNwb25zZVR5cGVzLmlkX3Rva2VuX3Rva2VuLCB0aGlzLmdldFJlZGlyZWN0VXJpKCksIHRoaXMuX3N0YXRlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm5vbmNlSWRUb2tlbiwgYXV0aGVudGljYXRpb25SZXF1ZXN0Lm5vbmNlLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpO1xuICAgICAgdmFyIGFjcXVpcmVUb2tlblVzZXJLZXk7XG4gICAgICBpZiAodXNlck9iamVjdCkge1xuICAgICAgICAgICBhY3F1aXJlVG9rZW5Vc2VyS2V5ID0gQ29uc3RhbnRzLmFjcXVpcmVUb2tlblVzZXIgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyB1c2VyT2JqZWN0LnVzZXJJZGVudGlmaWVyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNxdWlyZVRva2VuVXNlcktleSA9IENvbnN0YW50cy5hY3F1aXJlVG9rZW5Vc2VyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICArIENvbnN0YW50cy5ub191c2VyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlO1xuICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKGFjcXVpcmVUb2tlblVzZXJLZXksIEpTT04uc3RyaW5naWZ5KHVzZXJPYmplY3QpKTtcbiAgICAgICAgY29uc3QgYXV0aG9yaXR5S2V5ID0gQ29uc3RhbnRzLmF1dGhvcml0eSArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oYXV0aG9yaXR5S2V5LCBhY3F1aXJlVG9rZW5BdXRob3JpdHkuQ2Fub25pY2FsQXV0aG9yaXR5LCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpO1xuICAgICAgaWYgKGV4dHJhUXVlcnlQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5leHRyYVF1ZXJ5UGFyYW1ldGVycyA9IGV4dHJhUXVlcnlQYXJhbWV0ZXJzO1xuICAgICAgfVxuXG4gICAgICBsZXQgdXJsTmF2aWdhdGUgPSBhdXRoZW50aWNhdGlvblJlcXVlc3QuY3JlYXRlTmF2aWdhdGVVcmwoc2NvcGVzKSAgICsgQ29uc3RhbnRzLnJlc3BvbnNlX21vZGVfZnJhZ21lbnQ7XG4gICAgICB1cmxOYXZpZ2F0ZSA9IHRoaXMuYWRkSGludFBhcmFtZXRlcnModXJsTmF2aWdhdGUsIHVzZXJPYmplY3QpO1xuICAgICAgaWYgKHVybE5hdmlnYXRlKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5zdGF0ZUFjcXVpcmVUb2tlbiwgYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh1cmxOYXZpZ2F0ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKlxuICAgKiBVc2VkIHRvIGFjcXVpcmUgYW4gYWNjZXNzIHRva2VuIGZvciBhIG5ldyB1c2VyIHVzaW5nIGludGVyYWN0aXZlIGF1dGhlbnRpY2F0aW9uIHZpYSBhIHBvcHVwIFdpbmRvdy5cbiAgICogVG8gcmVxdWVzdCBhbiBpZF90b2tlbiwgcGFzcyB0aGUgY2xpZW50SWQgYXMgdGhlIG9ubHkgc2NvcGUgaW4gdGhlIHNjb3BlcyBhcnJheS5cbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBzY29wZXMgLSBQZXJtaXNzaW9ucyB5b3Ugd2FudCBpbmNsdWRlZCBpbiB0aGUgYWNjZXNzIHRva2VuLiBOb3QgYWxsIHNjb3BlcyBhcmUgIGd1YXJhbnRlZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGFjY2VzcyB0b2tlbi4gU2NvcGVzIGxpa2UgXCJvcGVuaWRcIiBhbmQgXCJwcm9maWxlXCIgYXJlIHNlbnQgd2l0aCBldmVyeSByZXF1ZXN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aG9yaXR5IC0gQSBVUkwgaW5kaWNhdGluZyBhIGRpcmVjdG9yeSB0aGF0IE1TQUwgY2FuIHVzZSB0byBvYnRhaW4gdG9rZW5zLlxuICAgKiAtIEluIEF6dXJlIEFELCBpdCBpcyBvZiB0aGUgZm9ybSBodHRwczovLyZsdDt0ZW5hbnQmZ3Q7LyZsdDt0ZW5hbnQmZ3Q7LCB3aGVyZSAmbHQ7dGVuYW50Jmd0OyBpcyB0aGUgZGlyZWN0b3J5IGhvc3QgKGUuZy4gaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tKSBhbmQgJmx0O3RlbmFudCZndDsgaXMgYSBpZGVudGlmaWVyIHdpdGhpbiB0aGUgZGlyZWN0b3J5IGl0c2VsZiAoZS5nLiBhIGRvbWFpbiBhc3NvY2lhdGVkIHRvIHRoZSB0ZW5hbnQsIHN1Y2ggYXMgY29udG9zby5vbm1pY3Jvc29mdC5jb20sIG9yIHRoZSBHVUlEIHJlcHJlc2VudGluZyB0aGUgVGVuYW50SUQgcHJvcGVydHkgb2YgdGhlIGRpcmVjdG9yeSlcbiAgICogLSBJbiBBenVyZSBCMkMsIGl0IGlzIG9mIHRoZSBmb3JtIGh0dHBzOi8vJmx0O2luc3RhbmNlJmd0Oy90ZnAvJmx0O3RlbmFudCZndDsvPHBvbGljeU5hbWU+L1xuICAgKiAtIERlZmF1bHQgdmFsdWUgaXM6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vblwiLlxuICAgKiBAcGFyYW0ge1VzZXJ9IHVzZXIgLSBUaGUgdXNlciBmb3Igd2hpY2ggdGhlIHNjb3BlcyBhcmUgcmVxdWVzdGVkLlRoZSBkZWZhdWx0IHVzZXIgaXMgdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0cmFRdWVyeVBhcmFtZXRlcnMgLSBLZXktdmFsdWUgcGFpcnMgdG8gcGFzcyB0byB0aGUgU1RTIGR1cmluZyB0aGUgIGF1dGhlbnRpY2F0aW9uIGZsb3cuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdHJpbmc+fSAtIEEgUHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIHRoaXMgZnVuY3Rpb24gaGFzIGNvbXBsZXRlZCwgb3IgcmVqZWN0ZWQgaWYgYW4gZXJyb3Igd2FzIHJhaXNlZC4gUmV0dXJucyB0aGUgdG9rZW4gb3IgZXJyb3IuXG4gICAqL1xuICBhY3F1aXJlVG9rZW5Qb3B1cChzY29wZXM6IEFycmF5PHN0cmluZz4pOiBQcm9taXNlPHN0cmluZz47XG4gIGFjcXVpcmVUb2tlblBvcHVwKHNjb3BlczogQXJyYXk8c3RyaW5nPiwgYXV0aG9yaXR5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XG4gIGFjcXVpcmVUb2tlblBvcHVwKHNjb3BlczogQXJyYXk8c3RyaW5nPiwgYXV0aG9yaXR5OiBzdHJpbmcsIHVzZXI6IFVzZXIpOiBQcm9taXNlPHN0cmluZz47XG4gIGFjcXVpcmVUb2tlblBvcHVwKHNjb3BlczogQXJyYXk8c3RyaW5nPiwgYXV0aG9yaXR5OiBzdHJpbmcsIHVzZXI6IFVzZXIsIGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XG4gIGFjcXVpcmVUb2tlblBvcHVwKHNjb3BlczogQXJyYXk8c3RyaW5nPiwgYXV0aG9yaXR5Pzogc3RyaW5nLCB1c2VyPzogVXNlciwgZXh0cmFRdWVyeVBhcmFtZXRlcnM/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGlzVmFsaWRTY29wZSA9IHRoaXMudmFsaWRhdGVJbnB1dFNjb3BlKHNjb3Blcyk7XG4gICAgICBpZiAoaXNWYWxpZFNjb3BlICYmICFVdGlscy5pc0VtcHR5KGlzVmFsaWRTY29wZSkpIHtcbiAgICAgICAgcmVqZWN0KEVycm9yQ29kZXMuaW5wdXRTY29wZXNFcnJvciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGlzVmFsaWRTY29wZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY29wZXMpIHtcbiAgICAgICAgc2NvcGVzID0gdGhpcy5maWx0ZXJTY29wZXMoc2NvcGVzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXNlck9iamVjdCA9IHVzZXIgPyB1c2VyIDogdGhpcy5nZXRVc2VyKCk7XG4gICAgICBpZiAodGhpcy5fYWNxdWlyZVRva2VuSW5Qcm9ncmVzcykge1xuICAgICAgICByZWplY3QoRXJyb3JDb2Rlcy5hY3F1aXJlVG9rZW5Qcm9ncmVzc0Vycm9yICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgRXJyb3JEZXNjcmlwdGlvbi5hY3F1aXJlVG9rZW5Qcm9ncmVzc0Vycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzY29wZSA9IHNjb3Blcy5qb2luKFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvL2lmIHVzZXIgaXMgbm90IGN1cnJlbnRseSBsb2dnZWQgaW4gYW5kIG5vIGxvZ2luX2hpbnQgaXMgcGFzc2VkXG4gICAgICAgIGlmICghdXNlck9iamVjdCAmJiAhKGV4dHJhUXVlcnlQYXJhbWV0ZXJzICYmIChleHRyYVF1ZXJ5UGFyYW1ldGVycy5pbmRleE9mKENvbnN0YW50cy5sb2dpbl9oaW50KSAhPT0gLTEpKSkge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJVc2VyIGxvZ2luIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAgICAgcmVqZWN0KEVycm9yQ29kZXMudXNlckxvZ2luRXJyb3IgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBFcnJvckRlc2NyaXB0aW9uLnVzZXJMb2dpbkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3F1aXJlVG9rZW5JblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIGxldCBhdXRoZW50aWNhdGlvblJlcXVlc3Q6IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnM7XG4gICAgICBsZXQgYWNxdWlyZVRva2VuQXV0aG9yaXR5ID0gYXV0aG9yaXR5ID8gQXV0aG9yaXR5RmFjdG9yeS5DcmVhdGVJbnN0YW5jZShhdXRob3JpdHksIHRoaXMudmFsaWRhdGVBdXRob3JpdHkpIDogdGhpcy5hdXRob3JpdHlJbnN0YW5jZTtcbiAgICAgIHZhciBwb3BVcFdpbmRvdyA9IHRoaXMub3BlbldpbmRvdyhcImFib3V0OmJsYW5rXCIsIFwiX2JsYW5rXCIsIDEsIHRoaXMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICBpZiAoIXBvcFVwV2luZG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYWNxdWlyZVRva2VuQXV0aG9yaXR5LlJlc29sdmVFbmRwb2ludHNBc3luYygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmIChVdGlscy5jb21wYXJlT2JqZWN0cyh1c2VyT2JqZWN0LCB0aGlzLmdldFVzZXIoKSkpIHtcbiAgICAgICAgICBpZiAoc2NvcGVzLmluZGV4T2YodGhpcy5jbGllbnRJZCkgPiAtMSkge1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMoYWNxdWlyZVRva2VuQXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMuaWRfdG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uUmVxdWVzdCA9IG5ldyBBdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzKGFjcXVpcmVUb2tlbkF1dGhvcml0eSwgdGhpcy5jbGllbnRJZCwgc2NvcGVzLCBSZXNwb25zZVR5cGVzLnRva2VuLCB0aGlzLmdldFJlZGlyZWN0VXJpKCksIHRoaXMuX3N0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0ID0gbmV3IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnMoYWNxdWlyZVRva2VuQXV0aG9yaXR5LCB0aGlzLmNsaWVudElkLCBzY29wZXMsIFJlc3BvbnNlVHlwZXMuaWRfdG9rZW5fdG9rZW4sIHRoaXMuZ2V0UmVkaXJlY3RVcmkoKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm5vbmNlSWRUb2tlbiwgYXV0aGVudGljYXRpb25SZXF1ZXN0Lm5vbmNlKTtcbiAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlID0gYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlO1xuICAgICAgICB2YXIgYWNxdWlyZVRva2VuVXNlcktleTtcbiAgICAgICAgaWYgKHVzZXJPYmplY3QpIHtcbiAgICAgICAgICAgIGFjcXVpcmVUb2tlblVzZXJLZXkgPSBDb25zdGFudHMuYWNxdWlyZVRva2VuVXNlciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIHVzZXJPYmplY3QudXNlcklkZW50aWZpZXIgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY3F1aXJlVG9rZW5Vc2VyS2V5ID0gQ29uc3RhbnRzLmFjcXVpcmVUb2tlblVzZXIgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgICsgQ29uc3RhbnRzLm5vX3VzZXIgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShhY3F1aXJlVG9rZW5Vc2VyS2V5LCBKU09OLnN0cmluZ2lmeSh1c2VyT2JqZWN0KSk7XG4gICAgICAgIGNvbnN0IGF1dGhvcml0eUtleSA9IENvbnN0YW50cy5hdXRob3JpdHkgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGU7XG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKGF1dGhvcml0eUtleSwgYWNxdWlyZVRva2VuQXV0aG9yaXR5LkNhbm9uaWNhbEF1dGhvcml0eSwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKTtcblxuICAgICAgICBpZiAoZXh0cmFRdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QuZXh0cmFRdWVyeVBhcmFtZXRlcnMgPSBleHRyYVF1ZXJ5UGFyYW1ldGVycztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cmxOYXZpZ2F0ZSA9IGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5jcmVhdGVOYXZpZ2F0ZVVybChzY29wZXMpICsgQ29uc3RhbnRzLnJlc3BvbnNlX21vZGVfZnJhZ21lbnQ7XG4gICAgICAgIHVybE5hdmlnYXRlID0gdGhpcy5hZGRIaW50UGFyYW1ldGVycyh1cmxOYXZpZ2F0ZSwgdXNlck9iamVjdCk7XG4gICAgICAgIHdpbmRvdy5yZW5ld1N0YXRlcy5wdXNoKGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZSk7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0VHlwZSA9IENvbnN0YW50cy5yZW5ld1Rva2VuO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ2FsbGJhY2soYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlLCBzY29wZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgaWYgKHBvcFVwV2luZG93KSB7XG4gICAgICAgICAgcG9wVXBXaW5kb3cubG9jYXRpb24uaHJlZiA9IHVybE5hdmlnYXRlO1xuICAgICAgICB9XG5cbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oRXJyb3JDb2Rlcy5lbmRwb2ludFJlc29sdXRpb25FcnJvciArIFwiOlwiICsgRXJyb3JEZXNjcmlwdGlvbi5lbmRwb2ludFJlc29sdXRpb25FcnJvcik7XG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5tc2FsRXJyb3IsIEVycm9yQ29kZXMuZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IpO1xuICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yRGVzY3JpcHRpb24sIEVycm9yRGVzY3JpcHRpb24uZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IpO1xuICAgICAgICBpZiAocmVqZWN0KSB7XG4gICAgICAgICAgcmVqZWN0KEVycm9yQ29kZXMuZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBFcnJvckRlc2NyaXB0aW9uLmVuZHBvaW50UmVzb2x1dGlvbkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9wVXBXaW5kb3cpIHtcbiAgICAgICAgICAgIHBvcFVwV2luZG93LmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIud2FybmluZyhcImNvdWxkIG5vdCByZXNvbHZlIGVuZHBvaW50c1wiKTtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLypcbiAgICogVXNlZCB0byBnZXQgdGhlIHRva2VuIGZyb20gY2FjaGUuXG4gICAqIE1TQUwgd2lsbCByZXR1cm4gdGhlIGNhY2hlZCB0b2tlbiBpZiBpdCBpcyBub3QgZXhwaXJlZC5cbiAgICogT3IgaXQgd2lsbCBzZW5kIGEgcmVxdWVzdCB0byB0aGUgU1RTIHRvIG9idGFpbiBhbiBhY2Nlc3NfdG9rZW4gdXNpbmcgYSBoaWRkZW4gaWZyYW1lLiBUbyByZW5ldyBpZFRva2VuLCBjbGllbnRJZCBzaG91bGQgYmUgcGFzc2VkIGFzIHRoZSBvbmx5IHNjb3BlIGluIHRoZSBzY29wZXMgYXJyYXkuXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc2NvcGVzIC0gUGVybWlzc2lvbnMgeW91IHdhbnQgaW5jbHVkZWQgaW4gdGhlIGFjY2VzcyB0b2tlbi4gTm90IGFsbCBzY29wZXMgYXJlICBndWFyYW50ZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBhY2Nlc3MgdG9rZW4uIFNjb3BlcyBsaWtlIFwib3BlbmlkXCIgYW5kIFwicHJvZmlsZVwiIGFyZSBzZW50IHdpdGggZXZlcnkgcmVxdWVzdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhvcml0eSAtIEEgVVJMIGluZGljYXRpbmcgYSBkaXJlY3RvcnkgdGhhdCBNU0FMIGNhbiB1c2UgdG8gb2J0YWluIHRva2Vucy5cbiAgICogLSBJbiBBenVyZSBBRCwgaXQgaXMgb2YgdGhlIGZvcm0gaHR0cHM6Ly8mbHQ7dGVuYW50Jmd0Oy8mbHQ7dGVuYW50Jmd0Oywgd2hlcmUgJmx0O3RlbmFudCZndDsgaXMgdGhlIGRpcmVjdG9yeSBob3N0IChlLmcuIGh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbSkgYW5kICZsdDt0ZW5hbnQmZ3Q7IGlzIGEgaWRlbnRpZmllciB3aXRoaW4gdGhlIGRpcmVjdG9yeSBpdHNlbGYgKGUuZy4gYSBkb21haW4gYXNzb2NpYXRlZCB0byB0aGUgdGVuYW50LCBzdWNoIGFzIGNvbnRvc28ub25taWNyb3NvZnQuY29tLCBvciB0aGUgR1VJRCByZXByZXNlbnRpbmcgdGhlIFRlbmFudElEIHByb3BlcnR5IG9mIHRoZSBkaXJlY3RvcnkpXG4gICAqIC0gSW4gQXp1cmUgQjJDLCBpdCBpcyBvZiB0aGUgZm9ybSBodHRwczovLyZsdDtpbnN0YW5jZSZndDsvdGZwLyZsdDt0ZW5hbnQmZ3Q7Lzxwb2xpY3lOYW1lPi9cbiAgICogLSBEZWZhdWx0IHZhbHVlIGlzOiBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS9jb21tb25cIlxuICAgKiBAcGFyYW0ge1VzZXJ9IHVzZXIgLSBUaGUgdXNlciBmb3Igd2hpY2ggdGhlIHNjb3BlcyBhcmUgcmVxdWVzdGVkLlRoZSBkZWZhdWx0IHVzZXIgaXMgdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0cmFRdWVyeVBhcmFtZXRlcnMgLSBLZXktdmFsdWUgcGFpcnMgdG8gcGFzcyB0byB0aGUgU1RTIGR1cmluZyB0aGUgIGF1dGhlbnRpY2F0aW9uIGZsb3cuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdHJpbmc+fSAtIEEgUHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIHRoaXMgZnVuY3Rpb24gaGFzIGNvbXBsZXRlZCwgb3IgcmVqZWN0ZWQgaWYgYW4gZXJyb3Igd2FzIHJhaXNlZC4gUmVzb2x2ZWQgd2l0aCB0b2tlbiBvciByZWplY3RlZCB3aXRoIGVycm9yLlxuICAgKi9cbiAgQHJlc29sdmVUb2tlbk9ubHlJZk91dE9mSWZyYW1lXG4gIGFjcXVpcmVUb2tlblNpbGVudChzY29wZXM6IEFycmF5PHN0cmluZz4sIGF1dGhvcml0eT86IHN0cmluZywgdXNlcj86IFVzZXIsIGV4dHJhUXVlcnlQYXJhbWV0ZXJzPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpc1ZhbGlkU2NvcGUgPSB0aGlzLnZhbGlkYXRlSW5wdXRTY29wZShzY29wZXMpO1xuICAgICAgaWYgKGlzVmFsaWRTY29wZSAmJiAhVXRpbHMuaXNFbXB0eShpc1ZhbGlkU2NvcGUpKSB7XG4gICAgICAgIHJlamVjdChFcnJvckNvZGVzLmlucHV0U2NvcGVzRXJyb3IgKyBcInxcIiArIGlzVmFsaWRTY29wZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNjb3Blcykge1xuICAgICAgICAgIHNjb3BlcyA9IHRoaXMuZmlsdGVyU2NvcGVzKHNjb3Blcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY29wZSA9IHNjb3Blcy5qb2luKFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB1c2VyT2JqZWN0ID0gdXNlciA/IHVzZXIgOiB0aGlzLmdldFVzZXIoKTtcbiAgICAgICAgY29uc3QgYWRhbElkVG9rZW4gPSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMuYWRhbElkVG9rZW4pO1xuICAgICAgICAvL2lmIHVzZXIgaXMgbm90IGN1cnJlbnRseSBsb2dnZWQgaW4gYW5kIG5vIGxvZ2luX2hpbnQvc2lkIGlzIHBhc3NlZCBhcyBhbiBleHRyYVF1ZXJ5UGFyYW1hdGVyXG4gICAgICAgICAgaWYgKCF1c2VyT2JqZWN0ICYmIFV0aWxzLmNoZWNrU1NPKGV4dHJhUXVlcnlQYXJhbWV0ZXJzKSAmJiBVdGlscy5pc0VtcHR5KGFkYWxJZFRva2VuKSApIHtcbiAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJVc2VyIGxvZ2luIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgICAgICAgICByZWplY3QoRXJyb3JDb2Rlcy51c2VyTG9naW5FcnJvciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIEVycm9yRGVzY3JpcHRpb24udXNlckxvZ2luRXJyb3IpO1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9pZiB1c2VyIGRpZG4ndCBwYXNzZXMgdGhlIGxvZ2luX2hpbnQgYW5kIGFkYWwncyBpZHRva2VuIGlzIHByZXNlbnQgYW5kIG5vIHVzZXJvYmplY3QsIHVzZSB0aGUgbG9naW5faGludCBmcm9tIGFkYWwncyBpZFRva2VuXG4gICAgICAgICAgZWxzZSBpZiAoIXVzZXJPYmplY3QgJiYgIVV0aWxzLmlzRW1wdHkoYWRhbElkVG9rZW4pKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGlkVG9rZW5PYmplY3QgPSBVdGlscy5leHRyYWN0SWRUb2tlbihhZGFsSWRUb2tlbik7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQURBTCdzIGlkVG9rZW4gZXhpc3RzLiBFeHRyYWN0aW5nIGxvZ2luIGluZm9ybWF0aW9uIGZyb20gQURBTCdzIGlkVG9rZW4gXCIpO1xuICAgICAgICAgICAgICBleHRyYVF1ZXJ5UGFyYW1ldGVycyA9IFV0aWxzLmNvbnN0cnVjdFVuaWZpZWRDYWNoZUV4dHJhUXVlcnlQYXJhbWV0ZXIoaWRUb2tlbk9iamVjdCwgZXh0cmFRdWVyeVBhcmFtZXRlcnMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBhdXRoZW50aWNhdGlvblJlcXVlc3Q6IEF1dGhlbnRpY2F0aW9uUmVxdWVzdFBhcmFtZXRlcnM7XG4gICAgICAgIGlmIChVdGlscy5jb21wYXJlT2JqZWN0cyh1c2VyT2JqZWN0LCB0aGlzLmdldFVzZXIoKSkpIHtcbiAgICAgICAgICBpZiAoc2NvcGVzLmluZGV4T2YodGhpcy5jbGllbnRJZCkgPiAtMSkge1xuICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QgPSBuZXcgQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycyhBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGF1dGhvcml0eSwgdGhpcy52YWxpZGF0ZUF1dGhvcml0eSksIHRoaXMuY2xpZW50SWQsIHNjb3BlcywgUmVzcG9uc2VUeXBlcy5pZF90b2tlbiwgdGhpcy5nZXRSZWRpcmVjdFVyaSgpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QgPSBuZXcgQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycyhBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGF1dGhvcml0eSwgdGhpcy52YWxpZGF0ZUF1dGhvcml0eSksIHRoaXMuY2xpZW50SWQsIHNjb3BlcywgUmVzcG9uc2VUeXBlcy50b2tlbiwgdGhpcy5nZXRSZWRpcmVjdFVyaSgpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNjb3Blcy5pbmRleE9mKHRoaXMuY2xpZW50SWQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QgPSBuZXcgQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycyhBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGF1dGhvcml0eSwgdGhpcy52YWxpZGF0ZUF1dGhvcml0eSksIHRoaXMuY2xpZW50SWQsIHNjb3BlcywgUmVzcG9uc2VUeXBlcy5pZF90b2tlbiwgdGhpcy5nZXRSZWRpcmVjdFVyaSgpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QgPSBuZXcgQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycyhBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGF1dGhvcml0eSwgdGhpcy52YWxpZGF0ZUF1dGhvcml0eSksIHRoaXMuY2xpZW50SWQsIHNjb3BlcywgUmVzcG9uc2VUeXBlcy5pZF90b2tlbl90b2tlbiwgdGhpcy5nZXRSZWRpcmVjdFVyaSgpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYWNoZVJlc3VsdCA9IHRoaXMuZ2V0Q2FjaGVkVG9rZW4oYXV0aGVudGljYXRpb25SZXF1ZXN0LCB1c2VyT2JqZWN0KTtcbiAgICAgICAgaWYgKGNhY2hlUmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGNhY2hlUmVzdWx0LnRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuaW5mbyhcIlRva2VuIGlzIGFscmVhZHkgaW4gY2FjaGUgZm9yIHNjb3BlOlwiICsgc2NvcGUpO1xuICAgICAgICAgICAgcmVzb2x2ZShjYWNoZVJlc3VsdC50b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoY2FjaGVSZXN1bHQuZXJyb3JEZXNjIHx8IGNhY2hlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuaW5mb1BpaShjYWNoZVJlc3VsdC5lcnJvckRlc2MgKyBcIjpcIiArIGNhY2hlUmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgIHJlamVjdChjYWNoZVJlc3VsdC5lcnJvckRlc2MgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBjYWNoZVJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIudmVyYm9zZShcIlRva2VuIGlzIG5vdCBpbiBjYWNoZSBmb3Igc2NvcGU6XCIgKyBzY29wZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXV0aGVudGljYXRpb25SZXF1ZXN0LmF1dGhvcml0eUluc3RhbmNlKSB7Ly9DYWNoZSByZXN1bHQgY2FuIHJldHVybiBudWxsIGlmIGNhY2hlIGlzIGVtcHR5LiBJbiB0aGF0IGNhc2UsIHNldCBhdXRob3JpdHkgdG8gZGVmYXVsdCB2YWx1ZSBpZiBubyBhdXRob3JpdHkgaXMgcGFzc2VkIHRvIHRoZSBhcGkuXG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3QuYXV0aG9yaXR5SW5zdGFuY2UgPSBhdXRob3JpdHkgPyBBdXRob3JpdHlGYWN0b3J5LkNyZWF0ZUluc3RhbmNlKGF1dGhvcml0eSwgdGhpcy52YWxpZGF0ZUF1dGhvcml0eSkgOiB0aGlzLmF1dGhvcml0eUluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgICAgLy8gY2FjaGUgbWlzc1xuICAgICAgICAgIHJldHVybiBhdXRoZW50aWNhdGlvblJlcXVlc3QuYXV0aG9yaXR5SW5zdGFuY2UuUmVzb2x2ZUVuZHBvaW50c0FzeW5jKClcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyByZWZyZXNoIGF0dGVwdCB3aXRoIGlmcmFtZVxuICAgICAgICAgICAgLy9BbHJlYWR5IHJlbmV3aW5nIGZvciB0aGlzIHNjb3BlLCBjYWxsYmFjayB3aGVuIHdlIGdldCB0aGUgdG9rZW4uXG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuYWN0aXZlUmVuZXdhbHNbc2NvcGVdKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci52ZXJib3NlKFwiUmVuZXcgdG9rZW4gZm9yIHNjb3BlOiBcIiArIHNjb3BlICsgXCIgaXMgaW4gcHJvZ3Jlc3MuIFJlZ2lzdGVyaW5nIGNhbGxiYWNrXCIpO1xuICAgICAgICAgICAgICAvL0FjdGl2ZSByZW5ld2FscyBjb250YWlucyB0aGUgc3RhdGUgZm9yIGVhY2ggcmVuZXdhbC5cbiAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlckNhbGxiYWNrKHdpbmRvdy5hY3RpdmVSZW5ld2Fsc1tzY29wZV0sIHNjb3BlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzY29wZXMgJiYgc2NvcGVzLmluZGV4T2YodGhpcy5jbGllbnRJZCkgPiAtMSAmJiBzY29wZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwIHVzZXMgaWRUb2tlbiB0byBzZW5kIHRvIGFwaSBlbmRwb2ludHNcbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHNjb3BlIGlzIHRyYWNrZWQgYXMgY2xpZW50SWQgdG8gc3RvcmUgdGhpcyB0b2tlblxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci52ZXJib3NlKFwicmVuZXdpbmcgaWRUb2tlblwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmV3SWRUb2tlbihzY29wZXMsIHJlc29sdmUsIHJlamVjdCwgdXNlck9iamVjdCwgYXV0aGVudGljYXRpb25SZXF1ZXN0LCBleHRyYVF1ZXJ5UGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLnZlcmJvc2UoXCJyZW5ld2luZyBhY2Nlc3N0b2tlblwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmV3VG9rZW4oc2NvcGVzLCByZXNvbHZlLCByZWplY3QsIHVzZXJPYmplY3QsIGF1dGhlbnRpY2F0aW9uUmVxdWVzdCwgZXh0cmFRdWVyeVBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLndhcm5pbmcoXCJjb3VsZCBub3QgcmVzb2x2ZSBlbmRwb2ludHNcIik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgICBwcml2YXRlIGV4dHJhY3RBREFMSWRUb2tlbigpOiBhbnkge1xuICAgICAgICBjb25zdCBhZGFsSWRUb2tlbiA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy5hZGFsSWRUb2tlbik7XG4gICAgICAgIGlmICghVXRpbHMuaXNFbXB0eShhZGFsSWRUb2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5leHRyYWN0SWRUb2tlbihhZGFsSWRUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gIC8qXG4gICAqIENhbGxpbmcgX2xvYWRGcmFtZSBidXQgd2l0aCBhIHRpbWVvdXQgdG8gc2lnbmFsIGZhaWx1cmUgaW4gbG9hZGZyYW1lU3RhdHVzLiBDYWxsYmFja3MgYXJlIGxlZnQuXG4gICAqIHJlZ2lzdGVyZWQgd2hlbiBuZXR3b3JrIGVycm9ycyBvY2N1ciBhbmQgc3Vic2VxdWVudCB0b2tlbiByZXF1ZXN0cyBmb3Igc2FtZSByZXNvdXJjZSBhcmUgcmVnaXN0ZXJlZCB0byB0aGUgcGVuZGluZyByZXF1ZXN0LlxuICAgKiBAaWdub3JlXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgbG9hZElmcmFtZVRpbWVvdXQodXJsTmF2aWdhdGU6IHN0cmluZywgZnJhbWVOYW1lOiBzdHJpbmcsIHNjb3BlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvL3NldCBpZnJhbWUgc2Vzc2lvbiB0byBwZW5kaW5nXG4gICAgICBjb25zdCBleHBlY3RlZFN0YXRlID0gd2luZG93LmFjdGl2ZVJlbmV3YWxzW3Njb3BlXTtcbiAgICAgIHRoaXMuX2xvZ2dlci52ZXJib3NlKFwiU2V0IGxvYWRpbmcgc3RhdGUgdG8gcGVuZGluZyBmb3I6IFwiICsgc2NvcGUgKyBcIjpcIiArIGV4cGVjdGVkU3RhdGUpO1xuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLnJlbmV3U3RhdHVzICsgZXhwZWN0ZWRTdGF0ZSwgQ29uc3RhbnRzLnRva2VuUmVuZXdTdGF0dXNJblByb2dyZXNzKTtcbiAgICB0aGlzLmxvYWRGcmFtZSh1cmxOYXZpZ2F0ZSwgZnJhbWVOYW1lKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMucmVuZXdTdGF0dXMgKyBleHBlY3RlZFN0YXRlKSA9PT0gQ29uc3RhbnRzLnRva2VuUmVuZXdTdGF0dXNJblByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZmFpbCB0aGUgaWZyYW1lIHNlc3Npb24gaWYgaXRcInMgaW4gcGVuZGluZyBzdGF0ZVxuICAgICAgICAgIHRoaXMuX2xvZ2dlci52ZXJib3NlKFwiTG9hZGluZyBmcmFtZSBoYXMgdGltZWQgb3V0IGFmdGVyOiBcIiArICh0aGlzLmxvYWRGcmFtZVRpbWVvdXQgLyAxMDAwKSArIFwiIHNlY29uZHMgZm9yIHNjb3BlIFwiICsgc2NvcGUgKyBcIjpcIiArIGV4cGVjdGVkU3RhdGUpO1xuICAgICAgICAgIGlmIChleHBlY3RlZFN0YXRlICYmIHdpbmRvdy5jYWxsQmFja01hcHBlZFRvUmVuZXdTdGF0ZXNbZXhwZWN0ZWRTdGF0ZV0pIHtcbiAgICAgICAgICAgICAgd2luZG93LmNhbGxCYWNrTWFwcGVkVG9SZW5ld1N0YXRlc1tleHBlY3RlZFN0YXRlXShcIlRva2VuIHJlbmV3YWwgb3BlcmF0aW9uIGZhaWxlZCBkdWUgdG8gdGltZW91dFwiLCBudWxsLCBcIlRva2VuIFJlbmV3YWwgRmFpbGVkXCIsIENvbnN0YW50cy5hY2Nlc3NUb2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5yZW5ld1N0YXR1cyArIGV4cGVjdGVkU3RhdGUsIENvbnN0YW50cy50b2tlblJlbmV3U3RhdHVzQ2FuY2VsbGVkKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmxvYWRGcmFtZVRpbWVvdXQpO1xuICB9XG5cbiAgLypcbiAgICogTG9hZHMgaWZyYW1lIHdpdGggYXV0aG9yaXphdGlvbiBlbmRwb2ludCBVUkxcbiAgICogQGlnbm9yZVxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBwcml2YXRlIGxvYWRGcmFtZSh1cmxOYXZpZ2F0ZTogc3RyaW5nLCBmcmFtZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIFRoaXMgdHJpY2sgb3ZlcmNvbWVzIGlmcmFtZSBuYXZpZ2F0aW9uIGluIElFXG4gICAgLy8gSUUgZG9lcyBub3QgbG9hZCB0aGUgcGFnZSBjb25zaXN0ZW50bHkgaW4gaWZyYW1lXG4gICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJMb2FkRnJhbWU6IFwiICsgZnJhbWVOYW1lKTtcbiAgICB2YXIgZnJhbWVDaGVjayA9IGZyYW1lTmFtZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHZhciBmcmFtZUhhbmRsZSA9IHRoaXMuYWRkQWRhbEZyYW1lKGZyYW1lQ2hlY2spO1xuICAgICAgaWYgKGZyYW1lSGFuZGxlLnNyYyA9PT0gXCJcIiB8fCBmcmFtZUhhbmRsZS5zcmMgPT09IFwiYWJvdXQ6YmxhbmtcIikge1xuICAgICAgICAgIGZyYW1lSGFuZGxlLnNyYyA9IHVybE5hdmlnYXRlO1xuICAgICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvUGlpKFwiRnJhbWUgTmFtZSA6IFwiICsgZnJhbWVOYW1lICsgXCIgTmF2aWdhdGVkIHRvOiBcIiArIHVybE5hdmlnYXRlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgNTAwKTtcbiAgfVxuXG4gIC8qXG4gICAqIEFkZHMgdGhlIGhpZGRlbiBpZnJhbWUgZm9yIHNpbGVudCB0b2tlbiByZW5ld2FsLlxuICAgKiBAaWdub3JlXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgYWRkQWRhbEZyYW1lKGlmcmFtZUlkOiBzdHJpbmcpOiBIVE1MSUZyYW1lRWxlbWVudCB7XG4gICAgaWYgKHR5cGVvZiBpZnJhbWVJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJBZGQgbXNhbCBmcmFtZSB0byBkb2N1bWVudDpcIiArIGlmcmFtZUlkKTtcbiAgICBsZXQgYWRhbEZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWZyYW1lSWQpIGFzIEhUTUxJRnJhbWVFbGVtZW50O1xuICAgIGlmICghYWRhbEZyYW1lKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAmJlxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNU0lFIDUuMFwiKSA9PT0gLTEpKSB7XG4gICAgICAgIGNvbnN0IGlmciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgIGlmci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZnJhbWVJZCk7XG4gICAgICAgIGlmci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgaWZyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBpZnIuc3R5bGUud2lkdGggPSBpZnIuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgICAgIGlmci5zdHlsZS5ib3JkZXIgPSBcIjBcIjtcbiAgICAgICAgYWRhbEZyYW1lID0gKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXS5hcHBlbmRDaGlsZChpZnIpIGFzIEhUTUxJRnJhbWVFbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5Lmluc2VydEFkamFjZW50SFRNTCkge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIFwiPGlmcmFtZSBuYW1lPSdcIiArIGlmcmFtZUlkICsgXCInIGlkPSdcIiArIGlmcmFtZUlkICsgXCInIHN0eWxlPSdkaXNwbGF5Om5vbmUnPjwvaWZyYW1lPlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdy5mcmFtZXMgJiYgd2luZG93LmZyYW1lc1tpZnJhbWVJZF0pIHtcbiAgICAgICAgYWRhbEZyYW1lID0gd2luZG93LmZyYW1lc1tpZnJhbWVJZF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYWxGcmFtZTtcbiAgfVxuXG4gIC8qXG4gICAqIEFjcXVpcmVzIGFjY2VzcyB0b2tlbiB1c2luZyBhIGhpZGRlbiBpZnJhbWUuXG4gICAqIEBpZ25vcmVcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSByZW5ld1Rva2VuKHNjb3BlczogQXJyYXk8c3RyaW5nPiwgcmVzb2x2ZTogRnVuY3Rpb24sIHJlamVjdDogRnVuY3Rpb24sIHVzZXI6IFVzZXIsIGF1dGhlbnRpY2F0aW9uUmVxdWVzdDogQXV0aGVudGljYXRpb25SZXF1ZXN0UGFyYW1ldGVycywgZXh0cmFRdWVyeVBhcmFtZXRlcnM/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBzY29wZSA9IHNjb3Blcy5qb2luKFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuX2xvZ2dlci52ZXJib3NlKFwicmVuZXdUb2tlbiBpcyBjYWxsZWQgZm9yIHNjb3BlOlwiICsgc2NvcGUpO1xuICAgIGNvbnN0IGZyYW1lSGFuZGxlID0gdGhpcy5hZGRBZGFsRnJhbWUoXCJtc2FsUmVuZXdGcmFtZVwiICsgc2NvcGUpO1xuICAgIGlmIChleHRyYVF1ZXJ5UGFyYW1ldGVycykge1xuICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0LmV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gZXh0cmFRdWVyeVBhcmFtZXRlcnM7XG4gICAgfVxuXG4gICAgdmFyIGFjcXVpcmVUb2tlblVzZXJLZXk7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgICAgYWNxdWlyZVRva2VuVXNlcktleSA9IENvbnN0YW50cy5hY3F1aXJlVG9rZW5Vc2VyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgdXNlci51c2VySWRlbnRpZmllciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFjcXVpcmVUb2tlblVzZXJLZXkgPSBDb25zdGFudHMuYWNxdWlyZVRva2VuVXNlciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciAgKyBDb25zdGFudHMubm9fdXNlciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShhY3F1aXJlVG9rZW5Vc2VyS2V5LCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgY29uc3QgYXV0aG9yaXR5S2V5ID0gQ29uc3RhbnRzLmF1dGhvcml0eSArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShhdXRob3JpdHlLZXksIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5hdXRob3JpdHkpO1xuICAgIC8vIHJlbmV3IGhhcHBlbnMgaW4gaWZyYW1lLCBzbyBpdCBrZWVwcyBqYXZhc2NyaXB0IGNvbnRleHRcbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubm9uY2VJZFRva2VuLCBhdXRoZW50aWNhdGlvblJlcXVlc3Qubm9uY2UpO1xuICAgIHRoaXMuX2xvZ2dlci52ZXJib3NlKFwiUmVuZXcgdG9rZW4gRXhwZWN0ZWQgc3RhdGU6IFwiICsgYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlKTtcbiAgICBsZXQgdXJsTmF2aWdhdGUgPSBVdGlscy51cmxSZW1vdmVRdWVyeVN0cmluZ1BhcmFtZXRlcihhdXRoZW50aWNhdGlvblJlcXVlc3QuY3JlYXRlTmF2aWdhdGVVcmwoc2NvcGVzKSwgQ29uc3RhbnRzLnByb21wdCkgKyBDb25zdGFudHMucHJvbXB0X25vbmU7XG4gICAgdXJsTmF2aWdhdGUgPSB0aGlzLmFkZEhpbnRQYXJhbWV0ZXJzKHVybE5hdmlnYXRlLCB1c2VyKTtcbiAgICB3aW5kb3cucmVuZXdTdGF0ZXMucHVzaChhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGUpO1xuICAgIHdpbmRvdy5yZXF1ZXN0VHlwZSA9IENvbnN0YW50cy5yZW5ld1Rva2VuO1xuICAgIHRoaXMucmVnaXN0ZXJDYWxsYmFjayhhdXRoZW50aWNhdGlvblJlcXVlc3Quc3RhdGUsIHNjb3BlLCByZXNvbHZlLCByZWplY3QpO1xuICAgIHRoaXMuX2xvZ2dlci5pbmZvUGlpKFwiTmF2aWdhdGUgdG86XCIgKyB1cmxOYXZpZ2F0ZSk7XG4gICAgZnJhbWVIYW5kbGUuc3JjID0gXCJhYm91dDpibGFua1wiO1xuICAgIHRoaXMubG9hZElmcmFtZVRpbWVvdXQodXJsTmF2aWdhdGUsIFwibXNhbFJlbmV3RnJhbWVcIiArIHNjb3BlLCBzY29wZSk7XG4gIH1cblxuICAvKlxuICAgKiBSZW5ld3MgaWR0b2tlbiBmb3IgYXBwXCJzIG93biBiYWNrZW5kIHdoZW4gY2xpZW50SWQgaXMgcGFzc2VkIGFzIGEgc2luZ2xlIHNjb3BlIGluIHRoZSBzY29wZXMgYXJyYXkuXG4gICAqIEBpZ25vcmVcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSByZW5ld0lkVG9rZW4oc2NvcGVzOiBBcnJheTxzdHJpbmc+LCByZXNvbHZlOiBGdW5jdGlvbiwgcmVqZWN0OiBGdW5jdGlvbiwgdXNlcjogVXNlciwgYXV0aGVudGljYXRpb25SZXF1ZXN0OiBBdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzLCBleHRyYVF1ZXJ5UGFyYW1ldGVycz86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHNjb3BlID0gc2NvcGVzLmpvaW4oXCIgXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJyZW5ld2lkVG9rZW4gaXMgY2FsbGVkXCIpO1xuICAgIGNvbnN0IGZyYW1lSGFuZGxlID0gdGhpcy5hZGRBZGFsRnJhbWUoXCJtc2FsSWRUb2tlbkZyYW1lXCIpO1xuICAgIGlmIChleHRyYVF1ZXJ5UGFyYW1ldGVycykge1xuICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0LmV4dHJhUXVlcnlQYXJhbWV0ZXJzID0gZXh0cmFRdWVyeVBhcmFtZXRlcnM7XG4gICAgfVxuXG4gICAgdmFyIGFjcXVpcmVUb2tlblVzZXJLZXk7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgICAgYWNxdWlyZVRva2VuVXNlcktleSA9IENvbnN0YW50cy5hY3F1aXJlVG9rZW5Vc2VyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgdXNlci51c2VySWRlbnRpZmllciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFjcXVpcmVUb2tlblVzZXJLZXkgPSBDb25zdGFudHMuYWNxdWlyZVRva2VuVXNlciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIENvbnN0YW50cy5ub191c2VyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlO1xuICAgIH1cbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShhY3F1aXJlVG9rZW5Vc2VyS2V5LCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgY29uc3QgYXV0aG9yaXR5S2V5ID0gQ29uc3RhbnRzLmF1dGhvcml0eSArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShhdXRob3JpdHlLZXksIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5hdXRob3JpdHkpO1xuICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5ub25jZUlkVG9rZW4sIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5ub25jZSk7XG4gICAgdGhpcy5fbG9nZ2VyLnZlcmJvc2UoXCJSZW5ldyBJZHRva2VuIEV4cGVjdGVkIHN0YXRlOiBcIiArIGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZSk7XG4gICAgbGV0IHVybE5hdmlnYXRlID0gVXRpbHMudXJsUmVtb3ZlUXVlcnlTdHJpbmdQYXJhbWV0ZXIoYXV0aGVudGljYXRpb25SZXF1ZXN0LmNyZWF0ZU5hdmlnYXRlVXJsKHNjb3BlcyksIENvbnN0YW50cy5wcm9tcHQpICsgQ29uc3RhbnRzLnByb21wdF9ub25lO1xuICAgIHVybE5hdmlnYXRlID0gdGhpcy5hZGRIaW50UGFyYW1ldGVycyh1cmxOYXZpZ2F0ZSwgdXNlcik7XG4gICAgaWYgKHRoaXMuX3NpbGVudExvZ2luKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0VHlwZSA9IENvbnN0YW50cy5sb2dpbjtcbiAgICAgICAgdGhpcy5fc2lsZW50QXV0aGVudGljYXRpb25TdGF0ZSA9IGF1dGhlbnRpY2F0aW9uUmVxdWVzdC5zdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVxdWVzdFR5cGUgPSBDb25zdGFudHMucmVuZXdUb2tlbjtcbiAgICAgICAgd2luZG93LnJlbmV3U3RhdGVzLnB1c2goYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlZ2lzdGVyQ2FsbGJhY2soYXV0aGVudGljYXRpb25SZXF1ZXN0LnN0YXRlLCB0aGlzLmNsaWVudElkLCByZXNvbHZlLCByZWplY3QpO1xuICAgIHRoaXMuX2xvZ2dlci5pbmZvUGlpKFwiTmF2aWdhdGUgdG86XCIgKyB1cmxOYXZpZ2F0ZSk7XG4gICAgZnJhbWVIYW5kbGUuc3JjID0gXCJhYm91dDpibGFua1wiO1xuICAgIHRoaXMubG9hZElmcmFtZVRpbWVvdXQodXJsTmF2aWdhdGUsIFwibXNhbElkVG9rZW5GcmFtZVwiLCB0aGlzLmNsaWVudElkKTtcbiAgfVxuXG4gIC8qXG4gICAgKiBSZXR1cm5zIHRoZSBzaWduZWQgaW4gdXNlciAocmVjZWl2ZWQgZnJvbSBhIHVzZXIgb2JqZWN0IGNyZWF0ZWQgYXQgdGhlIHRpbWUgb2YgbG9naW4pIG9yIG51bGwuXG4gICAgKi9cbiAgZ2V0VXNlcigpOiBVc2VyIHtcbiAgICAvLyBpZFRva2VuIGlzIGZpcnN0IGNhbGxcbiAgICBpZiAodGhpcy5fdXNlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX3VzZXI7XG4gICAgfVxuXG4gICAgLy8gZnJhbWUgaXMgdXNlZCB0byBnZXQgaWRUb2tlblxuICAgIGNvbnN0IHJhd0lkVG9rZW4gPSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMuaWRUb2tlbktleSk7XG4gICAgY29uc3QgcmF3Q2xpZW50SW5mbyA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy5tc2FsQ2xpZW50SW5mbyk7XG4gICAgaWYgKCFVdGlscy5pc0VtcHR5KHJhd0lkVG9rZW4pICYmICFVdGlscy5pc0VtcHR5KHJhd0NsaWVudEluZm8pKSB7XG4gICAgICBjb25zdCBpZFRva2VuID0gbmV3IElkVG9rZW4ocmF3SWRUb2tlbik7XG4gICAgICBjb25zdCBjbGllbnRJbmZvID0gbmV3IENsaWVudEluZm8ocmF3Q2xpZW50SW5mbyk7XG4gICAgICB0aGlzLl91c2VyID0gVXNlci5jcmVhdGVVc2VyKGlkVG9rZW4sIGNsaWVudEluZm8pO1xuICAgICAgcmV0dXJuIHRoaXMuX3VzZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKlxuICAgKiBUaGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBmb3IgcHJvY2Vzc2luZyB0aGUgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSB0aGUgU1RTLiBJdCBleHRyYWN0cyB0aGUgaGFzaCwgcHJvY2Vzc2VzIHRoZSB0b2tlbiBvciBlcnJvciBpbmZvcm1hdGlvbiBhbmQgc2F2ZXMgaXQgaW4gdGhlIGNhY2hlLiBJdCB0aGVuXG4gICAqIGNhbGxzIHRoZSByZWdpc3RlcmVkIGNhbGxiYWNrcyBpbiBjYXNlIG9mIHJlZGlyZWN0IG9yIHJlc29sdmVzIHRoZSBwcm9taXNlcyB3aXRoIHRoZSByZXN1bHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbaGFzaD13aW5kb3cubG9jYXRpb24uaGFzaF0gLSBIYXNoIGZyYWdtZW50IG9mIFVybC5cbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVBdXRoZW50aWNhdGlvblJlc3BvbnNlKGhhc2g6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChoYXNoID09IG51bGwpIHtcbiAgICAgIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IG51bGw7XG4gICAgdmFyIGlzUG9wdXA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB2YXIgaXNXaW5kb3dPcGVuZXJNc2FsID0gZmFsc2U7XG5cbiAgICB0cnkge1xuICAgICAgICBpc1dpbmRvd09wZW5lck1zYWwgPSB3aW5kb3cub3BlbmVyICYmIHdpbmRvdy5vcGVuZXIubXNhbCAmJiB3aW5kb3cub3BlbmVyLm1zYWwgIT09IHdpbmRvdy5tc2FsO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBlcnIgPSBTZWN1cml0eUVycm9yOiBCbG9ja2VkIGEgZnJhbWUgd2l0aCBvcmlnaW4gXCJbdXJsXVwiIGZyb20gYWNjZXNzaW5nIGEgY3Jvc3Mtb3JpZ2luIGZyYW1lLlxuICAgICAgICBpc1dpbmRvd09wZW5lck1zYWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaXNXaW5kb3dPcGVuZXJNc2FsKSB7XG4gICAgICAgIHNlbGYgPSB3aW5kb3cub3BlbmVyLm1zYWw7XG4gICAgICAgIGlzUG9wdXAgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdy5wYXJlbnQubXNhbCkge1xuICAgICAgc2VsZiA9IHdpbmRvdy5wYXJlbnQubXNhbDtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0SW5mbyA9IHNlbGYuZ2V0UmVxdWVzdEluZm8oaGFzaCk7IC8vaWYod2luZG93LnBhcmVudCE9PXdpbmRvdyksIGJ5IHVzaW5nIHNlbGYsIHdpbmRvdy5wYXJlbnQgYmVjb21lcyBlcXVhbCB0byB3aW5kb3cgaW4gZ2V0UmVxdWVzdEluZm8gbWV0aG9kIHNwZWNpZmljYWxseVxuICAgIGxldCB0b2tlbjogc3RyaW5nID0gbnVsbCwgdG9rZW5SZWNlaXZlZENhbGxiYWNrOiAoZXJyb3JEZXNjOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcsIGVycm9yOiBzdHJpbmcsIHRva2VuVHlwZTogc3RyaW5nKSA9PiB2b2lkID0gbnVsbCwgdG9rZW5UeXBlOiBzdHJpbmcsIHNhdmVUb2tlbjogYm9vbGVhbiA9IHRydWU7XG4gICAgc2VsZi5fbG9nZ2VyLmluZm8oXCJSZXR1cm5lZCBmcm9tIHJlZGlyZWN0IHVybFwiKTtcbiAgICBpZiAod2luZG93LnBhcmVudCAhPT0gd2luZG93ICYmIHdpbmRvdy5wYXJlbnQubXNhbCkge1xuICAgICAgICB0b2tlblJlY2VpdmVkQ2FsbGJhY2sgPSB3aW5kb3cucGFyZW50LmNhbGxCYWNrTWFwcGVkVG9SZW5ld1N0YXRlc1tyZXF1ZXN0SW5mby5zdGF0ZVJlc3BvbnNlXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNXaW5kb3dPcGVuZXJNc2FsKSB7XG4gICAgICAgIHRva2VuUmVjZWl2ZWRDYWxsYmFjayA9IHdpbmRvdy5vcGVuZXIuY2FsbEJhY2tNYXBwZWRUb1JlbmV3U3RhdGVzW3JlcXVlc3RJbmZvLnN0YXRlUmVzcG9uc2VdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHNlbGYuX25hdmlnYXRlVG9Mb2dpblJlcXVlc3RVcmwpIHtcbiAgICAgICAgICAgIHRva2VuUmVjZWl2ZWRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMudXJsSGFzaCwgaGFzaCk7XG4gICAgICAgICAgICBzYXZlVG9rZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFyZW50ID09PSB3aW5kb3cgJiYgIWlzUG9wdXApIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHNlbGYuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy5sb2dpblJlcXVlc3QsIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b2tlblJlY2VpdmVkQ2FsbGJhY2sgPSBzZWxmLl90b2tlblJlY2VpdmVkQ2FsbGJhY2s7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHNlbGYuc2F2ZVRva2VuRnJvbUhhc2gocmVxdWVzdEluZm8pO1xuXG4gICAgaWYgKChyZXF1ZXN0SW5mby5yZXF1ZXN0VHlwZSA9PT0gQ29uc3RhbnRzLnJlbmV3VG9rZW4pICYmIHdpbmRvdy5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5wYXJlbnQgIT09IHdpbmRvdykge1xuICAgICAgICAgICAgc2VsZi5fbG9nZ2VyLnZlcmJvc2UoXCJXaW5kb3cgaXMgaW4gaWZyYW1lLCBhY3F1aXJpbmcgdG9rZW4gc2lsZW50bHlcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLl9sb2dnZXIudmVyYm9zZShcImFjcXVpcmluZyB0b2tlbiBpbnRlcmFjdGl2ZSBpbiBwcm9ncmVzc1wiKTtcbiAgICAgICAgfVxuXG4gICAgdG9rZW4gPSByZXF1ZXN0SW5mby5wYXJhbWV0ZXJzW0NvbnN0YW50cy5hY2Nlc3NUb2tlbl0gfHwgcmVxdWVzdEluZm8ucGFyYW1ldGVyc1tDb25zdGFudHMuaWRUb2tlbl07XG4gICAgdG9rZW5UeXBlID0gQ29uc3RhbnRzLmFjY2Vzc1Rva2VuO1xuICAgIH0gZWxzZSBpZiAocmVxdWVzdEluZm8ucmVxdWVzdFR5cGUgPT09IENvbnN0YW50cy5sb2dpbikge1xuICAgIHRva2VuID0gcmVxdWVzdEluZm8ucGFyYW1ldGVyc1tDb25zdGFudHMuaWRUb2tlbl07XG4gICAgdG9rZW5UeXBlID0gQ29uc3RhbnRzLmlkVG9rZW47XG4gICAgfVxuXG4gICAgdmFyIGVycm9yRGVzYyA9IHJlcXVlc3RJbmZvLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yRGVzY3JpcHRpb25dO1xuICAgIHZhciBlcnJvciA9IHJlcXVlc3RJbmZvLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yXTtcbiAgICB0cnkge1xuICAgICAgICBpZiAodG9rZW5SZWNlaXZlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAvL1dlIHNob3VsZCBvbmx5IHNlbmQgdGhlIHN0YWUgYmFjayB0byB0aGUgZGV2ZWxvcGVyIGlmIGl0IG1hdGNoZXMgd2l0aCB3aGF0IHdlIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgICAgaWYgKHJlcXVlc3RJbmZvLnN0YXRlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0b2tlblJlY2VpdmVkQ2FsbGJhY2suY2FsbChzZWxmLCBlcnJvckRlc2MsIHRva2VuLCBlcnJvciwgdG9rZW5UeXBlLCB0aGlzLmdldFVzZXJTdGF0ZShyZXF1ZXN0SW5mby5zdGF0ZVJlc3BvbnNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlblJlY2VpdmVkQ2FsbGJhY2suY2FsbChzZWxmLCBlcnJvckRlc2MsIHRva2VuLCBlcnJvciwgdG9rZW5UeXBlLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNlbGYuX2xvZ2dlci5lcnJvcihcIkVycm9yIG9jY3VycmVkIGluIHRva2VuIHJlY2VpdmVkIGNhbGxiYWNrIGZ1bmN0aW9uOiBcIiArIGVycik7XG4gICAgfVxuICAgIGlmIChpc1dpbmRvd09wZW5lck1zYWwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aW5kb3cub3BlbmVyLm9wZW5lZFdpbmRvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuZXIub3BlbmVkV2luZG93c1tpXS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogVGhpcyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgZm9yIHByb2Nlc3NpbmcgdGhlIHJlc3BvbnNlIHJlY2VpdmVkIGZyb20gQUFELiBJdCBleHRyYWN0cyB0aGUgaGFzaCwgcHJvY2Vzc2VzIHRoZSB0b2tlbiBvciBlcnJvciwgc2F2ZXMgaXQgaW4gdGhlIGNhY2hlIGFuZCBjYWxscyB0aGUgcmVnaXN0ZXJlZCBjYWxsYmFja3Mgd2l0aCB0aGUgcmVzdWx0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aG9yaXR5IGF1dGhvcml0eSByZWNlaXZlZCBpbiB0aGUgcmVkaXJlY3QgcmVzcG9uc2UgZnJvbSBBQUQuXG4gICAqIEBwYXJhbSB7VG9rZW5SZXNwb25zZX0gcmVxdWVzdEluZm8gYW4gb2JqZWN0IGNyZWF0ZWQgZnJvbSB0aGUgcmVkaXJlY3QgcmVzcG9uc2UgZnJvbSBBQUQgY29tcHJpc2luZyBvZiB0aGUga2V5cyAtIHBhcmFtZXRlcnMsIHJlcXVlc3RUeXBlLCBzdGF0ZU1hdGNoLCBzdGF0ZVJlc3BvbnNlIGFuZCB2YWxpZC5cbiAgICogQHBhcmFtIHtVc2VyfSB1c2VyIHVzZXIgb2JqZWN0IGZvciB3aGljaCBzY29wZXMgYXJlIGNvbnNlbnRlZCBmb3IuIFRoZSBkZWZhdWx0IHVzZXIgaXMgdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgKiBAcGFyYW0ge0NsaWVudEluZm99IGNsaWVudEluZm8gY2xpZW50SW5mbyByZWNlaXZlZCBhcyBwYXJ0IG9mIHRoZSByZXNwb25zZSBjb21wcmlzaW5nIG9mIGZpZWxkcyB1aWQgYW5kIHV0aWQuXG4gICAqIEBwYXJhbSB7SWRUb2tlbn0gaWRUb2tlbiBpZFRva2VuIHJlY2VpdmVkIGFzIHBhcnQgb2YgdGhlIHJlc3BvbnNlLlxuICAgKiBAaWdub3JlXG4gICAqIEBwcml2YXRlXG4gICAqIEBoaWRkZW5cbiAgICovXG4gICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbCAqL1xuICBwcml2YXRlIHNhdmVBY2Nlc3NUb2tlbihhdXRob3JpdHk6IHN0cmluZywgdG9rZW5SZXNwb25zZTogVG9rZW5SZXNwb25zZSwgdXNlcjogVXNlciwgY2xpZW50SW5mbzogc3RyaW5nLCBpZFRva2VuOiBJZFRva2VuKTogdm9pZCB7XG4gICAgbGV0IHNjb3BlOiBzdHJpbmc7XG4gICAgbGV0IGNsaWVudE9iajogQ2xpZW50SW5mbyA9IG5ldyBDbGllbnRJbmZvKGNsaWVudEluZm8pO1xuICAgIGlmICh0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoXCJzY29wZVwiKSkge1xuICAgICAgc2NvcGUgPSB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbXCJzY29wZVwiXTtcbiAgICAgIGNvbnN0IGNvbnNlbnRlZFNjb3BlcyA9IHNjb3BlLnNwbGl0KFwiIFwiKTtcbiAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuQ2FjaGVJdGVtcyA9XG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRBbGxBY2Nlc3NUb2tlbnModGhpcy5jbGllbnRJZCwgYXV0aG9yaXR5KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWNjZXNzVG9rZW5DYWNoZUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuQ2FjaGVJdGVtID0gYWNjZXNzVG9rZW5DYWNoZUl0ZW1zW2ldO1xuICAgICAgICBpZiAoYWNjZXNzVG9rZW5DYWNoZUl0ZW0ua2V5LnVzZXJJZGVudGlmaWVyID09PSB1c2VyLnVzZXJJZGVudGlmaWVyKSB7XG4gICAgICAgICAgY29uc3QgY2FjaGVkU2NvcGVzID0gYWNjZXNzVG9rZW5DYWNoZUl0ZW0ua2V5LnNjb3Blcy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgaWYgKFV0aWxzLmlzSW50ZXJzZWN0aW5nU2NvcGVzKGNhY2hlZFNjb3BlcywgY29uc2VudGVkU2NvcGVzKSkge1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2UucmVtb3ZlSXRlbShKU09OLnN0cmluZ2lmeShhY2Nlc3NUb2tlbkNhY2hlSXRlbS5rZXkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuS2V5ID0gbmV3IEFjY2Vzc1Rva2VuS2V5KGF1dGhvcml0eSwgdGhpcy5jbGllbnRJZCwgc2NvcGUsIGNsaWVudE9iai51aWQsIGNsaWVudE9iai51dGlkKTtcbiAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuVmFsdWUgPSBuZXcgQWNjZXNzVG9rZW5WYWx1ZSh0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmFjY2Vzc1Rva2VuXSwgaWRUb2tlbi5yYXdJZFRva2VuLCBVdGlscy5leHBpcmVzSW4odG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW0NvbnN0YW50cy5leHBpcmVzSW5dKS50b1N0cmluZygpLCBjbGllbnRJbmZvKTtcbiAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKEpTT04uc3RyaW5naWZ5KGFjY2Vzc1Rva2VuS2V5KSwgSlNPTi5zdHJpbmdpZnkoYWNjZXNzVG9rZW5WYWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY29wZSA9IHRoaXMuY2xpZW50SWQ7XG4gICAgICBjb25zdCBhY2Nlc3NUb2tlbktleSA9IG5ldyBBY2Nlc3NUb2tlbktleShhdXRob3JpdHksIHRoaXMuY2xpZW50SWQsIHNjb3BlLCBjbGllbnRPYmoudWlkLCBjbGllbnRPYmoudXRpZCk7XG4gICAgICBjb25zdCBhY2Nlc3NUb2tlblZhbHVlID0gbmV3IEFjY2Vzc1Rva2VuVmFsdWUodG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW0NvbnN0YW50cy5pZFRva2VuXSwgdG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW0NvbnN0YW50cy5pZFRva2VuXSwgaWRUb2tlbi5leHBpcmF0aW9uLCBjbGllbnRJbmZvKTtcbiAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKEpTT04uc3RyaW5naWZ5KGFjY2Vzc1Rva2VuS2V5KSwgSlNPTi5zdHJpbmdpZnkoYWNjZXNzVG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFNhdmVzIHRva2VuIG9yIGVycm9yIHJlY2VpdmVkIGluIHRoZSByZXNwb25zZSBmcm9tIEFBRCBpbiB0aGUgY2FjaGUuIEluIGNhc2Ugb2YgaWRfdG9rZW4sIGl0IGFsc28gY3JlYXRlcyB0aGUgdXNlciBvYmplY3QuXG4gICAqIEBpZ25vcmVcbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHJvdGVjdGVkIHNhdmVUb2tlbkZyb21IYXNoKHRva2VuUmVzcG9uc2U6IFRva2VuUmVzcG9uc2UpOiB2b2lkIHtcbiAgICB0aGlzLl9sb2dnZXIuaW5mbyhcIlN0YXRlIHN0YXR1czpcIiArIHRva2VuUmVzcG9uc2Uuc3RhdGVNYXRjaCArIFwiOyBSZXF1ZXN0IHR5cGU6XCIgKyB0b2tlblJlc3BvbnNlLnJlcXVlc3RUeXBlKTtcbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yLCBcIlwiKTtcbiAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yRGVzY3JpcHRpb24sIFwiXCIpO1xuICAgICAgdmFyIHNjb3BlOiBzdHJpbmcgPSBcIlwiO1xuICAgICAgdmFyIGF1dGhvcml0eUtleTogc3RyaW5nID0gXCJcIjtcbiAgICAgIHZhciBhY3F1aXJlVG9rZW5Vc2VyS2V5OiBzdHJpbmcgPSBcIlwiO1xuICAgIGlmICh0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoXCJzY29wZVwiKSkge1xuICAgICAgc2NvcGUgPSB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbXCJzY29wZVwiXS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHNjb3BlID0gdGhpcy5jbGllbnRJZDtcbiAgICB9XG5cbiAgICAvLyBSZWNvcmQgZXJyb3JcbiAgICBpZiAodG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KENvbnN0YW50cy5lcnJvckRlc2NyaXB0aW9uKSB8fCB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQ29uc3RhbnRzLmVycm9yKSkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmluZm9QaWkoXCJFcnJvciA6XCIgKyB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yXSArIFwiOyBFcnJvciBkZXNjcmlwdGlvbjpcIiArIHRva2VuUmVzcG9uc2UucGFyYW1ldGVyc1tDb25zdGFudHMuZXJyb3JEZXNjcmlwdGlvbl0pO1xuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm1zYWxFcnJvciwgdG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW1wiZXJyb3JcIl0pO1xuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm1zYWxFcnJvckRlc2NyaXB0aW9uLCB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yRGVzY3JpcHRpb25dKTtcbiAgICAgIGlmICh0b2tlblJlc3BvbnNlLnJlcXVlc3RUeXBlID09PSBDb25zdGFudHMubG9naW4pIHtcbiAgICAgICAgdGhpcy5fbG9naW5JblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5sb2dpbkVycm9yLCB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yRGVzY3JpcHRpb25dICsgXCI6XCIgKyB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmVycm9yXSk7XG4gICAgICAgIGF1dGhvcml0eUtleSA9IENvbnN0YW50cy5hdXRob3JpdHkgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyB0b2tlblJlc3BvbnNlLnN0YXRlUmVzcG9uc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlblJlc3BvbnNlLnJlcXVlc3RUeXBlID09PSBDb25zdGFudHMucmVuZXdUb2tlbikge1xuICAgICAgICAgIHRoaXMuX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICBhdXRob3JpdHlLZXkgPSBDb25zdGFudHMuYXV0aG9yaXR5ICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgdG9rZW5SZXNwb25zZS5zdGF0ZVJlc3BvbnNlO1xuICAgICAgICAgIHZhciB1c2VyS2V5ID0gdGhpcy5nZXRVc2VyKCkgIT09IG51bGwgPyB0aGlzLmdldFVzZXIoKS51c2VySWRlbnRpZmllciA6IFwiXCI7XG4gICAgICAgICAgYWNxdWlyZVRva2VuVXNlcktleSA9IENvbnN0YW50cy5hY3F1aXJlVG9rZW5Vc2VyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgdXNlcktleSArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJdCBtdXN0IHZlcmlmeSB0aGUgc3RhdGUgZnJvbSByZWRpcmVjdFxuICAgICAgaWYgKHRva2VuUmVzcG9uc2Uuc3RhdGVNYXRjaCkge1xuICAgICAgICAvLyByZWNvcmQgdG9rZW5zIHRvIHN0b3JhZ2UgaWYgZXhpc3RzXG4gICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiU3RhdGUgaXMgcmlnaHRcIik7XG4gICAgICAgIGlmICh0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQ29uc3RhbnRzLnNlc3Npb25TdGF0ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5tc2FsU2Vzc2lvblN0YXRlLCB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLnNlc3Npb25TdGF0ZV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZFRva2VuOiBJZFRva2VuO1xuICAgICAgICB2YXIgY2xpZW50SW5mbzogc3RyaW5nID0gXCJcIjtcbiAgICAgICAgaWYgKHRva2VuUmVzcG9uc2UucGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShDb25zdGFudHMuYWNjZXNzVG9rZW4pKSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oXCJGcmFnbWVudCBoYXMgYWNjZXNzIHRva2VuXCIpO1xuICAgICAgICAgIHRoaXMuX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICBsZXQgdXNlcjogVXNlcjtcbiAgICAgICAgICBpZiAodG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KENvbnN0YW50cy5pZFRva2VuKSkge1xuICAgICAgICAgICAgaWRUb2tlbiA9IG5ldyBJZFRva2VuKHRva2VuUmVzcG9uc2UucGFyYW1ldGVyc1tDb25zdGFudHMuaWRUb2tlbl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZFRva2VuID0gbmV3IElkVG9rZW4odGhpcy5fY2FjaGVTdG9yYWdlLmdldEl0ZW0oQ29uc3RhbnRzLmlkVG9rZW5LZXkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF1dGhvcml0eUtleSA9IENvbnN0YW50cy5hdXRob3JpdHkgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyB0b2tlblJlc3BvbnNlLnN0YXRlUmVzcG9uc2U7XG4gICAgICAgICAgICBsZXQgYXV0aG9yaXR5OiBzdHJpbmcgPSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShhdXRob3JpdHlLZXksIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSk7XG4gICAgICAgICAgICBpZiAoIVV0aWxzLmlzRW1wdHkoYXV0aG9yaXR5KSkge1xuICAgICAgICAgICAgICAgIGF1dGhvcml0eSA9IFV0aWxzLnJlcGxhY2VGaXJzdFBhdGgoYXV0aG9yaXR5LCBpZFRva2VuLnRlbmFudElkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KENvbnN0YW50cy5jbGllbnRJbmZvKSkge1xuICAgICAgICAgICAgY2xpZW50SW5mbyA9IHRva2VuUmVzcG9uc2UucGFyYW1ldGVyc1tDb25zdGFudHMuY2xpZW50SW5mb107XG4gICAgICAgICAgICB1c2VyID0gVXNlci5jcmVhdGVVc2VyKGlkVG9rZW4sIG5ldyBDbGllbnRJbmZvKGNsaWVudEluZm8pKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLndhcm5pbmcoXCJDbGllbnRJbmZvIG5vdCByZWNlaXZlZCBpbiB0aGUgcmVzcG9uc2UgZnJvbSBBQURcIik7XG4gICAgICAgICAgICB1c2VyID0gVXNlci5jcmVhdGVVc2VyKGlkVG9rZW4sIG5ldyBDbGllbnRJbmZvKGNsaWVudEluZm8pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhY3F1aXJlVG9rZW5Vc2VyS2V5ID0gQ29uc3RhbnRzLmFjcXVpcmVUb2tlblVzZXIgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyB1c2VyLnVzZXJJZGVudGlmaWVyICsgQ29uc3RhbnRzLnJlc291cmNlRGVsaW1ldGVyICsgdG9rZW5SZXNwb25zZS5zdGF0ZVJlc3BvbnNlO1xuICAgICAgICAgICAgdmFyIGFjcXVpcmVUb2tlblVzZXJLZXlfbm91c2VyID0gQ29uc3RhbnRzLmFjcXVpcmVUb2tlblVzZXIgKyBDb25zdGFudHMucmVzb3VyY2VEZWxpbWV0ZXIgKyBDb25zdGFudHMubm9fdXNlciArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZTtcbiAgICAgICAgICAgIGxldCBjYWNoZWRVc2VyOiBzdHJpbmcgPSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShhY3F1aXJlVG9rZW5Vc2VyS2V5KTtcbiAgICAgICAgICAgIGxldCBhY3F1aXJlVG9rZW5Vc2VyOiBVc2VyO1xuICAgICAgICAgICAgaWYgKCFVdGlscy5pc0VtcHR5KGNhY2hlZFVzZXIpKSB7XG4gICAgICAgICAgICAgICAgYWNxdWlyZVRva2VuVXNlciA9IEpTT04ucGFyc2UoY2FjaGVkVXNlcik7XG4gICAgICAgICAgICBpZiAodXNlciAmJiBhY3F1aXJlVG9rZW5Vc2VyICYmIFV0aWxzLmNvbXBhcmVPYmplY3RzKHVzZXIsIGFjcXVpcmVUb2tlblVzZXIpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2F2ZUFjY2Vzc1Rva2VuKGF1dGhvcml0eSwgdG9rZW5SZXNwb25zZSwgdXNlciwgY2xpZW50SW5mbywgaWRUb2tlbik7XG4gICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFxuICAgICAgICAgICAgICAgIFwiVGhlIHVzZXIgb2JqZWN0IHJlY2VpdmVkIGluIHRoZSByZXNwb25zZSBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIHBhc3NlZCBpbiB0aGUgYWNxdWlyZVRva2VuIHJlcXVlc3RcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIud2FybmluZyhcbiAgICAgICAgICAgICAgICBcIlRoZSB1c2VyIG9iamVjdCBjcmVhdGVkIGZyb20gdGhlIHJlc3BvbnNlIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgb25lIHBhc3NlZCBpbiB0aGUgYWNxdWlyZVRva2VuIHJlcXVlc3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghVXRpbHMuaXNFbXB0eSh0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShhY3F1aXJlVG9rZW5Vc2VyS2V5X25vdXNlcikpKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNhdmVBY2Nlc3NUb2tlbihhdXRob3JpdHksIHRva2VuUmVzcG9uc2UsIHVzZXIsIGNsaWVudEluZm8sIGlkVG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQ29uc3RhbnRzLmlkVG9rZW4pKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuaW5mbyhcIkZyYWdtZW50IGhhcyBpZCB0b2tlblwiKTtcbiAgICAgICAgICAgIHRoaXMuX2xvZ2luSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWRUb2tlbiA9IG5ldyBJZFRva2VuKHRva2VuUmVzcG9uc2UucGFyYW1ldGVyc1tDb25zdGFudHMuaWRUb2tlbl0pO1xuICAgICAgICAgICAgaWYgKHRva2VuUmVzcG9uc2UucGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShDb25zdGFudHMuY2xpZW50SW5mbykpIHtcbiAgICAgICAgICAgICAgY2xpZW50SW5mbyA9IHRva2VuUmVzcG9uc2UucGFyYW1ldGVyc1tDb25zdGFudHMuY2xpZW50SW5mb107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIud2FybmluZyhcIkNsaWVudEluZm8gbm90IHJlY2VpdmVkIGluIHRoZSByZXNwb25zZSBmcm9tIEFBRFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXV0aG9yaXR5S2V5ID0gQ29uc3RhbnRzLmF1dGhvcml0eSArIENvbnN0YW50cy5yZXNvdXJjZURlbGltZXRlciArIHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZTtcbiAgICAgICAgICAgIGxldCBhdXRob3JpdHk6IHN0cmluZyA9IHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKGF1dGhvcml0eUtleSwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKTtcbiAgICAgICAgICAgIGlmICghVXRpbHMuaXNFbXB0eShhdXRob3JpdHkpKSB7XG4gICAgICAgICAgICAgIGF1dGhvcml0eSA9IFV0aWxzLnJlcGxhY2VGaXJzdFBhdGgoYXV0aG9yaXR5LCBpZFRva2VuLnRlbmFudElkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fdXNlciA9IFVzZXIuY3JlYXRlVXNlcihpZFRva2VuLCBuZXcgQ2xpZW50SW5mbyhjbGllbnRJbmZvKSk7XG4gICAgICAgICAgICBpZiAoaWRUb2tlbiAmJiBpZFRva2VuLm5vbmNlKSB7XG4gICAgICAgICAgICAgIGlmIChpZFRva2VuLm5vbmNlICE9PSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMubm9uY2VJZFRva2VuLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLl91c2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5sb2dpbkVycm9yLCBcIk5vbmNlIE1pc21hdGNoLiBFeHBlY3RlZCBOb25jZTogXCIgKyB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMubm9uY2VJZFRva2VuLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpICsgXCIsXCIgKyBcIkFjdHVhbCBOb25jZTogXCIgKyBpZFRva2VuLm5vbmNlKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcIk5vbmNlIE1pc21hdGNoLkV4cGVjdGVkIE5vbmNlOiBcIiArIHRoaXMuX2NhY2hlU3RvcmFnZS5nZXRJdGVtKENvbnN0YW50cy5ub25jZUlkVG9rZW4sIHRoaXMuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSkgKyBcIixcIiArIFwiQWN0dWFsIE5vbmNlOiBcIiArIGlkVG9rZW4ubm9uY2UpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5pZFRva2VuS2V5LCB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmlkVG9rZW5dKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbENsaWVudEluZm8sIGNsaWVudEluZm8pO1xuXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSBpZFRva2VuIGFzIGFjY2VzcyB0b2tlbiBmb3IgYXBwIGl0c2VsZlxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFjY2Vzc1Rva2VuKGF1dGhvcml0eSwgdG9rZW5SZXNwb25zZSwgdGhpcy5fdXNlciwgY2xpZW50SW5mbywgaWRUb2tlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF1dGhvcml0eUtleSA9IHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZTtcbiAgICAgICAgICAgICAgYWNxdWlyZVRva2VuVXNlcktleSA9IHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZTtcbiAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiSW52YWxpZCBpZF90b2tlbiByZWNlaXZlZCBpbiB0aGUgcmVzcG9uc2VcIik7XG4gICAgICAgICAgICAgIHRva2VuUmVzcG9uc2UucGFyYW1ldGVyc1tcImVycm9yXCJdID0gXCJpbnZhbGlkIGlkVG9rZW5cIjtcbiAgICAgICAgICAgICAgdG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW1wiZXJyb3JfZGVzY3JpcHRpb25cIl0gPSBcIkludmFsaWQgaWRUb2tlbi4gaWRUb2tlbjogXCIgKyB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmlkVG9rZW5dO1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yLCBcImludmFsaWQgaWRUb2tlblwiKTtcbiAgICAgICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm1zYWxFcnJvckRlc2NyaXB0aW9uLCBcIkludmFsaWQgaWRUb2tlbi4gaWRUb2tlbjogXCIgKyB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnNbQ29uc3RhbnRzLmlkVG9rZW5dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXV0aG9yaXR5S2V5ID0gdG9rZW5SZXNwb25zZS5zdGF0ZVJlc3BvbnNlO1xuICAgICAgICBhY3F1aXJlVG9rZW5Vc2VyS2V5ID0gdG9rZW5SZXNwb25zZS5zdGF0ZVJlc3BvbnNlO1xuICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoXCJTdGF0ZSBNaXNtYXRjaC5FeHBlY3RlZCBTdGF0ZTogXCIgKyB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMuc3RhdGVMb2dpbiwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKSArIFwiLFwiICsgXCJBY3R1YWwgU3RhdGU6IFwiICsgdG9rZW5SZXNwb25zZS5zdGF0ZVJlc3BvbnNlKTtcbiAgICAgICAgdG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW1wiZXJyb3JcIl0gPSBcIkludmFsaWRfc3RhdGVcIjtcbiAgICAgICAgdG9rZW5SZXNwb25zZS5wYXJhbWV0ZXJzW1wiZXJyb3JfZGVzY3JpcHRpb25cIl0gPSBcIkludmFsaWRfc3RhdGUuIHN0YXRlOiBcIiArIHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZTtcbiAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW0oQ29uc3RhbnRzLm1zYWxFcnJvciwgXCJJbnZhbGlkX3N0YXRlXCIpO1xuICAgICAgICB0aGlzLl9jYWNoZVN0b3JhZ2Uuc2V0SXRlbShDb25zdGFudHMubXNhbEVycm9yRGVzY3JpcHRpb24sIFwiSW52YWxpZF9zdGF0ZS4gc3RhdGU6IFwiICsgdG9rZW5SZXNwb25zZS5zdGF0ZVJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhY2hlU3RvcmFnZS5zZXRJdGVtKENvbnN0YW50cy5yZW5ld1N0YXR1cyArIHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZSwgQ29uc3RhbnRzLnRva2VuUmVuZXdTdGF0dXNDb21wbGV0ZWQpO1xuICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnJlbW92ZUFjcXVpcmVUb2tlbkVudHJpZXMoYXV0aG9yaXR5S2V5LCBhY3F1aXJlVG9rZW5Vc2VyS2V5KTtcbiAgICAgIC8vdGhpcyBpcyByZXF1aXJlZCBpZiBuYXZpZ2F0ZVRvTG9naW5SZXF1ZXN0VXJsPWZhbHNlXG4gICAgICBpZiAodGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKSB7XG4gICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLnNldEl0ZW1Db29raWUoYXV0aG9yaXR5S2V5LCBcIlwiLCAtMSk7XG4gICAgICAgICAgdGhpcy5fY2FjaGVTdG9yYWdlLmNsZWFyQ29va2llKCk7XG4gICAgICB9XG4gIH1cbiAgLyogdHNsaW50OmVuYWJsZTpuby1zdHJpbmctbGl0ZXJhbCAqL1xuXG4gIC8qXG4gICAqIENoZWNrcyBpZiB0aGUgcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgU1RTLiBJbiBjYXNlIG9mIHJlZGlyZWN0LCB0aGUgdXJsIGZyYWdtZW50IGhhcyBlaXRoZXIgaWRfdG9rZW4sIGFjY2Vzc190b2tlbiBvciBlcnJvci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggLSBIYXNoIHBhc3NlZCBmcm9tIHJlZGlyZWN0IHBhZ2UuXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgcmVzcG9uc2UgY29udGFpbnMgaWRfdG9rZW4sIGFjY2Vzc190b2tlbiBvciBlcnJvciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBpc0NhbGxiYWNrKGhhc2g6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGhhc2ggPSB0aGlzLmdldEhhc2goaGFzaCk7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IFV0aWxzLmRlc2VyaWFsaXplKGhhc2gpO1xuICAgIHJldHVybiAoXG4gICAgICBwYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KENvbnN0YW50cy5lcnJvckRlc2NyaXB0aW9uKSB8fFxuICAgICAgcGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShDb25zdGFudHMuZXJyb3IpIHx8XG4gICAgICBwYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KENvbnN0YW50cy5hY2Nlc3NUb2tlbikgfHxcbiAgICAgIHBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQ29uc3RhbnRzLmlkVG9rZW4pXG5cbiAgICApO1xuICB9XG5cbiAgLypcbiAgICogUmV0dXJucyB0aGUgYW5jaG9yIHBhcnQoIykgb2YgdGhlIFVSTFxuICAgKiBAaWdub3JlXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIHByaXZhdGUgZ2V0SGFzaChoYXNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChoYXNoLmluZGV4T2YoXCIjL1wiKSA+IC0xKSB7XG4gICAgICBoYXNoID0gaGFzaC5zdWJzdHJpbmcoaGFzaC5pbmRleE9mKFwiIy9cIikgKyAyKTtcbiAgICB9IGVsc2UgaWYgKGhhc2guaW5kZXhPZihcIiNcIikgPiAtMSkge1xuICAgICAgaGFzaCA9IGhhc2guc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIHJldHVybiBoYXNoO1xuICB9XG5cbiAgLypcbiAgICAqIENyZWF0ZXMgYSByZXF1ZXN0SW5mbyBvYmplY3QgZnJvbSB0aGUgVVJMIGZyYWdtZW50IGFuZCByZXR1cm5zIGl0LlxuICAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggIC0gIEhhc2ggcGFzc2VkIGZyb20gcmVkaXJlY3QgcGFnZVxuICAgICogQHJldHVybnMge1Rva2VuUmVzcG9uc2V9IGFuIG9iamVjdCBjcmVhdGVkIGZyb20gdGhlIHJlZGlyZWN0IHJlc3BvbnNlIGZyb20gQUFEIGNvbXByaXNpbmcgb2YgdGhlIGtleXMgLSBwYXJhbWV0ZXJzLCByZXF1ZXN0VHlwZSwgc3RhdGVNYXRjaCwgc3RhdGVSZXNwb25zZSBhbmQgdmFsaWQuXG4gICAgKiBAaWdub3JlXG4gICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgcHJvdGVjdGVkIGdldFJlcXVlc3RJbmZvKGhhc2g6IHN0cmluZyk6IFRva2VuUmVzcG9uc2Uge1xuICAgIGhhc2ggPSB0aGlzLmdldEhhc2goaGFzaCk7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IFV0aWxzLmRlc2VyaWFsaXplKGhhc2gpO1xuICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSBuZXcgVG9rZW5SZXNwb25zZSgpO1xuICAgIGlmIChwYXJhbWV0ZXJzKSB7XG4gICAgICB0b2tlblJlc3BvbnNlLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgaWYgKHBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQ29uc3RhbnRzLmVycm9yRGVzY3JpcHRpb24pIHx8XG4gICAgICAgIHBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQ29uc3RhbnRzLmVycm9yKSB8fFxuICAgICAgICBwYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KENvbnN0YW50cy5hY2Nlc3NUb2tlbikgfHxcbiAgICAgICAgcGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShDb25zdGFudHMuaWRUb2tlbikpIHtcbiAgICAgICAgdG9rZW5SZXNwb25zZS52YWxpZCA9IHRydWU7XG4gICAgICAgIC8vIHdoaWNoIGNhbGxcbiAgICAgICAgbGV0IHN0YXRlUmVzcG9uc2U6IHN0cmluZztcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoXCJzdGF0ZVwiKSkge1xuICAgICAgICAgICAgc3RhdGVSZXNwb25zZSA9IHBhcmFtZXRlcnMuc3RhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5SZXNwb25zZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRva2VuUmVzcG9uc2Uuc3RhdGVSZXNwb25zZSA9IHN0YXRlUmVzcG9uc2U7XG4gICAgICAgIC8vIGFzeW5jIGNhbGxzIGNhbiBmaXJlIGlmcmFtZSBhbmQgbG9naW4gcmVxdWVzdCBhdCB0aGUgc2FtZSB0aW1lIGlmIGRldmVsb3BlciBkb2VzIG5vdCB1c2UgdGhlIEFQSSBhcyBleHBlY3RlZFxuICAgICAgICAvLyBpbmNvbWluZyBjYWxsYmFjayBuZWVkcyB0byBiZSBsb29rZWQgdXAgdG8gZmluZCB0aGUgcmVxdWVzdCB0eXBlXG4gICAgICAgIGlmIChzdGF0ZVJlc3BvbnNlID09PSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMuc3RhdGVMb2dpbiwgdGhpcy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKSB8fCBzdGF0ZVJlc3BvbnNlID09PSB0aGlzLl9zaWxlbnRBdXRoZW50aWNhdGlvblN0YXRlKSB7IC8vIGxvZ2luUmVkaXJlY3RcbiAgICAgICAgICAgIHRva2VuUmVzcG9uc2UucmVxdWVzdFR5cGUgPSBDb25zdGFudHMubG9naW47XG4gICAgICAgICAgICB0b2tlblJlc3BvbnNlLnN0YXRlTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuUmVzcG9uc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGVSZXNwb25zZSA9PT0gdGhpcy5fY2FjaGVTdG9yYWdlLmdldEl0ZW0oQ29uc3RhbnRzLnN0YXRlQWNxdWlyZVRva2VuLCB0aGlzLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpKSB7IC8vYWNxdWlyZVRva2VuUmVkaXJlY3RcbiAgICAgICAgICAgIHRva2VuUmVzcG9uc2UucmVxdWVzdFR5cGUgPSBDb25zdGFudHMucmVuZXdUb2tlbjtcbiAgICAgICAgICAgIHRva2VuUmVzcG9uc2Uuc3RhdGVNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5SZXNwb25zZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGV4dGVybmFsIGFwaSByZXF1ZXN0cyBtYXkgaGF2ZSBtYW55IHJlbmV3dG9rZW4gcmVxdWVzdHMgZm9yIGRpZmZlcmVudCByZXNvdXJjZVxuICAgICAgICBpZiAoIXRva2VuUmVzcG9uc2Uuc3RhdGVNYXRjaCkge1xuICAgICAgICAgIHRva2VuUmVzcG9uc2UucmVxdWVzdFR5cGUgPSB3aW5kb3cucmVxdWVzdFR5cGU7XG4gICAgICAgICAgY29uc3Qgc3RhdGVzSW5QYXJlbnRDb250ZXh0ID0gd2luZG93LnJlbmV3U3RhdGVzO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGVzSW5QYXJlbnRDb250ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGVzSW5QYXJlbnRDb250ZXh0W2ldID09PSB0b2tlblJlc3BvbnNlLnN0YXRlUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgdG9rZW5SZXNwb25zZS5zdGF0ZU1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b2tlblJlc3BvbnNlO1xuICB9XG5cbiAgLypcbiAgICAqIEV4dHJhY3RzIHNjb3BlIHZhbHVlIGZyb20gdGhlIHN0YXRlIHNlbnQgd2l0aCB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cbiAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNjb3BlLlxuICAgICogQGlnbm9yZVxuICAgICogQGhpZGRlblxuICAgICovXG4gIHByaXZhdGUgZ2V0U2NvcGVGcm9tU3RhdGUoc3RhdGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICBjb25zdCBzcGxpdEluZGV4ID0gc3RhdGUuaW5kZXhPZihcInxcIik7XG4gICAgICBpZiAoc3BsaXRJbmRleCA+IC0xICYmIHNwbGl0SW5kZXggKyAxIDwgc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5zdWJzdHJpbmcoc3BsaXRJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gICAgLypcbiAgICAqIEV4dHJhY3RzIHN0YXRlIHZhbHVlIGZyb20gdGhlIHVzZXJTdGF0ZSBzZW50IHdpdGggdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuXG4gICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzY29wZS5cbiAgICAqIEBpZ25vcmVcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIGdldFVzZXJTdGF0ZSAoc3RhdGU6IHN0cmluZykge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0SW5kZXggPSBzdGF0ZS5pbmRleE9mKFwifFwiKTtcbiAgICAgICAgICAgIGlmIChzcGxpdEluZGV4ID4gLTEgJiYgc3BsaXRJbmRleCArIDEgPCBzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuc3Vic3RyaW5nKHNwbGl0SW5kZXggKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cblxuICAvKlxuICAgICogUmV0dXJucyB3aGV0aGVyIGN1cnJlbnQgd2luZG93IGlzIGluIGlmcmFtIGZvciB0b2tlbiByZW5ld2FsXG4gICAgKiBAaWdub3JlXG4gICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgcHJpdmF0ZSBpc0luSWZyYW1lKCkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5wYXJlbnQgIT09IHdpbmRvdztcbiAgfVxuXG4gIGxvZ2luSW5Qcm9ncmVzcygpOiBib29sZWFuIHtcbiAgICAgIHZhciBwZW5kaW5nQ2FsbGJhY2sgPSB0aGlzLl9jYWNoZVN0b3JhZ2UuZ2V0SXRlbShDb25zdGFudHMudXJsSGFzaCk7XG4gICAgICBpZiAocGVuZGluZ0NhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fbG9naW5JblByb2dyZXNzO1xuICB9XG5cbiBwcml2YXRlIGdldEhvc3RGcm9tVXJpKHVyaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIC8vIHJlbW92ZSBodHRwOi8vIG9yIGh0dHBzOi8vIGZyb20gdXJpXG4gICAgICB2YXIgZXh0cmFjdGVkVXJpID0gU3RyaW5nKHVyaSkucmVwbGFjZSgvXihodHRwcz86KVxcL1xcLy8sIFwiXCIpO1xuICAgICAgZXh0cmFjdGVkVXJpID0gZXh0cmFjdGVkVXJpLnNwbGl0KFwiL1wiKVswXTtcbiAgICAgIHJldHVybiBleHRyYWN0ZWRVcmk7XG4gfVxuXG4gIHByb3RlY3RlZCBnZXRTY29wZXNGb3JFbmRwb2ludChlbmRwb2ludDogc3RyaW5nKSA6IEFycmF5PHN0cmluZz4ge1xuICAgICAgLy8gaWYgdXNlciBzcGVjaWZpZWQgbGlzdCBvZiB1bnByb3RlY3RlZFJlc291cmNlcywgbm8gbmVlZCB0byBzZW5kIHRva2VuIHRvIHRoZXNlIGVuZHBvaW50cywgcmV0dXJuIG51bGwuXG4gICAgICBpZiAodGhpcy5fdW5wcm90ZWN0ZWRSZXNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdW5wcm90ZWN0ZWRSZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGVuZHBvaW50LmluZGV4T2YodGhpcy5fdW5wcm90ZWN0ZWRSZXNvdXJjZXNbaV0pID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcHJvdGVjdGVkUmVzb3VyY2VNYXAuc2l6ZSA+IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBrZXkgb2YgQXJyYXkuZnJvbSh0aGlzLl9wcm90ZWN0ZWRSZXNvdXJjZU1hcC5rZXlzKCkpKSB7XG4gICAgICAgICAgICAgIC8vIGNvbmZpZ0VuZHBvaW50IGlzIGxpa2UgL2FwaS9Ub2RvIHJlcXVlc3RlZCBlbmRwb2ludCBjYW4gYmUgL2FwaS9Ub2RvLzFcbiAgICAgICAgICAgICAgaWYgKGVuZHBvaW50LmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvdGVjdGVkUmVzb3VyY2VNYXAuZ2V0KGtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGRlZmF1bHQgcmVzb3VyY2Ugd2lsbCBiZSBjbGllbnRpZCBpZiBub3RoaW5nIHNwZWNpZmllZFxuICAgICAgLy8gQXBwIHdpbGwgdXNlIGlkdG9rZW4gZm9yIGNhbGxzIHRvIGl0c2VsZlxuICAgICAgLy8gY2hlY2sgaWYgaXQncyBzdGFyaW5nIGZyb20gaHR0cCBvciBodHRwcywgbmVlZHMgdG8gbWF0Y2ggd2l0aCBhcHAgaG9zdFxuICAgICAgaWYgKGVuZHBvaW50LmluZGV4T2YoXCJodHRwOi8vXCIpID4gLTEgfHwgZW5kcG9pbnQuaW5kZXhPZihcImh0dHBzOi8vXCIpID4gLTEpIHtcbiAgICAgICAgICBpZiAodGhpcy5nZXRIb3N0RnJvbVVyaShlbmRwb2ludCkgPT09IHRoaXMuZ2V0SG9zdEZyb21VcmkodGhpcy5nZXRSZWRpcmVjdFVyaSgpKSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5PHN0cmluZz4odGhpcy5jbGllbnRJZCk7XG4gICAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgIC8vIGluIGFuZ3VsYXIgbGV2ZWwsIHRoZSB1cmwgZm9yICRodHRwIGludGVyY2VwdG9yIGNhbGwgY291bGQgYmUgcmVsYXRpdmUgdXJsLFxuICAgICAgLy8gaWYgaXQncyByZWxhdGl2ZSBjYWxsLCB3ZSdsbCB0cmVhdCBpdCBhcyBhcHAgYmFja2VuZCBjYWxsLlxuICAgICAgICAgIHJldHVybiBuZXcgQXJyYXk8c3RyaW5nPih0aGlzLmNsaWVudElkKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgbm90IHRoZSBhcHAncyBvd24gYmFja2VuZCBvciBub3QgYSBkb21haW4gbGlzdGVkIGluIHRoZSBlbmRwb2ludHMgc3RydWN0dXJlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vVGhlc2UgQVBJUyBhcmUgZXhwb3NlZCBmb3IgbXNhbEFuZ3VsYXIgd3JhcHBlciBvbmx5XG4gICAgcHJvdGVjdGVkIHNldGxvZ2luSW5Qcm9ncmVzcyhsb2dpbkluUHJvZ3Jlc3MgOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2xvZ2luSW5Qcm9ncmVzcyA9IGxvZ2luSW5Qcm9ncmVzcztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QWNxdWlyZVRva2VuSW5Qcm9ncmVzcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjcXVpcmVUb2tlbkluUHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldEFjcXVpcmVUb2tlbkluUHJvZ3Jlc3MoYWNxdWlyZVRva2VuSW5Qcm9ncmVzcyA6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fYWNxdWlyZVRva2VuSW5Qcm9ncmVzcyA9IGFjcXVpcmVUb2tlbkluUHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldExvZ2dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ2dlcjtcbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLypcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuUmVzcG9uc2Uge1xuICB2YWxpZDogYm9vbGVhbjtcbiAgcGFyYW1ldGVyczogT2JqZWN0O1xuICBzdGF0ZU1hdGNoOiBib29sZWFuO1xuICBzdGF0ZVJlc3BvbnNlOiBzdHJpbmc7XG4gIHJlcXVlc3RUeXBlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWxpZCA9IGZhbHNlO1xuICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgIHRoaXMuc3RhdGVNYXRjaCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhdGVSZXNwb25zZSA9IFwiXCI7XG4gICAgdGhpcy5yZXF1ZXN0VHlwZSA9IFwidW5rbm93blwiO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgQ2xpZW50SW5mbyB9IGZyb20gXCIuL0NsaWVudEluZm9cIjtcbmltcG9ydCB7IElkVG9rZW4gfSBmcm9tIFwiLi9JZFRva2VuXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL1V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBVc2VyIHtcblxuICAgIGRpc3BsYXlhYmxlSWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaWRlbnRpdHlQcm92aWRlcjogc3RyaW5nO1xuICAgIHVzZXJJZGVudGlmaWVyOiBzdHJpbmc7XG4gICAgaWRUb2tlbjogT2JqZWN0O1xuICAgIHNpZDogc3RyaW5nO1xuXG4gICAgLypcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGlzcGxheWFibGVJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGlkZW50aXR5UHJvdmlkZXI6IHN0cmluZywgdXNlcklkZW50aWZpZXI6IHN0cmluZywgaWRUb2tlbjogT2JqZWN0LCBzaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRpc3BsYXlhYmxlSWQgPSBkaXNwbGF5YWJsZUlkO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmlkZW50aXR5UHJvdmlkZXIgPSBpZGVudGl0eVByb3ZpZGVyO1xuICAgICAgICB0aGlzLnVzZXJJZGVudGlmaWVyID0gdXNlcklkZW50aWZpZXI7XG4gICAgICAgIHRoaXMuaWRUb2tlbiA9IGlkVG9rZW47XG4gICAgICAgIHRoaXMuc2lkID0gc2lkO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVVc2VyKGlkVG9rZW46IElkVG9rZW4sIGNsaWVudEluZm86IENsaWVudEluZm8pOiBVc2VyIHtcbiAgICAgICAgbGV0IHVpZDogc3RyaW5nO1xuICAgICAgICBsZXQgdXRpZDogc3RyaW5nO1xuICAgICAgICBpZiAoIWNsaWVudEluZm8pIHtcbiAgICAgICAgICAgIHVpZCA9IFwiXCI7XG4gICAgICAgICAgICB1dGlkID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVpZCA9IGNsaWVudEluZm8udWlkO1xuICAgICAgICAgICAgdXRpZCA9IGNsaWVudEluZm8udXRpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXJJZGVudGlmaWVyID0gVXRpbHMuYmFzZTY0RW5jb2RlU3RyaW5nVXJsU2FmZSh1aWQpICsgXCIuXCIgKyBVdGlscy5iYXNlNjRFbmNvZGVTdHJpbmdVcmxTYWZlKHV0aWQpO1xuICAgICAgICByZXR1cm4gbmV3IFVzZXIoaWRUb2tlbi5wcmVmZXJyZWROYW1lLCBpZFRva2VuLm5hbWUsIGlkVG9rZW4uaXNzdWVyLCB1c2VySWRlbnRpZmllciwgaWRUb2tlbi5kZWNvZGVkSWRUb2tlbiwgaWRUb2tlbi5zaWQpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb25cbiAqICBBbGwgUmlnaHRzIFJlc2VydmVkXG4gKiAgTUlUIExpY2Vuc2VcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbiAqIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbiAqIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSxcbiAqIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SU1xuICogT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVFxuICogT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRob3JpdHksIEF1dGhvcml0eVR5cGUgfSBmcm9tIFwiLi9BdXRob3JpdHlcIjtcbmltcG9ydCB7IFhockNsaWVudCB9IGZyb20gXCIuL1hIUkNsaWVudFwiO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEFhZEF1dGhvcml0eSBleHRlbmRzIEF1dGhvcml0eSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEFhZEluc3RhbmNlRGlzY292ZXJ5RW5kcG9pbnQ6IHN0cmluZyA9IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vbi9kaXNjb3ZlcnkvaW5zdGFuY2VcIjtcblxuICBwcml2YXRlIGdldCBBYWRJbnN0YW5jZURpc2NvdmVyeUVuZHBvaW50VXJsKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gYCR7QWFkQXV0aG9yaXR5LkFhZEluc3RhbmNlRGlzY292ZXJ5RW5kcG9pbnR9P2FwaS12ZXJzaW9uPTEuMCZhdXRob3JpemF0aW9uX2VuZHBvaW50PSR7dGhpcy5DYW5vbmljYWxBdXRob3JpdHl9b2F1dGgyL3YyLjAvYXV0aG9yaXplYDtcbiAgfVxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihhdXRob3JpdHk6IHN0cmluZywgdmFsaWRhdGVBdXRob3JpdHk6IGJvb2xlYW4pIHtcbiAgICBzdXBlcihhdXRob3JpdHksIHZhbGlkYXRlQXV0aG9yaXR5KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgQXV0aG9yaXR5VHlwZSgpOiBBdXRob3JpdHlUeXBlIHtcbiAgICByZXR1cm4gQXV0aG9yaXR5VHlwZS5BYWQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUcnVzdGVkSG9zdExpc3Q6IGFueSA9IHtcbiAgICBcImxvZ2luLndpbmRvd3MubmV0XCI6IFwibG9naW4ud2luZG93cy5uZXRcIixcbiAgICBcImxvZ2luLmNoaW5hY2xvdWRhcGkuY25cIjogXCJsb2dpbi5jaGluYWNsb3VkYXBpLmNuXCIsXG4gICAgXCJsb2dpbi5jbG91ZGdvdmFwaS51c1wiOiBcImxvZ2luLmNsb3VkZ292YXBpLnVzXCIsXG4gICAgXCJsb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tXCI6IFwibG9naW4ubWljcm9zb2Z0b25saW5lLmNvbVwiLFxuICAgIFwibG9naW4ubWljcm9zb2Z0b25saW5lLmRlXCI6IFwibG9naW4ubWljcm9zb2Z0b25saW5lLmRlXCIsXG4gICAgXCJsb2dpbi5taWNyb3NvZnRvbmxpbmUudXNcIjogXCJsb2dpbi5taWNyb3NvZnRvbmxpbmUudXNcIlxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgT0lEQyBlbmRwb2ludFxuICAgKiBPbmx5IHJlc3BvbmRzIHdpdGggdGhlIGVuZHBvaW50XG4gICAqL1xuICBwdWJsaWMgR2V0T3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50QXN5bmMoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgIHZhciByZXN1bHRQcm9taXNlOiBQcm9taXNlPHN0cmluZz4gPSBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICByZXNvbHZlKHRoaXMuRGVmYXVsdE9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludCkpO1xuXG4gICAgaWYgKCF0aGlzLklzVmFsaWRhdGlvbkVuYWJsZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHRQcm9taXNlO1xuICAgIH1cblxuICAgIGxldCBob3N0OiBzdHJpbmcgPSB0aGlzLkNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMuSG9zdE5hbWVBbmRQb3J0O1xuICAgIGlmICh0aGlzLklzSW5UcnVzdGVkSG9zdExpc3QoaG9zdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHRQcm9taXNlO1xuICAgIH1cblxuICAgIGxldCBjbGllbnQ6IFhockNsaWVudCA9IG5ldyBYaHJDbGllbnQoKTtcblxuICAgIHJldHVybiBjbGllbnQuc2VuZFJlcXVlc3RBc3luYyh0aGlzLkFhZEluc3RhbmNlRGlzY292ZXJ5RW5kcG9pbnRVcmwsIFwiR0VUXCIsIHRydWUpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRlbmFudF9kaXNjb3ZlcnlfZW5kcG9pbnQ7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdG8gc2VlIGlmIHRoZSBob3N0IGlzIGluIGEgbGlzdCBvZiB0cnVzdGVkIGhvc3RzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgaG9zdCB0byBsb29rIHVwXG4gICAqL1xuICBwdWJsaWMgSXNJblRydXN0ZWRIb3N0TGlzdChob3N0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQWFkQXV0aG9yaXR5LlRydXN0ZWRIb3N0TGlzdFtob3N0LnRvTG93ZXJDYXNlKCldO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLypcbiAqIFhIUiBjbGllbnQgZm9yIEpTT04gZW5kcG9pbnRzXG4gKiBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9hc3luYy1wcm9taXNlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBYaHJDbGllbnQge1xuICBwdWJsaWMgc2VuZFJlcXVlc3RBc3luYyh1cmw6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGVuYWJsZUNhY2hpbmc/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgLyphc3luYzogKi8gdHJ1ZSk7XG4gICAgICBpZiAoZW5hYmxlQ2FjaGluZykge1xuICAgICAgICAvLyBUT0RPOiAoc2hpdmIpIGVuc3VyZSB0aGF0IHRoaXMgY2FuIGJlIGNhY2hlZFxuICAgICAgICAvLyB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNhY2hlLUNvbnRyb2xcIiwgXCJQdWJsaWNcIik7XG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSAoZXYpID0+IHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA8IDIwMCB8fCB4aHIuc3RhdHVzID49IDMwMCkge1xuICAgICAgICAgICAgICByZWplY3QodGhpcy5oYW5kbGVFcnJvcih4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGpzb25SZXNwb25zZSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICByZWplY3QodGhpcy5oYW5kbGVFcnJvcih4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzb2x2ZShqc29uUmVzcG9uc2UpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSAoZXYpID0+IHtcbiAgICAgICAgcmVqZWN0KHhoci5zdGF0dXMpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG1ldGhvZCA9PT0gXCJHRVRcIikge1xuICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IFwibm90IGltcGxlbWVudGVkXCI7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaGFuZGxlRXJyb3IocmVzcG9uc2VUZXh0OiBzdHJpbmcpOiBhbnkge1xuICAgIHZhciBqc29uUmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgIGpzb25SZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KTtcbiAgICAgIGlmIChqc29uUmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4ganNvblJlc3BvbnNlLmVycm9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyByZXNwb25zZVRleHQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCB7IFVzZXJBZ2VudEFwcGxpY2F0aW9uIH0gZnJvbSBcIi4vVXNlckFnZW50QXBwbGljYXRpb25cIjtcbmV4cG9ydCB7IExvZ2dlciB9IGZyb20gXCIuL0xvZ2dlclwiO1xuZXhwb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9Mb2dnZXJcIjtcbmV4cG9ydCB7IFVzZXIgfSBmcm9tIFwiLi9Vc2VyXCI7XG5leHBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmV4cG9ydCB7IFRva2VuUmVzcG9uc2V9IGZyb20gXCIuL1JlcXVlc3RJbmZvXCI7XG5leHBvcnQge0F1dGhvcml0eX0gZnJvbSBcIi4vQXV0aG9yaXR5XCI7XG5leHBvcnQge0NhY2hlUmVzdWx0fSBmcm9tIFwiLi9Vc2VyQWdlbnRBcHBsaWNhdGlvblwiO1xuXG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb25cbiAqICBBbGwgUmlnaHRzIFJlc2VydmVkXG4gKiAgTUlUIExpY2Vuc2VcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbiAqIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi9VdGlsc1wiO1xuXG4vKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgQWNjZXNzVG9rZW5LZXkge1xuXG4gIGF1dGhvcml0eTogc3RyaW5nO1xuICBjbGllbnRJZDogc3RyaW5nO1xuICB1c2VySWRlbnRpZmllcjogc3RyaW5nO1xuICBzY29wZXM6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihhdXRob3JpdHk6IHN0cmluZywgY2xpZW50SWQ6IHN0cmluZywgc2NvcGVzOiBzdHJpbmcsIHVpZDogc3RyaW5nLCB1dGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmF1dGhvcml0eSA9IGF1dGhvcml0eTtcbiAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgdGhpcy5zY29wZXMgPSBzY29wZXM7XG4gICAgdGhpcy51c2VySWRlbnRpZmllciA9IFV0aWxzLmJhc2U2NEVuY29kZVN0cmluZ1VybFNhZmUodWlkKSArIFwiLlwiICsgVXRpbHMuYmFzZTY0RW5jb2RlU3RyaW5nVXJsU2FmZSh1dGlkKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCBSaWdodHMgUmVzZXJ2ZWRcbiAqICBNSVQgTGljZW5zZVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xuICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gKiBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUXG4gKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBBY2Nlc3NUb2tlblZhbHVlIHtcblxuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIGV4cGlyZXNJbjogc3RyaW5nO1xuICBjbGllbnRJbmZvOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYWNjZXNzVG9rZW46IHN0cmluZywgaWRUb2tlbjogc3RyaW5nLCBleHBpcmVzSW46IHN0cmluZywgY2xpZW50SW5mbzogc3RyaW5nKSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgIHRoaXMuaWRUb2tlbiA9IGlkVG9rZW47XG4gICAgdGhpcy5leHBpcmVzSW4gPSBleHBpcmVzSW47XG4gICAgdGhpcy5jbGllbnRJbmZvID0gY2xpZW50SW5mbztcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCBSaWdodHMgUmVzZXJ2ZWRcbiAqICBNSVQgTGljZW5zZVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xuICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gKiBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUXG4gKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7IEF1dGhvcml0eSB9IGZyb20gXCIuL0F1dGhvcml0eVwiO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi9VdGlsc1wiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvblJlcXVlc3RQYXJhbWV0ZXJzIHtcbiAgYXV0aG9yaXR5SW5zdGFuY2U6IEF1dGhvcml0eTtcbiAgY2xpZW50SWQ6IHN0cmluZztcbiAgbm9uY2U6IHN0cmluZztcbiAgc3RhdGU6IHN0cmluZztcbiAgY29ycmVsYXRpb25JZDogc3RyaW5nO1xuICB4Q2xpZW50VmVyOiBzdHJpbmc7XG4gIHhDbGllbnRTa3U6IHN0cmluZztcbiAgc2NvcGVzOiBBcnJheTxzdHJpbmc+O1xuICByZXNwb25zZVR5cGU6IHN0cmluZztcbiAgcHJvbXB0VmFsdWU6IHN0cmluZztcbiAgZXh0cmFRdWVyeVBhcmFtZXRlcnM6IHN0cmluZztcbiAgbG9naW5IaW50OiBzdHJpbmc7XG4gIGRvbWFpbkhpbnQ6IHN0cmluZztcbiAgcmVkaXJlY3RVcmk6IHN0cmluZztcbiAgICBwdWJsaWMgZ2V0IGF1dGhvcml0eSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5hdXRob3JpdHlJbnN0YW5jZSA/IHRoaXMuYXV0aG9yaXR5SW5zdGFuY2UuQ2Fub25pY2FsQXV0aG9yaXR5IDogbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGF1dGhvcml0eTogQXV0aG9yaXR5LCBjbGllbnRJZDogc3RyaW5nLCBzY29wZTogQXJyYXk8c3RyaW5nPiwgcmVzcG9uc2VUeXBlOiBzdHJpbmcsIHJlZGlyZWN0VXJpOiBzdHJpbmcsIHN0YXRlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5hdXRob3JpdHlJbnN0YW5jZSA9IGF1dGhvcml0eTtcbiAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgdGhpcy5zY29wZXMgPSBzY29wZTtcbiAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICB0aGlzLnJlZGlyZWN0VXJpID0gcmVkaXJlY3RVcmk7XG4gICAgLy8gcmFuZG9tbHkgZ2VuZXJhdGVkIHZhbHVlc1xuICAgIHRoaXMuY29ycmVsYXRpb25JZCA9IFV0aWxzLmNyZWF0ZU5ld0d1aWQoKTtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGUgJiYgIVV0aWxzLmlzRW1wdHkoc3RhdGUpID8gIFV0aWxzLmNyZWF0ZU5ld0d1aWQoKSArIFwifFwiICsgc3RhdGUgICA6IFV0aWxzLmNyZWF0ZU5ld0d1aWQoKTtcbiAgICB0aGlzLm5vbmNlID0gVXRpbHMuY3JlYXRlTmV3R3VpZCgpO1xuICAgIC8vIHRlbGVtZXRyeSBpbmZvcm1hdGlvblxuICAgIHRoaXMueENsaWVudFNrdSA9IFwiTVNBTC5KU1wiO1xuICAgIHRoaXMueENsaWVudFZlciA9IFV0aWxzLmdldExpYnJhcnlWZXJzaW9uKCk7XG4gIH1cblxuICAgIGNyZWF0ZU5hdmlnYXRlVXJsKHNjb3BlczogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB7XG4gICAgICAgIHZhciBzdHIgPSB0aGlzLmNyZWF0ZU5hdmlnYXRpb25VcmxTdHJpbmcoc2NvcGVzKTtcbiAgICAgICAgbGV0IGF1dGhFbmRwb2ludDogc3RyaW5nID0gdGhpcy5hdXRob3JpdHlJbnN0YW5jZS5BdXRob3JpemF0aW9uRW5kcG9pbnQ7XG4gICAgICAgIC8vIGlmIHRoZSBlbmRwb2ludCBhbHJlYWR5IGhhcyBxdWVyeXBhcmFtcywgbGV0cyBhZGQgdG8gaXQsIG90aGVyd2lzZSBhZGQgdGhlIGZpcnN0IG9uZVxuICAgICAgICBpZiAoYXV0aEVuZHBvaW50LmluZGV4T2YoXCI/XCIpIDwgMCkge1xuICAgICAgICAgICAgYXV0aEVuZHBvaW50ICs9IFwiP1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXV0aEVuZHBvaW50ICs9IFwiJlwiO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXF1ZXN0VXJsOiBzdHJpbmcgPSBgJHthdXRoRW5kcG9pbnR9JHtzdHIuam9pbihcIiZcIil9YDtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RVcmw7XG4gICAgfVxuXG4gICAgY3JlYXRlTmF2aWdhdGlvblVybFN0cmluZyhzY29wZXM6IEFycmF5PHN0cmluZz4pOiBBcnJheTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKCFzY29wZXMpIHtcbiAgICAgICAgICAgIHNjb3BlcyA9IFt0aGlzLmNsaWVudElkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY29wZXMuaW5kZXhPZih0aGlzLmNsaWVudElkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHNjb3Blcy5wdXNoKHRoaXMuY2xpZW50SWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RyOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgIHN0ci5wdXNoKFwicmVzcG9uc2VfdHlwZT1cIiArIHRoaXMucmVzcG9uc2VUeXBlKTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGVjbGllbnRJZFVzZWRJblNjb3BlKHNjb3Blcyk7XG4gICAgICAgIHN0ci5wdXNoKFwic2NvcGU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5wYXJzZVNjb3BlKHNjb3BlcykpKTtcbiAgICAgICAgc3RyLnB1c2goXCJjbGllbnRfaWQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jbGllbnRJZCkpO1xuICAgICAgICBzdHIucHVzaChcInJlZGlyZWN0X3VyaT1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnJlZGlyZWN0VXJpKSk7XG4gICAgICAgIHN0ci5wdXNoKFwic3RhdGU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5zdGF0ZSkpO1xuICAgICAgICBzdHIucHVzaChcIm5vbmNlPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMubm9uY2UpKTtcbiAgICAgICAgc3RyLnB1c2goXCJjbGllbnRfaW5mbz0xXCIpO1xuICAgICAgICBzdHIucHVzaChgeC1jbGllbnQtU0tVPSR7dGhpcy54Q2xpZW50U2t1fWApO1xuICAgICAgICBzdHIucHVzaChgeC1jbGllbnQtVmVyPSR7dGhpcy54Q2xpZW50VmVyfWApO1xuXG4gICAgICAgIGlmICh0aGlzLmV4dHJhUXVlcnlQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBzdHIucHVzaCh0aGlzLmV4dHJhUXVlcnlQYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0ci5wdXNoKFwiY2xpZW50LXJlcXVlc3QtaWQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb3JyZWxhdGlvbklkKSk7XG5cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgdHJhbnNsYXRlY2xpZW50SWRVc2VkSW5TY29wZShzY29wZXM6IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcbiAgICBjb25zdCBjbGllbnRJZEluZGV4OiBudW1iZXIgPSBzY29wZXMuaW5kZXhPZih0aGlzLmNsaWVudElkKTtcbiAgICBpZiAoY2xpZW50SWRJbmRleCA+PSAwKSB7XG4gICAgICBzY29wZXMuc3BsaWNlKGNsaWVudElkSW5kZXgsIDEpO1xuICAgICAgaWYgKHNjb3Blcy5pbmRleE9mKFwib3BlbmlkXCIpID09PSAtMSkge1xuICAgICAgICBzY29wZXMucHVzaChcIm9wZW5pZFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChzY29wZXMuaW5kZXhPZihcInByb2ZpbGVcIikgPT09IC0xKSB7XG4gICAgICAgIHNjb3Blcy5wdXNoKFwicHJvZmlsZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwYXJzZVNjb3BlKHNjb3BlczogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB7XG4gICAgbGV0IHNjb3BlTGlzdDogc3RyaW5nID0gXCJcIjtcbiAgICBpZiAoc2NvcGVzKSB7XG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBzY29wZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc2NvcGVMaXN0ICs9IChpICE9PSBzY29wZXMubGVuZ3RoIC0gMSkgPyBzY29wZXNbaV0gKyBcIiBcIiA6IHNjb3Blc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2NvcGVMaXN0O1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi9VdGlsc1wiO1xuXG4vKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50SW5mbyB7XG5cbiAgcHJpdmF0ZSBfdWlkOiBzdHJpbmc7XG4gIGdldCB1aWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdWlkID8gdGhpcy5fdWlkIDogXCJcIjtcbiAgfVxuXG4gIHNldCB1aWQodWlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl91aWQgPSB1aWQ7XG4gIH1cblxuICBwcml2YXRlIF91dGlkOiBzdHJpbmc7XG4gIGdldCB1dGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3V0aWQgPyB0aGlzLl91dGlkIDogXCJcIjtcbiAgfVxuXG4gIHNldCB1dGlkKHV0aWQ6IHN0cmluZykge1xuICAgIHRoaXMuX3V0aWQgPSB1dGlkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocmF3Q2xpZW50SW5mbzogc3RyaW5nKSB7XG4gICAgaWYgKCFyYXdDbGllbnRJbmZvIHx8IFV0aWxzLmlzRW1wdHkocmF3Q2xpZW50SW5mbykpIHtcbiAgICAgIHRoaXMudWlkID0gXCJcIjtcbiAgICAgIHRoaXMudXRpZCA9IFwiXCI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRlY29kZWRDbGllbnRJbmZvOiBzdHJpbmcgPSBVdGlscy5iYXNlNjREZWNvZGVTdHJpbmdVcmxTYWZlKHJhd0NsaWVudEluZm8pO1xuICAgICAgY29uc3QgY2xpZW50SW5mbzogQ2xpZW50SW5mbyA9IDxDbGllbnRJbmZvPkpTT04ucGFyc2UoZGVjb2RlZENsaWVudEluZm8pO1xuICAgICAgaWYgKGNsaWVudEluZm8pIHtcbiAgICAgICAgaWYgKGNsaWVudEluZm8uaGFzT3duUHJvcGVydHkoXCJ1aWRcIikpIHtcbiAgICAgICAgICB0aGlzLnVpZCA9IGNsaWVudEluZm8udWlkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsaWVudEluZm8uaGFzT3duUHJvcGVydHkoXCJ1dGlkXCIpKSB7XG4gICAgICAgICAgdGhpcy51dGlkID0gY2xpZW50SW5mby51dGlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGUpO1xuICAgIH1cbiAgfVxufVxuIiwiLypcbiAgKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICAqICBBbGwgUmlnaHRzIFJlc2VydmVkXG4gICogIE1JVCBMaWNlbnNlXG4gICpcbiAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbiAgKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbiAgKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gICogY29uZGl0aW9uczpcbiAgKlxuICAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gICpcbiAgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAgKiBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVFxuICAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gICovXG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4vVXRpbHNcIjtcblxuLypcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIElkVG9rZW4ge1xuXG4gIGlzc3Vlcjogc3RyaW5nO1xuICBvYmplY3RJZDogc3RyaW5nO1xuICBzdWJqZWN0OiBzdHJpbmc7XG4gIHRlbmFudElkOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgcHJlZmVycmVkTmFtZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGhvbWVPYmplY3RJZDogc3RyaW5nO1xuICBub25jZTogc3RyaW5nO1xuICBleHBpcmF0aW9uOiBzdHJpbmc7XG4gIHJhd0lkVG9rZW46IHN0cmluZztcbiAgZGVjb2RlZElkVG9rZW46IE9iamVjdDtcbiAgc2lkOiBzdHJpbmc7XG4gIC8qIHRzbGludDpkaXNhYmxlOm5vLXN0cmluZy1saXRlcmFsICovXG4gIGNvbnN0cnVjdG9yKHJhd0lkVG9rZW46IHN0cmluZykge1xuICAgIGlmIChVdGlscy5pc0VtcHR5KHJhd0lkVG9rZW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJudWxsIG9yIGVtcHR5IHJhdyBpZHRva2VuXCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgdGhpcy5yYXdJZFRva2VuID0gcmF3SWRUb2tlbjtcbiAgICAgIHRoaXMuZGVjb2RlZElkVG9rZW4gPSBVdGlscy5leHRyYWN0SWRUb2tlbihyYXdJZFRva2VuKTtcbiAgICAgIGlmICh0aGlzLmRlY29kZWRJZFRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLmRlY29kZWRJZFRva2VuLmhhc093blByb3BlcnR5KFwiaXNzXCIpKSB7XG4gICAgICAgICAgdGhpcy5pc3N1ZXIgPSB0aGlzLmRlY29kZWRJZFRva2VuW1wiaXNzXCJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlZElkVG9rZW4uaGFzT3duUHJvcGVydHkoXCJvaWRcIikpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0SWQgPSB0aGlzLmRlY29kZWRJZFRva2VuW1wib2lkXCJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlZElkVG9rZW4uaGFzT3duUHJvcGVydHkoXCJzdWJcIikpIHtcbiAgICAgICAgICB0aGlzLnN1YmplY3QgPSB0aGlzLmRlY29kZWRJZFRva2VuW1wic3ViXCJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlZElkVG9rZW4uaGFzT3duUHJvcGVydHkoXCJ0aWRcIikpIHtcbiAgICAgICAgICB0aGlzLnRlbmFudElkID0gdGhpcy5kZWNvZGVkSWRUb2tlbltcInRpZFwiXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRlY29kZWRJZFRva2VuLmhhc093blByb3BlcnR5KFwidmVyXCIpKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdGhpcy5kZWNvZGVkSWRUb2tlbltcInZlclwiXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRlY29kZWRJZFRva2VuLmhhc093blByb3BlcnR5KFwicHJlZmVycmVkX3VzZXJuYW1lXCIpKSB7XG4gICAgICAgICAgdGhpcy5wcmVmZXJyZWROYW1lID0gdGhpcy5kZWNvZGVkSWRUb2tlbltcInByZWZlcnJlZF91c2VybmFtZVwiXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRlY29kZWRJZFRva2VuLmhhc093blByb3BlcnR5KFwibmFtZVwiKSkge1xuICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZGVjb2RlZElkVG9rZW5bXCJuYW1lXCJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlZElkVG9rZW4uaGFzT3duUHJvcGVydHkoXCJub25jZVwiKSkge1xuICAgICAgICAgIHRoaXMubm9uY2UgPSB0aGlzLmRlY29kZWRJZFRva2VuW1wibm9uY2VcIl07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kZWNvZGVkSWRUb2tlbi5oYXNPd25Qcm9wZXJ0eShcImV4cFwiKSkge1xuICAgICAgICAgIHRoaXMuZXhwaXJhdGlvbiA9IHRoaXMuZGVjb2RlZElkVG9rZW5bXCJleHBcIl07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kZWNvZGVkSWRUb2tlbi5oYXNPd25Qcm9wZXJ0eShcImhvbWVfb2lkXCIpKSB7XG4gICAgICAgICAgICB0aGlzLmhvbWVPYmplY3RJZCA9IHRoaXMuZGVjb2RlZElkVG9rZW5bXCJob21lX29pZFwiXTtcbiAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuZGVjb2RlZElkVG9rZW4uaGFzT3duUHJvcGVydHkoXCJzaWRcIikpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaWQgPSB0aGlzLmRlY29kZWRJZFRva2VuW1wic2lkXCJdO1xuICAgICAgICAgIH1cbiAgICAgIC8qIHRzbGludDplbmFibGU6bm8tc3RyaW5nLWxpdGVyYWwgKi9cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgdGhlIHJldHVybmVkIGlkIHRva2VuXCIpO1xuICAgIH1cbiAgfVxuXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogIE1JVCBMaWNlbnNlXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4gKiBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4gKiB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4gKiBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlNcbiAqIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVRcbiAqIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBBY2Nlc3NUb2tlbkNhY2hlSXRlbSB9IGZyb20gXCIuL0FjY2Vzc1Rva2VuQ2FjaGVJdGVtXCI7XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yYWdlIHsvLyBTaW5nbGV0b25cblxuICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFN0b3JhZ2U7XG4gIHByaXZhdGUgX2xvY2FsU3RvcmFnZVN1cHBvcnRlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfc2Vzc2lvblN0b3JhZ2VTdXBwb3J0ZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX2NhY2hlTG9jYXRpb246IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihjYWNoZUxvY2F0aW9uOiBzdHJpbmcpIHtcbiAgICBpZiAoU3RvcmFnZS5faW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBTdG9yYWdlLl9pbnN0YW5jZTtcbiAgICB9XG5cbiAgICB0aGlzLl9jYWNoZUxvY2F0aW9uID0gY2FjaGVMb2NhdGlvbjtcbiAgICB0aGlzLl9sb2NhbFN0b3JhZ2VTdXBwb3J0ZWQgPSB0eXBlb2Ygd2luZG93W3RoaXMuX2NhY2hlTG9jYXRpb25dICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvd1t0aGlzLl9jYWNoZUxvY2F0aW9uXSAhPSBudWxsO1xuICAgIHRoaXMuX3Nlc3Npb25TdG9yYWdlU3VwcG9ydGVkID0gdHlwZW9mIHdpbmRvd1tjYWNoZUxvY2F0aW9uXSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3dbY2FjaGVMb2NhdGlvbl0gIT0gbnVsbDtcbiAgICBTdG9yYWdlLl9pbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCF0aGlzLl9sb2NhbFN0b3JhZ2VTdXBwb3J0ZWQgJiYgIXRoaXMuX3Nlc3Npb25TdG9yYWdlU3VwcG9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJsb2NhbFN0b3JhZ2UgYW5kIHNlc3Npb25TdG9yYWdlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0b3JhZ2UuX2luc3RhbmNlO1xuICB9XG5cbiAgICAvLyBhZGQgdmFsdWUgdG8gc3RvcmFnZVxuICAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGVuYWJsZUNvb2tpZVN0b3JhZ2U/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmICh3aW5kb3dbdGhpcy5fY2FjaGVMb2NhdGlvbl0pIHtcbiAgICAgICAgICAgIHdpbmRvd1t0aGlzLl9jYWNoZUxvY2F0aW9uXS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmFibGVDb29raWVTdG9yYWdlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEl0ZW1Db29raWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBnZXQgb25lIGl0ZW0gYnkga2V5IGZyb20gc3RvcmFnZVxuICAgIGdldEl0ZW0oa2V5OiBzdHJpbmcsIGVuYWJsZUNvb2tpZVN0b3JhZ2U/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGVuYWJsZUNvb2tpZVN0b3JhZ2UgJiYgdGhpcy5nZXRJdGVtQ29va2llKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEl0ZW1Db29raWUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93W3RoaXMuX2NhY2hlTG9jYXRpb25dKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93W3RoaXMuX2NhY2hlTG9jYXRpb25dLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgdmFsdWUgZnJvbSBzdG9yYWdlXG4gICAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAod2luZG93W3RoaXMuX2NhY2hlTG9jYXRpb25dKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93W3RoaXMuX2NhY2hlTG9jYXRpb25dLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNsZWFyIHN0b3JhZ2UgKHJlbW92ZSBhbGwgaXRlbXMgZnJvbSBpdClcbiAgICBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgaWYgKHdpbmRvd1t0aGlzLl9jYWNoZUxvY2F0aW9uXSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvd1t0aGlzLl9jYWNoZUxvY2F0aW9uXS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QWxsQWNjZXNzVG9rZW5zKGNsaWVudElkOiBzdHJpbmcsIHVzZXJJZGVudGlmaWVyOiBzdHJpbmcpOiBBcnJheTxBY2Nlc3NUb2tlbkNhY2hlSXRlbT4ge1xuICAgICAgICBjb25zdCByZXN1bHRzOiBBcnJheTxBY2Nlc3NUb2tlbkNhY2hlSXRlbT4gPSBbXTtcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuQ2FjaGVJdGVtOiBBY2Nlc3NUb2tlbkNhY2hlSXRlbTtcbiAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHdpbmRvd1t0aGlzLl9jYWNoZUxvY2F0aW9uXTtcbiAgICAgICAgaWYgKHN0b3JhZ2UpIHtcbiAgICAgICAgICAgIGxldCBrZXk6IHN0cmluZztcbiAgICAgICAgICAgIGZvciAoa2V5IGluIHN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkubWF0Y2goY2xpZW50SWQpICYmIGtleS5tYXRjaCh1c2VySWRlbnRpZmllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0SXRlbShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW5DYWNoZUl0ZW0gPSBuZXcgQWNjZXNzVG9rZW5DYWNoZUl0ZW0oSlNPTi5wYXJzZShrZXkpLCBKU09OLnBhcnNlKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGFjY2Vzc1Rva2VuQ2FjaGVJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cblxuICAgIHJlbW92ZUFjcXVpcmVUb2tlbkVudHJpZXMoYXV0aG9yaXR5S2V5OiBzdHJpbmcsIGFjcXVpcmVUb2tlblVzZXJLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBzdG9yYWdlID0gd2luZG93W3RoaXMuX2NhY2hlTG9jYXRpb25dO1xuICAgICAgICBpZiAoc3RvcmFnZSkge1xuICAgICAgICAgICAgbGV0IGtleTogc3RyaW5nO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gc3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChhdXRob3JpdHlLZXkgIT09IFwiXCIgJiYga2V5LmluZGV4T2YoYXV0aG9yaXR5S2V5KSA+IC0xKSB8fCAoYWNxdWlyZVRva2VuVXNlcktleSAhPT0gXCJcIiAmJiBrZXkuaW5kZXhPZihhY3F1aXJlVG9rZW5Vc2VyS2V5KSA+IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldENhY2hlSXRlbXMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB3aW5kb3dbdGhpcy5fY2FjaGVMb2NhdGlvbl07XG4gICAgICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgICAgICBsZXQga2V5OiBzdHJpbmc7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBzdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoQ29uc3RhbnRzLm1zYWwpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGtleSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKENvbnN0YW50cy5yZW5ld1N0YXR1cykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEl0ZW1Db29raWUoY05hbWU6IHN0cmluZywgY1ZhbHVlOiBzdHJpbmcsIGV4cGlyZXM/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdmFyIGNvb2tpZVN0ciA9IGNOYW1lICsgXCI9XCIgKyBjVmFsdWUgKyBcIjtcIjtcbiAgICAgICAgaWYgKGV4cGlyZXMpIHtcbiAgICAgICAgICAgIHZhciBleHBpcmVUaW1lID0gdGhpcy5zZXRFeHBpcmF0aW9uQ29va2llKGV4cGlyZXMpO1xuICAgICAgICAgICAgY29va2llU3RyICs9IFwiZXhwaXJlcz1cIiArIGV4cGlyZVRpbWUgKyBcIjtcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVN0cjtcbiAgICB9XG5cbiAgICBnZXRJdGVtQ29va2llKGNOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICB2YXIgbmFtZSA9IGNOYW1lICsgXCI9XCI7XG4gICAgICAgIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdChcIjtcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjID0gY2FbaV07XG4gICAgICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjLnN1YnN0cmluZyhuYW1lLmxlbmd0aCwgYy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIHNldEV4cGlyYXRpb25Db29raWUoY29va2llTGlmZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIGV4cHIgPSBuZXcgRGF0ZSh0b2RheS5nZXRUaW1lKCkgKyBjb29raWVMaWZlICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICAgIHJldHVybiBleHByLnRvVVRDU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgY2xlYXJDb29raWUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0SXRlbUNvb2tpZShDb25zdGFudHMubm9uY2VJZFRva2VuLCBcIlwiLCAtMSk7XG4gICAgICAgIHRoaXMuc2V0SXRlbUNvb2tpZShDb25zdGFudHMuc3RhdGVMb2dpbiwgXCJcIiwgLTEpO1xuICAgICAgICB0aGlzLnNldEl0ZW1Db29raWUoQ29uc3RhbnRzLmxvZ2luUmVxdWVzdCwgXCJcIiwgLTEpO1xuICAgICAgICB0aGlzLnNldEl0ZW1Db29raWUoQ29uc3RhbnRzLnN0YXRlQWNxdWlyZVRva2VuLCBcIlwiLCAtMSk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCBSaWdodHMgUmVzZXJ2ZWRcbiAqICBNSVQgTGljZW5zZVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xuICogc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuICogd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuICogbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTXG4gKiBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUXG4gKiBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7IEFjY2Vzc1Rva2VuS2V5IH0gZnJvbSBcIi4vQWNjZXNzVG9rZW5LZXlcIjtcbmltcG9ydCB7IEFjY2Vzc1Rva2VuVmFsdWUgfSBmcm9tIFwiLi9BY2Nlc3NUb2tlblZhbHVlXCI7XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBBY2Nlc3NUb2tlbkNhY2hlSXRlbSB7XG5cbiAga2V5OiBBY2Nlc3NUb2tlbktleTtcbiAgdmFsdWU6IEFjY2Vzc1Rva2VuVmFsdWU7XG5cbiAgY29uc3RydWN0b3Ioa2V5OiBBY2Nlc3NUb2tlbktleSwgdmFsdWU6IEFjY2Vzc1Rva2VuVmFsdWUpIHtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb25cbiAqICBBbGwgUmlnaHRzIFJlc2VydmVkXG4gKiAgTUlUIExpY2Vuc2VcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbiAqIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbiAqIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSxcbiAqIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SU1xuICogT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVFxuICogT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKlxuICogQGhpZGRlblxuICovXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL1V0aWxzXCI7XG5pbXBvcnQgeyBBYWRBdXRob3JpdHkgfSBmcm9tIFwiLi9BYWRBdXRob3JpdHlcIjtcbmltcG9ydCB7IEIyY0F1dGhvcml0eSB9IGZyb20gXCIuL0IyY0F1dGhvcml0eVwiO1xuaW1wb3J0IHsgQXV0aG9yaXR5LCBBdXRob3JpdHlUeXBlIH0gZnJvbSBcIi4vQXV0aG9yaXR5XCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi9FcnJvck1lc3NhZ2VcIjtcblxuZXhwb3J0IGNsYXNzIEF1dGhvcml0eUZhY3Rvcnkge1xuICAgIC8qXG4gICAgKiBQYXJzZSB0aGUgdXJsIGFuZCBkZXRlcm1pbmUgdGhlIHR5cGUgb2YgYXV0aG9yaXR5XG4gICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBEZXRlY3RBdXRob3JpdHlGcm9tVXJsKGF1dGhvcml0eVVybDogc3RyaW5nKTogQXV0aG9yaXR5VHlwZSB7XG4gICAgICAgIGF1dGhvcml0eVVybCA9IFV0aWxzLkNhbm9uaWNhbGl6ZVVyaShhdXRob3JpdHlVcmwpO1xuICAgICAgICBsZXQgY29tcG9uZW50cyA9IFV0aWxzLkdldFVybENvbXBvbmVudHMoYXV0aG9yaXR5VXJsKTtcbiAgICAgICAgbGV0IHBhdGhTZWdtZW50cyA9IGNvbXBvbmVudHMuUGF0aFNlZ21lbnRzO1xuICAgICAgICBzd2l0Y2ggKHBhdGhTZWdtZW50c1swXSkge1xuICAgICAgICAgICAgY2FzZSBcInRmcFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBBdXRob3JpdHlUeXBlLkIyQztcbiAgICAgICAgICAgIGNhc2UgXCJhZGZzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEF1dGhvcml0eVR5cGUuQWRmcztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEF1dGhvcml0eVR5cGUuQWFkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAqIENyZWF0ZSBhbiBhdXRob3JpdHkgb2JqZWN0IG9mIHRoZSBjb3JyZWN0IHR5cGUgYmFzZWQgb24gdGhlIHVybFxuICAgICogUGVyZm9ybXMgYmFzaWMgYXV0aG9yaXR5IHZhbGlkYXRpb24gLSBjaGVja3MgdG8gc2VlIGlmIHRoZSBhdXRob3JpdHkgaXMgb2YgYSB2YWxpZCB0eXBlIChlZyBhYWQsIGIyYylcbiAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgQ3JlYXRlSW5zdGFuY2UoYXV0aG9yaXR5VXJsOiBzdHJpbmcsIHZhbGlkYXRlQXV0aG9yaXR5OiBib29sZWFuKTogQXV0aG9yaXR5IHtcbiAgICAgICAgaWYgKFV0aWxzLmlzRW1wdHkoYXV0aG9yaXR5VXJsKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHR5cGUgPSBBdXRob3JpdHlGYWN0b3J5LkRldGVjdEF1dGhvcml0eUZyb21VcmwoYXV0aG9yaXR5VXJsKTtcbiAgICAgICAgLy8gRGVwZW5kaW5nIG9uIGFib3ZlIGRldGVjdGlvbiwgY3JlYXRlIHRoZSByaWdodCB0eXBlLlxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQXV0aG9yaXR5VHlwZS5CMkM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCMmNBdXRob3JpdHkoYXV0aG9yaXR5VXJsLCB2YWxpZGF0ZUF1dGhvcml0eSk7XG4gICAgICAgICAgICBjYXNlIEF1dGhvcml0eVR5cGUuQWFkOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWFkQXV0aG9yaXR5KGF1dGhvcml0eVVybCwgdmFsaWRhdGVBdXRob3JpdHkpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvck1lc3NhZ2UuaW52YWxpZEF1dGhvcml0eVR5cGU7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb25cbiAqICBBbGwgUmlnaHRzIFJlc2VydmVkXG4gKiAgTUlUIExpY2Vuc2VcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbiAqIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbiAqIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSxcbiAqIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SU1xuICogT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVFxuICogT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgeyBBYWRBdXRob3JpdHkgfSBmcm9tIFwiLi9BYWRBdXRob3JpdHlcIjtcbmltcG9ydCB7IEF1dGhvcml0eSwgQXV0aG9yaXR5VHlwZSB9IGZyb20gXCIuL0F1dGhvcml0eVwiO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSBcIi4vRXJyb3JNZXNzYWdlXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL1V0aWxzXCI7XG5cbi8qXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBCMmNBdXRob3JpdHkgZXh0ZW5kcyBBYWRBdXRob3JpdHkge1xuICBwdWJsaWMgY29uc3RydWN0b3IoYXV0aG9yaXR5OiBzdHJpbmcsIHZhbGlkYXRlQXV0aG9yaXR5OiBib29sZWFuKSB7XG4gICAgc3VwZXIoYXV0aG9yaXR5LCB2YWxpZGF0ZUF1dGhvcml0eSk7XG4gICAgbGV0IHVybENvbXBvbmVudHMgPSBVdGlscy5HZXRVcmxDb21wb25lbnRzKGF1dGhvcml0eSk7XG5cbiAgICBsZXQgcGF0aFNlZ21lbnRzID0gdXJsQ29tcG9uZW50cy5QYXRoU2VnbWVudHM7XG4gICAgaWYgKHBhdGhTZWdtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICAgIHRocm93IEVycm9yTWVzc2FnZS5iMmNBdXRob3JpdHlVcmlJbnZhbGlkUGF0aDtcbiAgICB9XG5cbiAgICB0aGlzLkNhbm9uaWNhbEF1dGhvcml0eSA9IGBodHRwczovLyR7dXJsQ29tcG9uZW50cy5Ib3N0TmFtZUFuZFBvcnR9LyR7cGF0aFNlZ21lbnRzWzBdfS8ke3BhdGhTZWdtZW50c1sxXX0vJHtwYXRoU2VnbWVudHNbMl19L2A7XG4gIH1cblxuICBwdWJsaWMgZ2V0IEF1dGhvcml0eVR5cGUoKTogQXV0aG9yaXR5VHlwZSB7XG4gICAgcmV0dXJuIEF1dGhvcml0eVR5cGUuQjJDO1xuICB9XG5cbiAgLypcbiAgICogUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgVGVuYW50RGlzY292ZXJ5RW5kcG9pbnRcbiAgICovXG4gIHB1YmxpYyBHZXRPcGVuSWRDb25maWd1cmF0aW9uRW5kcG9pbnRBc3luYygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHZhciByZXN1bHRQcm9taXNlID0gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgcmVzb2x2ZSh0aGlzLkRlZmF1bHRPcGVuSWRDb25maWd1cmF0aW9uRW5kcG9pbnQpKTtcblxuICAgIGlmICghdGhpcy5Jc1ZhbGlkYXRpb25FbmFibGVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0UHJvbWlzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5Jc0luVHJ1c3RlZEhvc3RMaXN0KHRoaXMuQ2Fub25pY2FsQXV0aG9yaXR5VXJsQ29tcG9uZW50cy5Ib3N0TmFtZUFuZFBvcnQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0UHJvbWlzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgcmVqZWN0KEVycm9yTWVzc2FnZS51bnN1cHBvcnRlZEF1dGhvcml0eVZhbGlkYXRpb24pKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==