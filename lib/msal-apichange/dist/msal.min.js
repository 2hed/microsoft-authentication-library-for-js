/*! msal v0.2.4 2019-02-03 */

'use strict';
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Msal",[],t):"object"==typeof exports?exports.Msal=t():e.Msal=t()}(window,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=function(){function e(){}return e.compareObjects=function(e,t){return!(!e||!t)&&!(!e.homeAccountIdentifier||!t.homeAccountIdentifier||e.homeAccountIdentifier!==t.homeAccountIdentifier)},e.expiresIn=function(e){return e||(e="3599"),this.now()+parseInt(e,10)},e.now=function(){return Math.round((new Date).getTime()/1e3)},e.isEmpty=function(e){return void 0===e||!e||0===e.length},e.extractIdToken=function(e){var t=this.decodeJwt(e);if(!t)return null;try{var n=t.JWSPayload,o=this.base64DecodeStringUrlSafe(n);return o?JSON.parse(o):null}catch(e){}return null},e.base64EncodeStringUrlSafe=function(e){return window.btoa?window.btoa(e):this.encode(e)},e.base64DecodeStringUrlSafe=function(e){return e=e.replace(/-/g,"+").replace(/_/g,"/"),window.atob?decodeURIComponent(encodeURIComponent(window.atob(e))):decodeURIComponent(encodeURIComponent(this.decode(e)))},e.encode=function(e){var t,n,o,r,i,s,a,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",u="",l=0;for(e=this.utf8Encode(e);l<e.length;)r=(t=e.charCodeAt(l++))>>2,i=(3&t)<<4|(n=e.charCodeAt(l++))>>4,s=(15&n)<<2|(o=e.charCodeAt(l++))>>6,a=63&o,isNaN(n)?s=a=64:isNaN(o)&&(a=64),u=u+c.charAt(r)+c.charAt(i)+c.charAt(s)+c.charAt(a);return u.replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")},e.utf8Encode=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var o=e.charCodeAt(n);o<128?t+=String.fromCharCode(o):o>127&&o<2048?(t+=String.fromCharCode(o>>6|192),t+=String.fromCharCode(63&o|128)):(t+=String.fromCharCode(o>>12|224),t+=String.fromCharCode(o>>6&63|128),t+=String.fromCharCode(63&o|128))}return t},e.decode=function(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n=(e=String(e).replace(/=+$/,"")).length;if(n%4==1)throw new Error("The token to be decoded is not correctly encoded.");for(var o,r,i,s,a,c,u,l,p="",d=0;d<n;d+=4){if(o=t.indexOf(e.charAt(d)),r=t.indexOf(e.charAt(d+1)),i=t.indexOf(e.charAt(d+2)),s=t.indexOf(e.charAt(d+3)),d+2===n-1){c=(a=o<<18|r<<12|i<<6)>>16&255,u=a>>8&255,p+=String.fromCharCode(c,u);break}if(d+1===n-1){c=(a=o<<18|r<<12)>>16&255,p+=String.fromCharCode(c);break}c=(a=o<<18|r<<12|i<<6|s)>>16&255,u=a>>8&255,l=255&a,p+=String.fromCharCode(c,u,l)}return p},e.decodeJwt=function(e){if(this.isEmpty(e))return null;var t=/^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/.exec(e);return!t||t.length<4?null:{header:t[1],JWSPayload:t[2],JWSSig:t[3]}},e.deserialize=function(e){var t,n=/\+/g,o=/([^&=]+)=([^&]*)/g,r=function(e){return decodeURIComponent(e.replace(n," "))},i={};for(t=o.exec(e);t;)i[r(t[1])]=r(t[2]),t=o.exec(e);return i},e.isIntersectingScopes=function(e,t){e=this.convertToLowerCase(e);for(var n=0;n<t.length;n++)if(e.indexOf(t[n].toLowerCase())>-1)return!0;return!1},e.containsScope=function(e,t){return e=this.convertToLowerCase(e),t.every(function(t){return e.indexOf(t.toString().toLowerCase())>=0})},e.convertToLowerCase=function(e){return e.map(function(e){return e.toLowerCase()})},e.removeElement=function(e,t){return e.filter(function(e){return e!==t})},e.decimalToHex=function(e){for(var t=e.toString(16);t.length<2;)t="0"+t;return t},e.getLibraryVersion=function(){return"0.2.4"},e.replaceFirstPath=function(e,t){if(!t)return e;var n=this.GetUrlComponents(e),r=n.PathSegments;return 0===r.length||r[0]!==o.Constants.common&&r[0]!==o.Constants.organizations||(r[0]=t,e=n.Protocol+"//"+n.HostNameAndPort+"/"+r.join("/")),e},e.createNewGuid=function(){var t=window.crypto;if(t&&t.getRandomValues){var n=new Uint8Array(16);return t.getRandomValues(n),n[6]|=64,n[6]&=79,n[8]|=128,n[8]&=191,e.decimalToHex(n[0])+e.decimalToHex(n[1])+e.decimalToHex(n[2])+e.decimalToHex(n[3])+"-"+e.decimalToHex(n[4])+e.decimalToHex(n[5])+"-"+e.decimalToHex(n[6])+e.decimalToHex(n[7])+"-"+e.decimalToHex(n[8])+e.decimalToHex(n[9])+"-"+e.decimalToHex(n[10])+e.decimalToHex(n[11])+e.decimalToHex(n[12])+e.decimalToHex(n[13])+e.decimalToHex(n[14])+e.decimalToHex(n[15])}for(var o="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",r="0123456789abcdef",i=0,s="",a=0;a<36;a++)"-"!==o[a]&&"4"!==o[a]&&(i=16*Math.random()|0),"x"===o[a]?s+=r[i]:"y"===o[a]?(i&=3,s+=r[i|=8]):s+=o[a];return s},e.GetUrlComponents=function(e){if(!e)throw"Url required";var t=RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"),n=e.match(t);if(!n||n.length<6)throw"Valid url required";var o={Protocol:n[1],HostNameAndPort:n[4],AbsolutePath:n[5]},r=o.AbsolutePath.split("/");return r=r.filter(function(e){return e&&e.length>0}),o.PathSegments=r,o},e.CanonicalizeUri=function(t){return t&&(t=t.toLowerCase()),t&&!e.endsWith(t,"/")&&(t+="/"),t},e.endsWith=function(e,t){return!(!e||!t)&&-1!==e.indexOf(t,e.length-t.length)},e.checkSSO=function(e){return!(e&&(-1!==e.indexOf(o.Constants.login_hint)||-1!==e.indexOf(o.Constants.sid)))},e.constructUnifiedCacheExtraQueryParameter=function(e,t){return e?e.hasOwnProperty(o.Constants.upn)?(t=this.urlRemoveQueryStringParameter(t,o.Constants.login_hint),(t=this.urlRemoveQueryStringParameter(t,o.Constants.domain_hint))?t+"&"+o.Constants.login_hint+"="+e.upn+"&"+o.Constants.domain_hint+"="+o.Constants.organizations:"&"+o.Constants.login_hint+"="+e.upn+"&"+o.Constants.domain_hint+"="+o.Constants.organizations):(t=this.urlRemoveQueryStringParameter(t,o.Constants.domain_hint))?t+"&"+o.Constants.domain_hint+"="+o.Constants.organizations:"&"+o.Constants.domain_hint+"="+o.Constants.organizations:t},e.urlRemoveQueryStringParameter=function(e,t){if(this.isEmpty(e))return e;var n=new RegExp("(\\&"+t+"=)[^&]+");return e=e.replace(n,""),n=new RegExp("("+t+"=)[^&]+&"),e=e.replace(n,""),n=new RegExp("("+t+"=)[^&]+"),e=e.replace(n,"")},e}();t.Utils=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){}return Object.defineProperty(e,"errorDescription",{get:function(){return"error_description"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"error",{get:function(){return"error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"scope",{get:function(){return"scope"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"acquireTokenUser",{get:function(){return"msal.acquireTokenUser"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"clientInfo",{get:function(){return"client_info"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"clientId",{get:function(){return"clientId"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"authority",{get:function(){return"msal.authority"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"idToken",{get:function(){return"id_token"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"accessToken",{get:function(){return"access_token"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"expiresIn",{get:function(){return"expires_in"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"sessionState",{get:function(){return"session_state"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalClientInfo",{get:function(){return"msal.client.info"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalError",{get:function(){return"msal.error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalErrorDescription",{get:function(){return"msal.error.description"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalSessionState",{get:function(){return"msal.session.state"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenKeys",{get:function(){return"msal.token.keys"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"accessTokenKey",{get:function(){return"msal.access.token.key"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"expirationKey",{get:function(){return"msal.expiration.key"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateLogin",{get:function(){return"msal.state.login"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateAcquireToken",{get:function(){return"msal.state.acquireToken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateRenew",{get:function(){return"msal.state.renew"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"nonceIdToken",{get:function(){return"msal.nonce.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userName",{get:function(){return"msal.username"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"idTokenKey",{get:function(){return"msal.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"loginRequest",{get:function(){return"msal.login.request"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"loginError",{get:function(){return"msal.login.error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"renewStatus",{get:function(){return"msal.token.renew.status"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msal",{get:function(){return"msal"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"no_account",{get:function(){return"NO_ACCOUNT"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"login_hint",{get:function(){return"login_hint"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"domain_hint",{get:function(){return"domain_hint"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"organizations",{get:function(){return"organizations"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"consumers",{get:function(){return"consumers"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"consumersUtid",{get:function(){return"9188040d-6c67-4c5b-b112-36a304b66dad"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"sid",{get:function(){return"sid"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"upn",{get:function(){return"upn"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"adalIdToken",{get:function(){return"adal.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt_select_account",{get:function(){return"&prompt=select_account"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt_none",{get:function(){return"&prompt=none"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt",{get:function(){return"prompt"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"response_mode_fragment",{get:function(){return"&response_mode=fragment"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"resourceDelimeter",{get:function(){return"|"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusCancelled",{get:function(){return"Canceled"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusCompleted",{get:function(){return"Completed"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusInProgress",{get:function(){return"In Progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWidth",{get:function(){return this._popUpWidth},set:function(e){this._popUpWidth=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpHeight",{get:function(){return this._popUpHeight},set:function(e){this._popUpHeight=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"login",{get:function(){return"LOGIN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"renewToken",{get:function(){return"RENEW_TOKEN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"unknown",{get:function(){return"UNKNOWN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"urlHash",{get:function(){return"msal.urlHash"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"angularLoginRequest",{get:function(){return"msal.angular.login.request"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userIdentifier",{get:function(){return"userIdentifier"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"common",{get:function(){return"common"},enumerable:!0,configurable:!0}),e._popUpWidth=483,e._popUpHeight=600,e}();t.Constants=o;var r=function(){function e(){}return Object.defineProperty(e,"loginProgressError",{get:function(){return"login_progress_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"acquireTokenProgressError",{get:function(){return"acquiretoken_progress_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"inputScopesError",{get:function(){return"input_scopes_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"endpointResolutionError",{get:function(){return"endpoints_resolution_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWindowError",{get:function(){return"popup_window_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userLoginError",{get:function(){return"user_login_error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userCancelledError",{get:function(){return"user_cancelled"},enumerable:!0,configurable:!0}),e}();t.ErrorCodes=r;var i=function(){function e(){}return Object.defineProperty(e,"loginProgressError",{get:function(){return"Login is in progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"acquireTokenProgressError",{get:function(){return"Acquire token is in progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"inputScopesError",{get:function(){return"Invalid value of input scopes provided"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"endpointResolutionError",{get:function(){return"Endpoints cannot be resolved"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWindowError",{get:function(){return"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userLoginError",{get:function(){return"User login is required"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userCancelledError",{get:function(){return"User closed the popup window and cancelled the flow"},enumerable:!0,configurable:!0}),e}();t.ErrorDescription=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(4),i=n(9);!function(e){e[e.Aad=0]="Aad",e[e.Adfs=1]="Adfs",e[e.B2C=2]="B2C"}(t.AuthorityType||(t.AuthorityType={}));var s=function(){function e(e,t){this.IsValidationEnabled=t,this.CanonicalAuthority=e,this.validateAsUri()}return Object.defineProperty(e.prototype,"Tenant",{get:function(){return this.CanonicalAuthorityUrlComponents.PathSegments[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"AuthorizationEndpoint",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.AuthorizationEndpoint.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"EndSessionEndpoint",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.EndSessionEndpoint.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"SelfSignedJwtAudience",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.Issuer.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),e.prototype.validateResolved=function(){if(!this.tenantDiscoveryResponse)throw"Please call ResolveEndpointsAsync first"},Object.defineProperty(e.prototype,"CanonicalAuthority",{get:function(){return this.canonicalAuthority},set:function(e){this.canonicalAuthority=o.Utils.CanonicalizeUri(e),this.canonicalAuthorityUrlComponents=null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CanonicalAuthorityUrlComponents",{get:function(){return this.canonicalAuthorityUrlComponents||(this.canonicalAuthorityUrlComponents=o.Utils.GetUrlComponents(this.CanonicalAuthority)),this.canonicalAuthorityUrlComponents},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"DefaultOpenIdConfigurationEndpoint",{get:function(){return this.CanonicalAuthority+"v2.0/.well-known/openid-configuration"},enumerable:!0,configurable:!0}),e.prototype.validateAsUri=function(){var e;try{e=this.CanonicalAuthorityUrlComponents}catch(e){throw r.ErrorMessage.invalidAuthorityType}if(!e.Protocol||"https:"!==e.Protocol.toLowerCase())throw r.ErrorMessage.authorityUriInsecure;if(!e.PathSegments||e.PathSegments.length<1)throw r.ErrorMessage.authorityUriInvalidPath},e.prototype.DiscoverEndpoints=function(e){return(new i.XhrClient).sendRequestAsync(e,"GET",!0).then(function(e){return{AuthorizationEndpoint:e.authorization_endpoint,EndSessionEndpoint:e.end_session_endpoint,Issuer:e.issuer}})},e.prototype.ResolveEndpointsAsync=function(){var e=this,t="";return this.GetOpenIdConfigurationEndpointAsync().then(function(n){return t=n,e.DiscoverEndpoints(t)}).then(function(t){return e.tenantDiscoveryResponse=t,e})},e}();t.Authority=s},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */Object.defineProperty(t,"__esModule",{value:!0});var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function r(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var o,r,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(o=i.next()).done;)s.push(o.value)}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return s}function s(e){return this instanceof s?(this.v=e,this):new s(e)}t.__extends=function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},t.__assign=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},t.__rest=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&(n[o[r]]=e[o[r]])}return n},t.__decorate=function(e,t,n,o){var r,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(s=(i<3?r(s):i>3?r(t,n,s):r(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},t.__param=function(e,t){return function(n,o){t(n,o,e)}},t.__metadata=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},t.__awaiter=function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function s(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(s,a)}c((o=o.apply(e,t||[])).next())})},t.__generator=function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=o[2&i[0]?"return":i[0]?"throw":"next"])&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[0,r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},t.__exportStar=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},t.__values=r,t.__read=i,t.__spread=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e},t.__await=s,t.__asyncGenerator=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(e,t||[]),i=[];return o={},a("next"),a("throw"),a("return"),o[Symbol.asyncIterator]=function(){return this},o;function a(e){r[e]&&(o[e]=function(t){return new Promise(function(n,o){i.push([e,t,n,o])>1||c(e,t)})})}function c(e,t){try{(n=r[e](t)).value instanceof s?Promise.resolve(n.value.v).then(u,l):p(i[0][2],n)}catch(e){p(i[0][3],e)}var n}function u(e){c("next",e)}function l(e){c("throw",e)}function p(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}},t.__asyncDelegator=function(e){var t,n;return t={},o("next"),o("throw",function(e){throw e}),o("return"),t[Symbol.iterator]=function(){return this},t;function o(o,r){e[o]&&(t[o]=function(t){return(n=!n)?{value:s(e[o](t)),done:"return"===o}:r?r(t):t})}},t.__asyncValues=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):r(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){}return Object.defineProperty(e,"authorityUriInvalidPath",{get:function(){return"AuthorityUriInvalidPath"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"authorityUriInsecure",{get:function(){return"AuthorityUriInsecure"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"invalidAuthorityType",{get:function(){return"InvalidAuthorityType"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"unsupportedAuthorityValidation",{get:function(){return"UnsupportedAuthorityValidation"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"b2cAuthorityUriInvalidPath",{get:function(){return"B2cAuthorityUriInvalidPath"},enumerable:!0,configurable:!0}),e}();t.ErrorMessage=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),r=n(13),i=n(14),s=n(15),a=n(16),c=n(1),u=n(17),l=n(18),p=n(6),d=n(7),h=n(0),f=n(20),g="id_token",m="token",C="id_token token",y=function(e,t,n){var o=n.value;return n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.isInIframe()?new Promise(function(){}):o.apply(this,e)},n},w=function(){function e(e,t){if(this.pTokenReceivedCallback=null,this.cacheLocations={localStorage:"localStorage",sessionStorage:"sessionStorage"},this.pConfig=e,this.pTokenReceivedCallback=t,this.pLoginInProgress=!1,this.pAcquireTokenInProgress=!1,!this.cacheLocations[this.pConfig.cache.cacheLocation])throw new Error("Cache Location is not valid. Provided value:"+this.pConfig.cache.cacheLocation+".Possible values are: "+this.cacheLocations.localStorage+", "+this.cacheLocations.sessionStorage);this.pCacheStorage=new l.Storage(this.pConfig.cache.cacheLocation),window.openedWindows=[],window.activeRenewals={},window.renewStates=[],window.callBackMappedToRenewStates={},window.callBacksMappedToRenewStates={},window.msal=this;var n=window.location.hash,o=this.isCallback(n);if(!this.pConfig.framework.isAngular)if(o)this.handleAuthenticationResponse.call(this,n);else{var r=this.pCacheStorage.getItem(c.Constants.urlHash);r&&this.processCallBack(r)}}return Object.defineProperty(e.prototype,"authority",{get:function(){return this.authorityInstance.CanonicalAuthority},set:function(e){this.authorityInstance=f.AuthorityFactory.CreateInstance(e,this.pConfig.auth.validateAuthority)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cacheLocation",{get:function(){return this.pConfig.cache.cacheLocation},enumerable:!0,configurable:!0}),e.prototype.getRedirectUri=function(){return"function"==typeof this.pConfig.auth.redirectUri?this.pConfig.auth.redirectUri():this.pConfig.auth.redirectUri},e.prototype.getPostLogoutRedirectUri=function(){return"function"==typeof this.pConfig.auth.postLogoutRedirectUri?this.pConfig.auth.postLogoutRedirectUri():this.pConfig.auth.postLogoutRedirectUri},e.prototype.processCallBack=function(e){this.pConfig.system.logger.info("Processing the callback from redirect response");var t=this.getRequestInfo(e);this.saveTokenFromHash(t);var n,o=t.parameters[c.Constants.accessToken]||t.parameters[c.Constants.idToken],r=t.parameters[c.Constants.errorDescription],i=t.parameters[c.Constants.error];n=t.parameters[c.Constants.accessToken]?c.Constants.accessToken:c.Constants.idToken,this.pCacheStorage.removeItem(c.Constants.urlHash);try{this.pTokenReceivedCallback&&(this.pCacheStorage.clearCookie(),this.pTokenReceivedCallback.call(this,r,o,i,n,this.getAccountState(this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie))))}catch(e){this.pConfig.system.logger.error("Error occurred in token received callback function: "+e)}},e.prototype.loginRedirect=function(e,t){var n=this;if(this.pLoginInProgress&&this.pTokenReceivedCallback)this.pTokenReceivedCallback(c.ErrorDescription.loginProgressError,null,c.ErrorCodes.loginProgressError,c.Constants.idToken,this.getAccountState(this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie)));else{if(e){var o=this.validateInputScope(e);if(o&&!h.Utils.isEmpty(o)&&this.pTokenReceivedCallback)return void this.pTokenReceivedCallback(c.ErrorDescription.inputScopesError,null,c.ErrorCodes.inputScopesError,c.Constants.idToken,this.getAccountState(this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie)));e=this.filterScopes(e)}var r;(r=this.extractADALIdToken())&&!e?(this.pConfig.system.logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken "),t=h.Utils.constructUnifiedCacheExtraQueryParameter(r,t),this.pSilentLogin=!0,this.acquireTokenSilent([this.pConfig.auth.clientId],this.authority,this.getAccount(),t).then(function(e){n.pSilentLogin=!1,n.pConfig.system.logger.info("Unified cache call is successful"),n.pTokenReceivedCallback&&n.pTokenReceivedCallback.call(n,null,e,null,c.Constants.idToken,n.getAccountState(n.pSilentAuthenticationState))},function(o){n.pSilentLogin=!1,n.pConfig.system.logger.error("Error occurred during unified cache ATS"),n.loginRedirectHelper(e,t)})):this.loginRedirectHelper(e,t)}},e.prototype.loginRedirectHelper=function(e,t){var n=this;this.pLoginInProgress=!0,this.authorityInstance.ResolveEndpointsAsync().then(function(){var o=new s.AuthenticationRequestParameters(n.authorityInstance,n.pConfig.auth.clientId,e,g,n.getRedirectUri(),n.pConfig.auth.state);t&&(o.extraQueryParameters=t);var r=n.pCacheStorage.getItem(c.Constants.angularLoginRequest);r&&""!==r?n.pCacheStorage.setItem(c.Constants.angularLoginRequest,""):r=window.location.href,n.pCacheStorage.setItem(c.Constants.loginRequest,r,n.pConfig.cache.storeAuthStateInCookie),n.pCacheStorage.setItem(c.Constants.loginError,""),n.pCacheStorage.setItem(c.Constants.stateLogin,o.state,n.pConfig.cache.storeAuthStateInCookie),n.pCacheStorage.setItem(c.Constants.nonceIdToken,o.nonce,n.pConfig.cache.storeAuthStateInCookie),n.pCacheStorage.setItem(c.Constants.msalError,""),n.pCacheStorage.setItem(c.Constants.msalErrorDescription,"");var i=c.Constants.authority+c.Constants.resourceDelimeter+o.state;n.pCacheStorage.setItem(i,n.authority,n.pConfig.cache.storeAuthStateInCookie);var a=o.createNavigateUrl(e)+c.Constants.response_mode_fragment;n.promptUser(a)})},e.prototype.loginPopup=function(e,t){var n=this;return new Promise(function(o,r){if(n.pLoginInProgress)r(c.ErrorCodes.loginProgressError+c.Constants.resourceDelimeter+c.ErrorDescription.loginProgressError);else{if(e){var i=n.validateInputScope(e);if(i&&!h.Utils.isEmpty(i))return void r(c.ErrorCodes.inputScopesError+c.Constants.resourceDelimeter+c.ErrorDescription.inputScopesError);e=n.filterScopes(e)}var s;(s=n.extractADALIdToken())&&!e?(n.pConfig.system.logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken "),t=h.Utils.constructUnifiedCacheExtraQueryParameter(s,t),n.pSilentLogin=!0,n.acquireTokenSilent([n.pConfig.auth.clientId],n.authority,n.getAccount(),t).then(function(e){n.pSilentLogin=!1,n.pConfig.system.logger.info("Unified cache call is successful"),o(e)},function(i){n.pSilentLogin=!1,n.pConfig.system.logger.error("Error occurred during unified cache ATS"),n.loginPopupHelper(o,r,e,t)})):n.loginPopupHelper(o,r,e,t)}})},e.prototype.loginPopupHelper=function(e,t,n,o){var r=this;n||(n=[this.pConfig.auth.clientId]);var i=n.join(" ").toLowerCase(),a=this.openWindow("about:blank","_blank",1,this,e,t);a&&(this.pLoginInProgress=!0,this.authorityInstance.ResolveEndpointsAsync().then(function(){var u=new s.AuthenticationRequestParameters(r.authorityInstance,r.pConfig.auth.clientId,n,g,r.getRedirectUri(),r.pConfig.auth.state);o&&(u.extraQueryParameters=o),r.pCacheStorage.setItem(c.Constants.loginRequest,window.location.href,r.pConfig.cache.storeAuthStateInCookie),r.pCacheStorage.setItem(c.Constants.loginError,""),r.pCacheStorage.setItem(c.Constants.nonceIdToken,u.nonce,r.pConfig.cache.storeAuthStateInCookie),r.pCacheStorage.setItem(c.Constants.msalError,""),r.pCacheStorage.setItem(c.Constants.msalErrorDescription,"");var l=c.Constants.authority+c.Constants.resourceDelimeter+u.state;r.pCacheStorage.setItem(l,r.authority,r.pConfig.cache.storeAuthStateInCookie);var p=u.createNavigateUrl(n)+c.Constants.response_mode_fragment;window.renewStates.push(u.state),window.requestType=c.Constants.login,r.registerCallback(u.state,i,e,t),a&&(r.pConfig.system.logger.infoPii("Navigated Popup window to:"+p),a.location.href=p)},function(){r.pConfig.system.logger.info(c.ErrorCodes.endpointResolutionError+":"+c.ErrorDescription.endpointResolutionError),r.pCacheStorage.setItem(c.Constants.msalError,c.ErrorCodes.endpointResolutionError),r.pCacheStorage.setItem(c.Constants.msalErrorDescription,c.ErrorDescription.endpointResolutionError),t&&t(c.ErrorCodes.endpointResolutionError+":"+c.ErrorDescription.endpointResolutionError),a&&a.close()}).catch(function(e){r.pConfig.system.logger.warning("could not resolve endpoints"),t(e)}))},e.prototype.promptUser=function(e){e&&!h.Utils.isEmpty(e)?(this.pConfig.system.logger.infoPii("Navigate to:"+e),window.location.replace(e)):this.pConfig.system.logger.info("Navigate url is empty")},e.prototype.openWindow=function(e,t,n,o,r,i){var s=this,a=this.openPopup(e,t,c.Constants.popUpWidth,c.Constants.popUpHeight);if(null==a)return o.pLoginInProgress=!1,o.pAcquireTokenInProgress=!1,this.pConfig.system.logger.info(c.ErrorCodes.popUpWindowError+":"+c.ErrorDescription.popUpWindowError),this.pCacheStorage.setItem(c.Constants.msalError,c.ErrorCodes.popUpWindowError),this.pCacheStorage.setItem(c.Constants.msalErrorDescription,c.ErrorDescription.popUpWindowError),i&&i(c.ErrorCodes.popUpWindowError+c.Constants.resourceDelimeter+c.ErrorDescription.popUpWindowError),null;window.openedWindows.push(a);var u=window.setInterval(function(){if(a&&a.closed&&o.pLoginInProgress){if(i&&i(c.ErrorCodes.userCancelledError+c.Constants.resourceDelimeter+c.ErrorDescription.userCancelledError),window.clearInterval(u),s.pConfig.framework.isAngular)return void s.broadcast("msal:popUpClosed",c.ErrorCodes.userCancelledError+c.Constants.resourceDelimeter+c.ErrorDescription.userCancelledError);o.pLoginInProgress=!1,o.pAcquireTokenInProgress=!1}try{var e=a.location;if(-1!==e.href.indexOf(s.getRedirectUri())&&(window.clearInterval(u),o.pLoginInProgress=!1,o.pAcquireTokenInProgress=!1,s.pConfig.system.logger.info("Closing popup window"),s.pConfig.framework.isAngular)){s.broadcast("msal:popUpHashChanged",e.hash);for(var t=0;t<window.openedWindows.length;t++)window.openedWindows[t].close()}}catch(e){}},n);return a},e.prototype.broadcast=function(e,t){var n=new CustomEvent(e,{detail:t});window.dispatchEvent(n)},e.prototype.logout=function(){this.clearCache(),this.pAccount=null;var e="";this.getPostLogoutRedirectUri()&&(e="post_logout_redirect_uri="+encodeURIComponent(this.getPostLogoutRedirectUri()));var t=this.authority+"/oauth2/v2.0/logout?"+e;this.promptUser(t)},e.prototype.clearCache=function(){window.renewStates=[];for(var e=this.pCacheStorage.getAllAccessTokens(c.Constants.clientId,c.Constants.userIdentifier),t=0;t<e.length;t++)this.pCacheStorage.removeItem(JSON.stringify(e[t].key));this.pCacheStorage.resetCacheItems(),this.pCacheStorage.clearCookie()},e.prototype.clearCacheForScope=function(e){for(var t=this.pCacheStorage.getAllAccessTokens(c.Constants.clientId,c.Constants.userIdentifier),n=0;n<t.length;n++){var o=t[n];o.value.accessToken===e&&this.pCacheStorage.removeItem(JSON.stringify(o.key))}},e.prototype.openPopup=function(e,t,n,o){try{var r=window.screenLeft?window.screenLeft:window.screenX,i=window.screenTop?window.screenTop:window.screenY,s=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,c=s/2-n/2+r,u=a/2-o/2+i,l=window.open(e,t,"width="+n+", height="+o+", top="+u+", left="+c);return l.focus&&l.focus(),l}catch(e){return this.pConfig.system.logger.error("error opening popup "+e.message),this.pLoginInProgress=!1,this.pAcquireTokenInProgress=!1,null}},e.prototype.validateInputScope=function(e){if(!e||e.length<1)return"Scopes cannot be passed as an empty array";if(!Array.isArray(e))throw new Error("API does not accept non-array scopes");return e.indexOf(this.pConfig.auth.clientId)>-1&&e.length>1?"ClientId can only be provided as a single scope":""},e.prototype.filterScopes=function(e){return e=(e=e.filter(function(e){return"openid"!==e})).filter(function(e){return"profile"!==e})},e.prototype.registerCallback=function(e,t,n,o){var r=this;window.activeRenewals[t]=e,window.callBacksMappedToRenewStates[e]||(window.callBacksMappedToRenewStates[e]=[]),window.callBacksMappedToRenewStates[e].push({resolve:n,reject:o}),window.callBackMappedToRenewStates[e]||(window.callBackMappedToRenewStates[e]=function(n,o,i,s){window.activeRenewals[t]=null;for(var a=0;a<window.callBacksMappedToRenewStates[e].length;++a)try{n||i?window.callBacksMappedToRenewStates[e][a].reject(n+c.Constants.resourceDelimeter+i):o&&window.callBacksMappedToRenewStates[e][a].resolve(o)}catch(e){r.pConfig.system.logger.warning(e)}window.callBacksMappedToRenewStates[e]=null,window.callBackMappedToRenewStates[e]=null})},e.prototype.getCachedTokenInternal=function(e,t){var n,o=t||this.getAccount();if(!o)return null;var r=this.authorityInstance?this.authorityInstance:f.AuthorityFactory.CreateInstance(this.authority,this.pConfig.auth.validateAuthority);return n=h.Utils.compareObjects(o,this.getAccount())?e.indexOf(this.pConfig.auth.clientId)>-1?new s.AuthenticationRequestParameters(r,this.pConfig.auth.clientId,e,g,this.getRedirectUri(),this.pConfig.auth.state):new s.AuthenticationRequestParameters(r,this.pConfig.auth.clientId,e,m,this.getRedirectUri(),this.pConfig.auth.state):new s.AuthenticationRequestParameters(r,this.pConfig.auth.clientId,e,C,this.getRedirectUri(),this.pConfig.auth.state),this.getCachedToken(n,t)},e.prototype.getCachedToken=function(e,t){var n=null,o=e.scopes,r=this.pCacheStorage.getAllAccessTokens(this.pConfig.auth.clientId,t?t.homeAccountIdentifier:null);if(0===r.length)return null;var i=[];if(e.authority){for(s=0;s<r.length;s++){c=(a=r[s]).key.scopes.split(" ");h.Utils.containsScope(c,o)&&a.key.authority===e.authority&&i.push(a)}if(0===i.length)return null;if(1!==i.length)return{errorDesc:"The cache contains multiple tokens satisfying the requirements.Call AcquireToken again providing more requirements like authority",token:null,error:"multiple_matching_tokens_detected"};n=i[0]}else{for(var s=0;s<r.length;s++){var a,c=(a=r[s]).key.scopes.split(" ");h.Utils.containsScope(c,o)&&i.push(a)}if(1===i.length)n=i[0],e.authorityInstance=f.AuthorityFactory.CreateInstance(n.key.authority,this.pConfig.auth.validateAuthority);else{if(i.length>1)return{errorDesc:"The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements like authority",token:null,error:"multiple_matching_tokens_detected"};var u=this.getUniqueAuthority(r,"authority");if(u.length>1)return{errorDesc:"Multiple authorities found in the cache. Pass authority in the API overload.",token:null,error:"multiple_matching_tokens_detected"};e.authorityInstance=f.AuthorityFactory.CreateInstance(u[0],this.pConfig.auth.validateAuthority)}}if(null!=n){var l=Number(n.value.expiresIn),p=this.pConfig.system.tokenRenewalOffsetSeconds||300;return l&&l>h.Utils.now()+p?{errorDesc:null,token:n.value.accessToken,error:null}:(this.pCacheStorage.removeItem(JSON.stringify(i[0].key)),null)}return null},e.prototype.getAllAccounts=function(){for(var e=[],t=this.pCacheStorage.getAllAccessTokens(c.Constants.clientId,c.Constants.userIdentifier),n=0;n<t.length;n++){var o=new u.IdToken(t[n].value.idToken),r=new a.HomeAccountIdentifier(t[n].value.clientInfo),i=d.Account.createAccount(o,r);e.push(i)}return this.getUniqueAccounts(e)},e.prototype.getUniqueAccounts=function(e){if(!e||e.length<=1)return e;for(var t=[],n=[],o=0;o<e.length;++o)e[o].homeAccountIdentifier&&-1===t.indexOf(e[o].homeAccountIdentifier)&&(t.push(e[o].homeAccountIdentifier),n.push(e[o]));return n},e.prototype.getUniqueAuthority=function(e,t){var n=[],o=[];return e.forEach(function(e){e.key.hasOwnProperty(t)&&-1===o.indexOf(e.key[t])&&(o.push(e.key[t]),n.push(e.key[t]))}),n},e.prototype.addHintParameters=function(e,t){var n=t||this.getAccount();if(n){var o=n.homeAccountIdentifier.split("."),r=h.Utils.base64DecodeStringUrlSafe(o[0]),i=h.Utils.base64DecodeStringUrlSafe(o[1]);n.sid&&-1!==e.indexOf(c.Constants.prompt_none)?this.urlContainsQueryStringParameter(c.Constants.sid,e)||this.urlContainsQueryStringParameter(c.Constants.login_hint,e)||(e+="&"+c.Constants.sid+"="+encodeURIComponent(n.sid)):this.urlContainsQueryStringParameter(c.Constants.login_hint,e)||!n.userName||h.Utils.isEmpty(n.userName)||(e+="&"+c.Constants.login_hint+"="+encodeURIComponent(n.userName)),h.Utils.isEmpty(r)||h.Utils.isEmpty(i)||(this.urlContainsQueryStringParameter("domain_req",e)||h.Utils.isEmpty(i)||(e+="&domain_req="+encodeURIComponent(i)),this.urlContainsQueryStringParameter("login_req",e)||h.Utils.isEmpty(r)||(e+="&login_req="+encodeURIComponent(r))),this.urlContainsQueryStringParameter(c.Constants.domain_hint,e)||h.Utils.isEmpty(i)||(i===c.Constants.consumersUtid?e+="&"+c.Constants.domain_hint+"="+encodeURIComponent(c.Constants.consumers):e+="&"+c.Constants.domain_hint+"="+encodeURIComponent(c.Constants.organizations))}return e},e.prototype.urlContainsQueryStringParameter=function(e,t){return new RegExp("[\\?&]"+e+"=").test(t)},e.prototype.acquireTokenRedirect=function(e,t,n,o){var r=this,i=this.validateInputScope(e);if(i&&!h.Utils.isEmpty(i)&&this.pTokenReceivedCallback)this.pTokenReceivedCallback(c.ErrorDescription.inputScopesError,null,c.ErrorCodes.inputScopesError,c.Constants.accessToken,this.getAccountState(this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie)));else{e&&(e=this.filterScopes(e));var a=n||this.getAccount();if(!this.pAcquireTokenInProgress){var u;e.join(" ").toLowerCase();if(!(a||o&&-1!==o.indexOf(c.Constants.login_hint))&&this.pTokenReceivedCallback)return this.pConfig.system.logger.info("User login is required"),void this.pTokenReceivedCallback(c.ErrorDescription.userLoginError,null,c.ErrorCodes.userLoginError,c.Constants.accessToken,this.getAccountState(this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie)));this.pAcquireTokenInProgress=!0;var l=t?f.AuthorityFactory.CreateInstance(t,this.pConfig.auth.validateAuthority):this.authorityInstance;l.ResolveEndpointsAsync().then(function(){var t;u=h.Utils.compareObjects(a,r.getAccount())?e.indexOf(r.pConfig.auth.clientId)>-1?new s.AuthenticationRequestParameters(l,r.pConfig.auth.clientId,e,g,r.getRedirectUri(),r.pConfig.auth.state):new s.AuthenticationRequestParameters(l,r.pConfig.auth.clientId,e,m,r.getRedirectUri(),r.pConfig.auth.state):new s.AuthenticationRequestParameters(l,r.pConfig.auth.clientId,e,C,r.getRedirectUri(),r.pConfig.auth.state),r.pCacheStorage.setItem(c.Constants.nonceIdToken,u.nonce,r.pConfig.cache.storeAuthStateInCookie),t=a?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+a.homeAccountIdentifier+c.Constants.resourceDelimeter+u.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_account+c.Constants.resourceDelimeter+u.state,r.pCacheStorage.setItem(t,JSON.stringify(a));var n=c.Constants.authority+c.Constants.resourceDelimeter+u.state;r.pCacheStorage.setItem(n,l.CanonicalAuthority,r.pConfig.cache.storeAuthStateInCookie),o&&(u.extraQueryParameters=o);var i=u.createNavigateUrl(e)+c.Constants.response_mode_fragment;(i=r.addHintParameters(i,a))&&(r.pCacheStorage.setItem(c.Constants.stateAcquireToken,u.state,r.pConfig.cache.storeAuthStateInCookie),window.location.replace(i))})}}},e.prototype.acquireTokenPopup=function(e,t,n,o){var r=this;return new Promise(function(i,a){var u=r.validateInputScope(e);u&&!h.Utils.isEmpty(u)&&a(c.ErrorCodes.inputScopesError+c.Constants.resourceDelimeter+u),e&&(e=r.filterScopes(e));var l=n||r.getAccount();if(r.pAcquireTokenInProgress)a(c.ErrorCodes.acquireTokenProgressError+c.Constants.resourceDelimeter+c.ErrorDescription.acquireTokenProgressError);else{var p,d=e.join(" ").toLowerCase();if(!(l||o&&-1!==o.indexOf(c.Constants.login_hint)))return r.pConfig.system.logger.info("User login is required"),void a(c.ErrorCodes.userLoginError+c.Constants.resourceDelimeter+c.ErrorDescription.userLoginError);r.pAcquireTokenInProgress=!0;var y=t?f.AuthorityFactory.CreateInstance(t,r.pConfig.auth.validateAuthority):r.authorityInstance,w=r.openWindow("about:blank","_blank",1,r,i,a);w&&y.ResolveEndpointsAsync().then(function(){var t;p=h.Utils.compareObjects(l,r.getAccount())?e.indexOf(r.pConfig.auth.clientId)>-1?new s.AuthenticationRequestParameters(y,r.pConfig.auth.clientId,e,g,r.getRedirectUri(),r.pConfig.auth.state):new s.AuthenticationRequestParameters(y,r.pConfig.auth.clientId,e,m,r.getRedirectUri(),r.pConfig.auth.state):new s.AuthenticationRequestParameters(y,r.pConfig.auth.clientId,e,C,r.getRedirectUri(),r.pConfig.auth.state),r.pCacheStorage.setItem(c.Constants.nonceIdToken,p.nonce),p.state=p.state,t=l?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+l.homeAccountIdentifier+c.Constants.resourceDelimeter+p.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_account+c.Constants.resourceDelimeter+p.state,r.pCacheStorage.setItem(t,JSON.stringify(l));var n=c.Constants.authority+c.Constants.resourceDelimeter+p.state;r.pCacheStorage.setItem(n,y.CanonicalAuthority,r.pConfig.cache.storeAuthStateInCookie),o&&(p.extraQueryParameters=o);var u=p.createNavigateUrl(e)+c.Constants.response_mode_fragment;u=r.addHintParameters(u,l),window.renewStates.push(p.state),window.requestType=c.Constants.renewToken,r.registerCallback(p.state,d,i,a),w&&(w.location.href=u)},function(){r.pConfig.system.logger.info(c.ErrorCodes.endpointResolutionError+":"+c.ErrorDescription.endpointResolutionError),r.pCacheStorage.setItem(c.Constants.msalError,c.ErrorCodes.endpointResolutionError),r.pCacheStorage.setItem(c.Constants.msalErrorDescription,c.ErrorDescription.endpointResolutionError),a&&a(c.ErrorCodes.endpointResolutionError+c.Constants.resourceDelimeter+c.ErrorDescription.endpointResolutionError),w&&w.close()}).catch(function(e){r.pConfig.system.logger.warning("could not resolve endpoints"),a(e)})}})},e.prototype.acquireTokenSilent=function(e,t,n,o){var r=this;return new Promise(function(i,a){var u=r.validateInputScope(e);if(u&&!h.Utils.isEmpty(u))return a(c.ErrorCodes.inputScopesError+"|"+u),null;e&&(e=r.filterScopes(e));var l,p=e.join(" ").toLowerCase(),d=n||r.getAccount(),y=r.pCacheStorage.getItem(c.Constants.adalIdToken);if(!d&&h.Utils.checkSSO(o)&&h.Utils.isEmpty(y))return r.pConfig.system.logger.info("User login is required"),a(c.ErrorCodes.userLoginError+c.Constants.resourceDelimeter+c.ErrorDescription.userLoginError),null;if(!d&&!h.Utils.isEmpty(y)){var w=h.Utils.extractIdToken(y);console.log("ADAL's idToken exists. Extracting login information from ADAL's idToken "),o=h.Utils.constructUnifiedCacheExtraQueryParameter(w,o)}l=h.Utils.compareObjects(d,r.getAccount())?e.indexOf(r.pConfig.auth.clientId)>-1?new s.AuthenticationRequestParameters(f.AuthorityFactory.CreateInstance(t,r.pConfig.auth.validateAuthority),r.pConfig.auth.clientId,e,g,r.getRedirectUri(),r.pConfig.auth.state):new s.AuthenticationRequestParameters(f.AuthorityFactory.CreateInstance(t,r.pConfig.auth.validateAuthority),r.pConfig.auth.clientId,e,m,r.getRedirectUri(),r.pConfig.auth.state):e.indexOf(r.pConfig.auth.clientId)>-1?new s.AuthenticationRequestParameters(f.AuthorityFactory.CreateInstance(t,r.pConfig.auth.validateAuthority),r.pConfig.auth.clientId,e,g,r.getRedirectUri(),r.pConfig.auth.state):new s.AuthenticationRequestParameters(f.AuthorityFactory.CreateInstance(t,r.pConfig.auth.validateAuthority),r.pConfig.auth.clientId,e,C,r.getRedirectUri(),r.pConfig.auth.state);var v=r.getCachedToken(l,d);if(v){if(v.token)return r.pConfig.system.logger.info("Token is already in cache for scope:"+p),i(v.token),null;if(v.errorDesc||v.error)return r.pConfig.system.logger.infoPii(v.errorDesc+":"+v.error),a(v.errorDesc+c.Constants.resourceDelimeter+v.error),null}else r.pConfig.system.logger.verbose("Token is not in cache for scope:"+p);return l.authorityInstance||(l.authorityInstance=t?f.AuthorityFactory.CreateInstance(t,r.pConfig.auth.validateAuthority):r.authorityInstance),l.authorityInstance.ResolveEndpointsAsync().then(function(){window.activeRenewals[p]?(r.pConfig.system.logger.verbose("Renew token for scope: "+p+" is in progress. Registering callback"),r.registerCallback(window.activeRenewals[p],p,i,a)):e&&e.indexOf(r.pConfig.auth.clientId)>-1&&1===e.length?(r.pConfig.system.logger.verbose("renewing idToken"),r.renewIdToken(e,i,a,d,l,o)):(r.pConfig.system.logger.verbose("renewing accesstoken"),r.renewToken(e,i,a,d,l,o))}).catch(function(e){return r.pConfig.system.logger.warning("could not resolve endpoints"),a(e),null})})},e.prototype.extractADALIdToken=function(){var e=this.pCacheStorage.getItem(c.Constants.adalIdToken);return h.Utils.isEmpty(e)?null:h.Utils.extractIdToken(e)},e.prototype.loadIframeTimeout=function(e,t,n){var o=this,r=window.activeRenewals[n];this.pConfig.system.logger.verbose("Set loading state to pending for: "+n+":"+r),this.pCacheStorage.setItem(c.Constants.renewStatus+r,c.Constants.tokenRenewStatusInProgress),this.loadFrame(e,t),setTimeout(function(){o.pCacheStorage.getItem(c.Constants.renewStatus+r)===c.Constants.tokenRenewStatusInProgress&&(o.pConfig.system.logger.verbose("Loading frame has timed out after: "+o.pConfig.system.loadFrameTimeout/1e3+" seconds for scope "+n+":"+r),r&&window.callBackMappedToRenewStates[r]&&window.callBackMappedToRenewStates[r]("Token renewal operation failed due to timeout",null,"Token Renewal Failed",c.Constants.accessToken),o.pCacheStorage.setItem(c.Constants.renewStatus+r,c.Constants.tokenRenewStatusCancelled))},this.pConfig.system.loadFrameTimeout)},e.prototype.loadFrame=function(e,t){var n=this;this.pConfig.system.logger.info("LoadFrame: "+t);var o=t;setTimeout(function(){var r=n.addAdalFrame(o);""!==r.src&&"about:blank"!==r.src||(r.src=e,n.pConfig.system.logger.infoPii("Frame Name : "+t+" Navigated to: "+e))},500)},e.prototype.addAdalFrame=function(e){if(void 0===e)return null;this.pConfig.system.logger.info("Add msal frame to document:"+e);var t=document.getElementById(e);if(!t){if(document.createElement&&document.documentElement&&-1===window.navigator.userAgent.indexOf("MSIE 5.0")){var n=document.createElement("iframe");n.setAttribute("id",e),n.style.visibility="hidden",n.style.position="absolute",n.style.width=n.style.height="0",n.style.border="0",t=document.getElementsByTagName("body")[0].appendChild(n)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML("beforeend","<iframe name='"+e+"' id='"+e+"' style='display:none'></iframe>");window.frames&&window.frames[e]&&(t=window.frames[e])}return t},e.prototype.renewToken=function(e,t,n,o,r,i){var s=e.join(" ").toLowerCase();this.pConfig.system.logger.verbose("renewToken is called for scope:"+s);var a,u=this.addAdalFrame("msalRenewFrame"+s);i&&(r.extraQueryParameters=i),a=o?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+o.homeAccountIdentifier+c.Constants.resourceDelimeter+r.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_account+c.Constants.resourceDelimeter+r.state,this.pCacheStorage.setItem(a,JSON.stringify(o));var l=c.Constants.authority+c.Constants.resourceDelimeter+r.state;this.pCacheStorage.setItem(l,r.authority),this.pCacheStorage.setItem(c.Constants.nonceIdToken,r.nonce),this.pConfig.system.logger.verbose("Renew token Expected state: "+r.state);var p=h.Utils.urlRemoveQueryStringParameter(r.createNavigateUrl(e),c.Constants.prompt)+c.Constants.prompt_none;p=this.addHintParameters(p,o),window.renewStates.push(r.state),window.requestType=c.Constants.renewToken,this.registerCallback(r.state,s,t,n),this.pConfig.system.logger.infoPii("Navigate to:"+p),u.src="about:blank",this.loadIframeTimeout(p,"msalRenewFrame"+s,s)},e.prototype.renewIdToken=function(e,t,n,o,r,i){e.join(" ").toLowerCase();this.pConfig.system.logger.info("renewidToken is called");var s,a=this.addAdalFrame("msalIdTokenFrame");i&&(r.extraQueryParameters=i),s=o?c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+o.homeAccountIdentifier+c.Constants.resourceDelimeter+r.state:c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_account+c.Constants.resourceDelimeter+r.state,this.pCacheStorage.setItem(s,JSON.stringify(o));var u=c.Constants.authority+c.Constants.resourceDelimeter+r.state;this.pCacheStorage.setItem(u,r.authority),this.pCacheStorage.setItem(c.Constants.nonceIdToken,r.nonce),this.pConfig.system.logger.verbose("Renew Idtoken Expected state: "+r.state);var l=h.Utils.urlRemoveQueryStringParameter(r.createNavigateUrl(e),c.Constants.prompt)+c.Constants.prompt_none;l=this.addHintParameters(l,o),this.pSilentLogin?(window.requestType=c.Constants.login,this.pSilentAuthenticationState=r.state):(window.requestType=c.Constants.renewToken,window.renewStates.push(r.state)),this.registerCallback(r.state,this.pConfig.auth.clientId,t,n),this.pConfig.system.logger.infoPii("Navigate to:"+l),a.src="about:blank",this.loadIframeTimeout(l,"msalIdTokenFrame",this.pConfig.auth.clientId)},e.prototype.getAccount=function(){if(this.pAccount)return this.pAccount;var e=this.pCacheStorage.getItem(c.Constants.idTokenKey),t=this.pCacheStorage.getItem(c.Constants.msalClientInfo);if(!h.Utils.isEmpty(e)&&!h.Utils.isEmpty(t)){var n=new u.IdToken(e),o=new a.HomeAccountIdentifier(t);return this.pAccount=d.Account.createAccount(n,o),this.pAccount}return null},e.prototype.handleAuthenticationResponse=function(e){null==e&&(e=window.location.hash);var t=null,n=!1,o=!1;try{o=window.opener&&window.opener.msal&&window.opener.msal!==window.msal}catch(e){o=!1}o?(t=window.opener.msal,n=!0):window.parent&&window.parent.msal&&(t=window.parent.msal);var r,i=t.getRequestInfo(e),s=null,a=null;if(t.pLogger.info("Returned from redirect url"),window.parent!==window&&window.parent.msal)a=window.parent.callBackMappedToRenewStates[i.stateResponse];else if(o)a=window.opener.callBackMappedToRenewStates[i.stateResponse];else{if(t._navigateToLoginRequestUrl)return a=null,t.pCacheStorage.setItem(c.Constants.urlHash,e),!1,void(window.parent!==window||n||(window.location.href=t.pCacheStorage.getItem(c.Constants.loginRequest,this.pConfig.cache.storeAuthStateInCookie)));a=t.pTokenReceivedCallback,window.location.hash=""}t.saveTokenFromHash(i),i.requestType===c.Constants.renewToken&&window.parent?(window.parent!==window?t.pLogger.verbose("Window is in iframe, acquiring token silently"):t.pLogger.verbose("acquiring token interactive in progress"),s=i.parameters[c.Constants.accessToken]||i.parameters[c.Constants.idToken],r=c.Constants.accessToken):i.requestType===c.Constants.login&&(s=i.parameters[c.Constants.idToken],r=c.Constants.idToken);var u=i.parameters[c.Constants.errorDescription],l=i.parameters[c.Constants.error];try{a&&(i.stateMatch?a.call(t,u,s,l,r,this.getAccountState(i.stateResponse)):a.call(t,u,s,l,r,null))}catch(e){t.pLogger.error("Error occurred in token received callback function: "+e)}if(o)for(var p=0;p<window.opener.openedWindows.length;p++)window.opener.openedWindows[p].close()},e.prototype.saveAccessToken=function(e,t,n,o,s){var u,l=new a.HomeAccountIdentifier(o);if(t.parameters.hasOwnProperty("scope")){for(var p=(u=t.parameters.scope).split(" "),d=this.pCacheStorage.getAllAccessTokens(this.pConfig.auth.clientId,e),f=0;f<d.length;f++){var g=d[f];if(g.key.userIdentifier===n.homeAccountIdentifier){var m=g.key.scopes.split(" ");h.Utils.isIntersectingScopes(m,p)&&this.pCacheStorage.removeItem(JSON.stringify(g.key))}}var C=new r.AccessTokenKey(e,this.pConfig.auth.clientId,u,l.uid,l.utid),y=new i.AccessTokenValue(t.parameters[c.Constants.accessToken],s.rawIdToken,h.Utils.expiresIn(t.parameters[c.Constants.expiresIn]).toString(),o);this.pCacheStorage.setItem(JSON.stringify(C),JSON.stringify(y))}else{u=this.pConfig.auth.clientId;C=new r.AccessTokenKey(e,this.pConfig.auth.clientId,u,l.uid,l.utid),y=new i.AccessTokenValue(t.parameters[c.Constants.idToken],t.parameters[c.Constants.idToken],s.expiration,o);this.pCacheStorage.setItem(JSON.stringify(C),JSON.stringify(y))}},e.prototype.saveTokenFromHash=function(e){this.pConfig.system.logger.info("State status:"+e.stateMatch+"; Request type:"+e.requestType),this.pCacheStorage.setItem(c.Constants.msalError,""),this.pCacheStorage.setItem(c.Constants.msalErrorDescription,"");var t="",n="";if(e.parameters.hasOwnProperty("scope")?e.parameters.scope.toLowerCase():this.pConfig.auth.clientId,e.parameters.hasOwnProperty(c.Constants.errorDescription)||e.parameters.hasOwnProperty(c.Constants.error)){if(this.pConfig.system.logger.infoPii("Error :"+e.parameters[c.Constants.error]+"; Error description:"+e.parameters[c.Constants.errorDescription]),this.pCacheStorage.setItem(c.Constants.msalError,e.parameters.error),this.pCacheStorage.setItem(c.Constants.msalErrorDescription,e.parameters[c.Constants.errorDescription]),e.requestType===c.Constants.login&&(this.pLoginInProgress=!1,this.pCacheStorage.setItem(c.Constants.loginError,e.parameters[c.Constants.errorDescription]+":"+e.parameters[c.Constants.error]),t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse),e.requestType===c.Constants.renewToken){this.pAcquireTokenInProgress=!1,t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse;var o=null!==this.getAccount()?this.getAccount().homeAccountIdentifier:"";n=c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+o+c.Constants.resourceDelimeter+e.stateResponse}}else if(e.stateMatch){var r;this.pConfig.system.logger.info("State is right"),e.parameters.hasOwnProperty(c.Constants.sessionState)&&this.pCacheStorage.setItem(c.Constants.msalSessionState,e.parameters[c.Constants.sessionState]);var i="";if(e.parameters.hasOwnProperty(c.Constants.accessToken)){this.pConfig.system.logger.info("Fragment has access token"),this.pAcquireTokenInProgress=!1;var s=void 0;r=e.parameters.hasOwnProperty(c.Constants.idToken)?new u.IdToken(e.parameters[c.Constants.idToken]):new u.IdToken(this.pCacheStorage.getItem(c.Constants.idTokenKey)),t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse;var l=this.pCacheStorage.getItem(t,this.pConfig.cache.storeAuthStateInCookie);h.Utils.isEmpty(l)||(l=h.Utils.replaceFirstPath(l,r.tenantId)),e.parameters.hasOwnProperty(c.Constants.clientInfo)?(i=e.parameters[c.Constants.clientInfo],s=d.Account.createAccount(r,new a.HomeAccountIdentifier(i))):(this.pConfig.system.logger.warning("ClientInfo not received in the response from AAD"),s=d.Account.createAccount(r,new a.HomeAccountIdentifier(i))),n=c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+s.homeAccountIdentifier+c.Constants.resourceDelimeter+e.stateResponse;var p=c.Constants.acquireTokenUser+c.Constants.resourceDelimeter+c.Constants.no_account+c.Constants.resourceDelimeter+e.stateResponse,f=this.pCacheStorage.getItem(n),g=void 0;h.Utils.isEmpty(f)?h.Utils.isEmpty(this.pCacheStorage.getItem(p))||this.saveAccessToken(l,e,s,i,r):(g=JSON.parse(f),s&&g&&h.Utils.compareObjects(s,g)?(this.saveAccessToken(l,e,s,i,r),this.pConfig.system.logger.info("The user object received in the response is the same as the one passed in the acquireToken request")):this.pConfig.system.logger.warning("The user object created from the response is not the same as the one passed in the acquireToken request"))}if(e.parameters.hasOwnProperty(c.Constants.idToken)){this.pConfig.system.logger.info("Fragment has id token"),this.pLoginInProgress=!1,r=new u.IdToken(e.parameters[c.Constants.idToken]),e.parameters.hasOwnProperty(c.Constants.clientInfo)?i=e.parameters[c.Constants.clientInfo]:this.pConfig.system.logger.warning("ClientInfo not received in the response from AAD"),t=c.Constants.authority+c.Constants.resourceDelimeter+e.stateResponse;l=this.pCacheStorage.getItem(t,this.pConfig.cache.storeAuthStateInCookie);h.Utils.isEmpty(l)||(l=h.Utils.replaceFirstPath(l,r.tenantId)),this.pAccount=d.Account.createAccount(r,new a.HomeAccountIdentifier(i)),r&&r.nonce?r.nonce!==this.pCacheStorage.getItem(c.Constants.nonceIdToken,this.pConfig.cache.storeAuthStateInCookie)?(this.pAccount=null,this.pCacheStorage.setItem(c.Constants.loginError,"Nonce Mismatch. Expected Nonce: "+this.pCacheStorage.getItem(c.Constants.nonceIdToken,this.pConfig.cache.storeAuthStateInCookie)+",Actual Nonce: "+r.nonce),this.pConfig.system.logger.error("Nonce Mismatch.Expected Nonce: "+this.pCacheStorage.getItem(c.Constants.nonceIdToken,this.pConfig.cache.storeAuthStateInCookie)+",Actual Nonce: "+r.nonce)):(this.pCacheStorage.setItem(c.Constants.idTokenKey,e.parameters[c.Constants.idToken]),this.pCacheStorage.setItem(c.Constants.msalClientInfo,i),this.saveAccessToken(l,e,this.pAccount,i,r)):(t=e.stateResponse,n=e.stateResponse,this.pConfig.system.logger.error("Invalid id_token received in the response"),e.parameters.error="invalid idToken",e.parameters.error_description="Invalid idToken. idToken: "+e.parameters[c.Constants.idToken],this.pCacheStorage.setItem(c.Constants.msalError,"invalid idToken"),this.pCacheStorage.setItem(c.Constants.msalErrorDescription,"Invalid idToken. idToken: "+e.parameters[c.Constants.idToken]))}}else t=e.stateResponse,n=e.stateResponse,this.pConfig.system.logger.error("State Mismatch.Expected State: "+this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie)+",Actual State: "+e.stateResponse),e.parameters.error="Invalid_state",e.parameters.error_description="Invalid_state. state: "+e.stateResponse,this.pCacheStorage.setItem(c.Constants.msalError,"Invalid_state"),this.pCacheStorage.setItem(c.Constants.msalErrorDescription,"Invalid_state. state: "+e.stateResponse);this.pCacheStorage.setItem(c.Constants.renewStatus+e.stateResponse,c.Constants.tokenRenewStatusCompleted),this.pCacheStorage.removeAcquireTokenEntries(t,n),this.pConfig.cache.storeAuthStateInCookie&&(this.pCacheStorage.setItemCookie(t,"",-1),this.pCacheStorage.clearCookie())},e.prototype.isCallback=function(e){e=this.getHash(e);var t=h.Utils.deserialize(e);return t.hasOwnProperty(c.Constants.errorDescription)||t.hasOwnProperty(c.Constants.error)||t.hasOwnProperty(c.Constants.accessToken)||t.hasOwnProperty(c.Constants.idToken)},e.prototype.getHash=function(e){return e.indexOf("#/")>-1?e=e.substring(e.indexOf("#/")+2):e.indexOf("#")>-1&&(e=e.substring(1)),e},e.prototype.getRequestInfo=function(e){e=this.getHash(e);var t=h.Utils.deserialize(e),n=new p.TokenResponse;if(t&&(n.parameters=t,t.hasOwnProperty(c.Constants.errorDescription)||t.hasOwnProperty(c.Constants.error)||t.hasOwnProperty(c.Constants.accessToken)||t.hasOwnProperty(c.Constants.idToken))){n.valid=!0;var o=void 0;if(!t.hasOwnProperty("state"))return n;if(o=t.state,n.stateResponse=o,o===this.pCacheStorage.getItem(c.Constants.stateLogin,this.pConfig.cache.storeAuthStateInCookie)||o===this.pSilentAuthenticationState)return n.requestType=c.Constants.login,n.stateMatch=!0,n;if(o===this.pCacheStorage.getItem(c.Constants.stateAcquireToken,this.pConfig.cache.storeAuthStateInCookie))return n.requestType=c.Constants.renewToken,n.stateMatch=!0,n;if(!n.stateMatch){n.requestType=window.requestType;for(var r=window.renewStates,i=0;i<r.length;i++)if(r[i]===n.stateResponse){n.stateMatch=!0;break}}}return n},e.prototype.getScopeFromState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return""},e.prototype.getAccountState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return""},e.prototype.isInIframe=function(){return window.parent!==window},e.prototype.loginInProgress=function(){return!!this.pCacheStorage.getItem(c.Constants.urlHash)||this.pLoginInProgress},e.prototype.getHostFromUri=function(e){var t=String(e).replace(/^(https?:)\/\//,"");return t=t.split("/")[0]},e.prototype.getScopesForEndpoint=function(e){if(this.pConfig.framework.unprotectedResources.length>0)for(var t=0;t<this.pConfig.framework.unprotectedResources.length;t++)if(e.indexOf(this.pConfig.framework.unprotectedResources[t])>-1)return null;if(this.pConfig.framework.protectedResourceMap.size>0)for(var n=0,o=Array.from(this.pConfig.framework.protectedResourceMap.keys());n<o.length;n++){var r=o[n];if(e.indexOf(r)>-1)return this.pConfig.framework.protectedResourceMap.get(r)}return e.indexOf("http://")>-1||e.indexOf("https://")>-1?this.getHostFromUri(e)===this.getHostFromUri(this.getRedirectUri())?new Array(this.pConfig.auth.clientId):null:new Array(this.pConfig.auth.clientId)},e.prototype.setloginInProgress=function(e){this.pLoginInProgress=e},e.prototype.getAcquireTokenInProgress=function(){return this.pAcquireTokenInProgress},e.prototype.setAcquireTokenInProgress=function(e){this.pAcquireTokenInProgress=e},e.prototype.getLogger=function(){return this.pConfig.system.logger},o.__decorate([y],e.prototype,"acquireTokenSilent",null),e}();t.UserAgentApplication=w},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){return function(){this.valid=!1,this.parameters={},this.stateMatch=!1,this.stateResponse="",this.requestType="unknown"}}();t.TokenResponse=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){function e(e,t,n,o,r,i,s){this.accountIdentifier=e,this.homeAccountIdentifier=t,this.userName=n,this.name=o,this.idToken=r,this.sid=i,this.environment=s}return e.createAccount=function(t,n){var r,i,s,a;return t?(r=t.uid,i=t.utid):(r="",i=""),n?(s=n.uid,a=n.utid):(s="",a=""),new e(o.Utils.base64EncodeStringUrlSafe(r)+"."+o.Utils.base64EncodeStringUrlSafe(i),o.Utils.base64EncodeStringUrlSafe(s)+"."+o.Utils.base64EncodeStringUrlSafe(a),t.preferredName,t.name,t.decodedIdToken,t.sid,t.issuer)},e}();t.Account=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),r=n(2),i=n(9),s=function(e){function t(t,n){return e.call(this,t,n)||this}return o.__extends(t,e),Object.defineProperty(t.prototype,"AadInstanceDiscoveryEndpointUrl",{get:function(){return t.AadInstanceDiscoveryEndpoint+"?api-version=1.0&authorization_endpoint="+this.CanonicalAuthority+"oauth2/v2.0/authorize"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"AuthorityType",{get:function(){return r.AuthorityType.Aad},enumerable:!0,configurable:!0}),t.prototype.GetOpenIdConfigurationEndpointAsync=function(){var e=this,t=new Promise(function(t,n){return t(e.DefaultOpenIdConfigurationEndpoint)});if(!this.IsValidationEnabled)return t;var n=this.CanonicalAuthorityUrlComponents.HostNameAndPort;return this.IsInTrustedHostList(n)?t:(new i.XhrClient).sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl,"GET",!0).then(function(e){return e.tenant_discovery_endpoint})},t.prototype.IsInTrustedHostList=function(e){return t.TrustedHostList[e.toLowerCase()]},t.AadInstanceDiscoveryEndpoint="https://login.microsoftonline.com/common/discovery/instance",t.TrustedHostList={"login.windows.net":"login.windows.net","login.chinacloudapi.cn":"login.chinacloudapi.cn","login.cloudgovapi.us":"login.cloudgovapi.us","login.microsoftonline.com":"login.microsoftonline.com","login.microsoftonline.de":"login.microsoftonline.de","login.microsoftonline.us":"login.microsoftonline.us"},t}(r.Authority);t.AadAuthority=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){}return e.prototype.sendRequestAsync=function(e,t,n){var o=this;return new Promise(function(n,r){var i=new XMLHttpRequest;if(i.open(t,e,!0),i.onload=function(e){(i.status<200||i.status>=300)&&r(o.handleError(i.responseText));try{var t=JSON.parse(i.responseText)}catch(e){r(o.handleError(i.responseText))}n(t)},i.onerror=function(e){r(i.status)},"GET"!==t)throw"not implemented";i.send()})},e.prototype.handleError=function(e){var t;try{if((t=JSON.parse(e)).error)return t.error;throw e}catch(t){return e}},e}();t.XhrClient=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0);!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Info=2]="Info",e[e.Verbose=3]="Verbose"}(o=t.LogLevel||(t.LogLevel={}));var i=function(){function e(e,t){void 0===t&&(t={}),this._level=o.Info;var n=t.correlationId,r=void 0===n?"":n,i=t.level,s=void 0===i?o.Info:i,a=t.piiLoggingEnabled,c=void 0!==a&&a;this._localCallback=e,this._correlationId=r,this._level=s,this._piiLoggingEnabled=c}return e.prototype.logMessage=function(e,t,n){if(!(e>this._level||!this._piiLoggingEnabled&&n)){var i,s=(new Date).toUTCString();i=r.Utils.isEmpty(this._correlationId)?s+":"+r.Utils.getLibraryVersion()+"-"+o[e]+" "+t:s+":"+this._correlationId+"-"+r.Utils.getLibraryVersion()+"-"+o[e]+" "+t,this.executeCallback(e,i,n)}},e.prototype.executeCallback=function(e,t,n){this._localCallback&&this._localCallback(e,t,n)},e.prototype.error=function(e){this.logMessage(o.Error,e,!1)},e.prototype.errorPii=function(e){this.logMessage(o.Error,e,!0)},e.prototype.warning=function(e){this.logMessage(o.Warning,e,!1)},e.prototype.warningPii=function(e){this.logMessage(o.Warning,e,!0)},e.prototype.info=function(e){this.logMessage(o.Info,e,!1)},e.prototype.infoPii=function(e){this.logMessage(o.Info,e,!0)},e.prototype.verbose=function(e){this.logMessage(o.Verbose,e,!1)},e.prototype.verbosePii=function(e){this.logMessage(o.Verbose,e,!0)},e}();t.Logger=i},function(e,t,n){e.exports=n(12)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5);t.UserAgentApplication=o.UserAgentApplication;var r=n(10);t.Logger=r.Logger;var i=n(10);t.LogLevel=i.LogLevel;var s=n(7);t.Account=s.Account;var a=n(1);t.Constants=a.Constants;var c=n(6);t.TokenResponse=c.TokenResponse;var u=n(2);t.Authority=u.Authority;var l=n(5);t.CacheResult=l.CacheResult;var p=n(22);t.TConfiguration=p.TConfiguration},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){return function(e,t,n,r,i){this.authority=e,this.clientId=t,this.scopes=n,this.userIdentifier=o.Utils.base64EncodeStringUrlSafe(r)+"."+o.Utils.base64EncodeStringUrlSafe(i)}}();t.AccessTokenKey=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){return function(e,t,n,o){this.accessToken=e,this.idToken=t,this.expiresIn=n,this.clientInfo=o}}();t.AccessTokenValue=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){function e(e,t,n,r,i,s){this.authorityInstance=e,this.clientId=t,this.scopes=n,this.responseType=r,this.redirectUri=i,this.correlationId=o.Utils.createNewGuid(),this.state=s&&!o.Utils.isEmpty(s)?o.Utils.createNewGuid()+"|"+s:o.Utils.createNewGuid(),this.nonce=o.Utils.createNewGuid(),this.xClientSku="MSAL.JS",this.xClientVer=o.Utils.getLibraryVersion()}return Object.defineProperty(e.prototype,"authority",{get:function(){return this.authorityInstance?this.authorityInstance.CanonicalAuthority:null},enumerable:!0,configurable:!0}),e.prototype.createNavigateUrl=function(e){var t=this.createNavigationUrlString(e),n=this.authorityInstance.AuthorizationEndpoint;return n.indexOf("?")<0?n+="?":n+="&",""+n+t.join("&")},e.prototype.createNavigationUrlString=function(e){e||(e=[this.clientId]),-1===e.indexOf(this.clientId)&&e.push(this.clientId);var t=[];return t.push("response_type="+this.responseType),this.translateclientIdUsedInScope(e),t.push("scope="+encodeURIComponent(this.parseScope(e))),t.push("client_id="+encodeURIComponent(this.clientId)),t.push("redirect_uri="+encodeURIComponent(this.redirectUri)),t.push("state="+encodeURIComponent(this.state)),t.push("nonce="+encodeURIComponent(this.nonce)),t.push("client_info=1"),t.push("x-client-SKU="+this.xClientSku),t.push("x-client-Ver="+this.xClientVer),this.extraQueryParameters&&t.push(this.extraQueryParameters),t.push("client-request-id="+encodeURIComponent(this.correlationId)),t},e.prototype.translateclientIdUsedInScope=function(e){var t=e.indexOf(this.clientId);t>=0&&(e.splice(t,1),-1===e.indexOf("openid")&&e.push("openid"),-1===e.indexOf("profile")&&e.push("profile"))},e.prototype.parseScope=function(e){var t="";if(e)for(var n=0;n<e.length;++n)t+=n!==e.length-1?e[n]+" ":e[n];return t},e}();t.AuthenticationRequestParameters=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){function e(e){if(!e||o.Utils.isEmpty(e))return this.uid="",void(this.utid="");try{var t=o.Utils.base64DecodeStringUrlSafe(e),n=JSON.parse(t);n&&(n.hasOwnProperty("uid")&&(this.uid=n.uid),n.hasOwnProperty("utid")&&(this.utid=n.utid))}catch(e){throw new Error(e)}}return Object.defineProperty(e.prototype,"uid",{get:function(){return this._uid?this._uid:""},set:function(e){this._uid=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"utid",{get:function(){return this._utid?this._utid:""},set:function(e){this._utid=e},enumerable:!0,configurable:!0}),e}();t.HomeAccountIdentifier=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){return function(e){if(o.Utils.isEmpty(e))throw new Error("null or empty raw idtoken");try{this.rawIdToken=e,this.decodedIdToken=o.Utils.extractIdToken(e),this.decodedIdToken&&(this.decodedIdToken.hasOwnProperty("iss")&&(this.issuer=this.decodedIdToken.iss),this.decodedIdToken.hasOwnProperty("oid")&&(this.objectId=this.decodedIdToken.oid),this.decodedIdToken.hasOwnProperty("sub")&&(this.subject=this.decodedIdToken.sub),this.decodedIdToken.hasOwnProperty("tid")&&(this.tenantId=this.decodedIdToken.tid),this.decodedIdToken.hasOwnProperty("ver")&&(this.version=this.decodedIdToken.ver),this.decodedIdToken.hasOwnProperty("preferred_username")&&(this.preferredName=this.decodedIdToken.preferred_username),this.decodedIdToken.hasOwnProperty("name")&&(this.name=this.decodedIdToken.name),this.decodedIdToken.hasOwnProperty("nonce")&&(this.nonce=this.decodedIdToken.nonce),this.decodedIdToken.hasOwnProperty("exp")&&(this.expiration=this.decodedIdToken.exp),this.decodedIdToken.hasOwnProperty("home_oid")&&(this.homeObjectId=this.decodedIdToken.home_oid),this.decodedIdToken.hasOwnProperty("sid")&&(this.sid=this.decodedIdToken.sid),this.decodedIdToken.hasOwnProperty("uid")&&(this.uid=this.decodedIdToken.uid),this.decodedIdToken.hasOwnProperty("utid")&&(this.utid=this.decodedIdToken.utid))}catch(e){throw new Error("Failed to parse the returned id token")}}}();t.IdToken=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(19),i=function(){function e(t){if(e._instance)return e._instance;if(this._cacheLocation=t,this._localStorageSupported=void 0!==window[this._cacheLocation]&&null!=window[this._cacheLocation],this._sessionStorageSupported=void 0!==window[t]&&null!=window[t],e._instance=this,!this._localStorageSupported&&!this._sessionStorageSupported)throw new Error("localStorage and sessionStorage not supported");return e._instance}return e.prototype.setItem=function(e,t,n){window[this._cacheLocation]&&window[this._cacheLocation].setItem(e,t),n&&this.setItemCookie(e,t)},e.prototype.getItem=function(e,t){return t&&this.getItemCookie(e)?this.getItemCookie(e):window[this._cacheLocation]?window[this._cacheLocation].getItem(e):null},e.prototype.removeItem=function(e){if(window[this._cacheLocation])return window[this._cacheLocation].removeItem(e)},e.prototype.clear=function(){if(window[this._cacheLocation])return window[this._cacheLocation].clear()},e.prototype.getAllAccessTokens=function(e,t){var n,o=[],i=window[this._cacheLocation];if(i){var s=void 0;for(s in i)if(i.hasOwnProperty(s)&&s.match(e)&&s.match(t)){var a=this.getItem(s);a&&(n=new r.AccessTokenCacheItem(JSON.parse(s),JSON.parse(a)),o.push(n))}}return o},e.prototype.removeAcquireTokenEntries=function(e,t){var n=window[this._cacheLocation];if(n){var o=void 0;for(o in n)n.hasOwnProperty(o)&&(""!==e&&o.indexOf(e)>-1||""!==t&&o.indexOf(t)>-1)&&this.removeItem(o)}},e.prototype.resetCacheItems=function(){var e=window[this._cacheLocation];if(e){var t=void 0;for(t in e)e.hasOwnProperty(t)&&(-1!==t.indexOf(o.Constants.msal)&&this.setItem(t,""),-1!==t.indexOf(o.Constants.renewStatus)&&this.removeItem(t))}},e.prototype.setItemCookie=function(e,t,n){var o=e+"="+t+";";n&&(o+="expires="+this.setExpirationCookie(n)+";");document.cookie=o},e.prototype.getItemCookie=function(e){for(var t=e+"=",n=document.cookie.split(";"),o=0;o<n.length;o++){for(var r=n[o];" "===r.charAt(0);)r=r.substring(1);if(0===r.indexOf(t))return r.substring(t.length,r.length)}return""},e.prototype.setExpirationCookie=function(e){var t=new Date;return new Date(t.getTime()+24*e*60*60*1e3).toUTCString()},e.prototype.clearCookie=function(){this.setItemCookie(o.Constants.nonceIdToken,"",-1),this.setItemCookie(o.Constants.stateLogin,"",-1),this.setItemCookie(o.Constants.loginRequest,"",-1),this.setItemCookie(o.Constants.stateAcquireToken,"",-1)},e}();t.Storage=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){return function(e,t){this.key=e,this.value=t}}();t.AccessTokenCacheItem=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(8),i=n(21),s=n(2),a=n(4),c=function(){function e(){}return e.DetectAuthorityFromUrl=function(e){switch(e=o.Utils.CanonicalizeUri(e),o.Utils.GetUrlComponents(e).PathSegments[0]){case"tfp":return s.AuthorityType.B2C;case"adfs":return s.AuthorityType.Adfs;default:return s.AuthorityType.Aad}},e.CreateInstance=function(t,n){if(o.Utils.isEmpty(t))return null;switch(e.DetectAuthorityFromUrl(t)){case s.AuthorityType.B2C:return new i.B2cAuthority(t,n);case s.AuthorityType.Aad:return new r.AadAuthority(t,n);default:throw a.ErrorMessage.invalidAuthorityType}},e}();t.AuthorityFactory=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),r=n(8),i=n(2),s=n(4),a=n(0),c=function(e){function t(t,n){var o=e.call(this,t,n)||this,r=a.Utils.GetUrlComponents(t),i=r.PathSegments;if(i.length<3)throw s.ErrorMessage.b2cAuthorityUriInvalidPath;return o.CanonicalAuthority="https://"+r.HostNameAndPort+"/"+i[0]+"/"+i[1]+"/"+i[2]+"/",o}return o.__extends(t,e),Object.defineProperty(t.prototype,"AuthorityType",{get:function(){return i.AuthorityType.B2C},enumerable:!0,configurable:!0}),t.prototype.GetOpenIdConfigurationEndpointAsync=function(){var e=this,t=new Promise(function(t,n){return t(e.DefaultOpenIdConfigurationEndpoint)});return this.IsValidationEnabled?this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)?t:new Promise(function(e,t){return t(s.ErrorMessage.unsupportedAuthorityValidation)}):t},t}(r.AadAuthority);t.B2cAuthority=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Configuration=function(e,t,n,o){var r=void 0===e?{clientId:s}:e,i=r.clientId,s=void 0===i?"":i,a=r.authority,c=void 0===a?null:a,u=r.validateAuthority,l=void 0===u||u,p=r.redirectUri,d=void 0===p?function(){return window.location.href.split("?")[0].split("#")[0]}:p,h=r.postLogoutRedirectUri,f=void 0===h?function(){return window.location.href.split("?")[0].split("#")[0]}:h,g=r.state,m=void 0===g?"":g,C=r.navigateToLoginRequestUrl,y=void 0===C||C,w=void 0===t?{}:t,v=w.cacheLocation,b=void 0===v?"localStorage":v,I=w.storeAuthStateInCookie,k=void 0!==I&&I,S=void 0===n?{}:n,A=S.loadFrameTimeout,T=void 0===A?6e3:A,P=S.tokenRenewalOffsetSeconds,E=void 0===P?300:P,O=void 0===o?{}:o,_=O.isAngular,U=void 0!==_&&_,R=O.unprotectedResources,x=void 0===R?new Array:R,j=O.protectedResourceMap;return{auth:{clientId:s,authority:c,validateAuthority:l,redirectUri:d,postLogoutRedirectUri:f,state:m,navigateToLoginRequestUrl:y},cache:{cacheLocation:b,storeAuthStateInCookie:k},system:{loadFrameTimeout:T,tokenRenewalOffsetSeconds:E},framework:{isAngular:U,unprotectedResources:x,protectedResourceMap:void 0===j?new Map:j}}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,